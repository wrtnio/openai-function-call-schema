{
  "openapi": "3.0.3",
  "functions": [
    {
      "method": "get",
      "path": "/vault/accounts",
      "name": "vault_accounts_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "namePrefix": {
                  "type": "string"
                },
                "nameSuffix": {
                  "type": "string"
                },
                "minAmountThreshold": {
                  "type": "number"
                },
                "assetId": {
                  "type": "string",
                  "x-fb-entity": "asset"
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "assets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "total": {
                    "description": "The total wallet balance. In EOS this value includes the network balance, self staking and pending refund. For all other coins it is the balance as it appears on the blockchain.",
                    "type": "string"
                  },
                  "balance": {
                    "deprecated": true,
                    "description": "Deprecated - replaced by \"total\"",
                    "type": "string"
                  },
                  "available": {
                    "description": "Funds available for transfer. Equals the blockchain balance minus any locked amounts",
                    "type": "string"
                  },
                  "pending": {
                    "description": "The cumulative balance of all transactions pending to be cleared",
                    "type": "string"
                  },
                  "frozen": {
                    "description": "The cumulative frozen balance",
                    "type": "string"
                  },
                  "lockedAmount": {
                    "description": "Funds in outgoing transactions that are not yet published to the network",
                    "type": "string"
                  },
                  "staked": {
                    "description": "Staked balance",
                    "type": "string"
                  },
                  "totalStakedCPU": {
                    "type": "number",
                    "description": "Deprecated"
                  },
                  "totalStakedNetwork": {
                    "type": "string",
                    "description": "Deprecated"
                  },
                  "selfStakedCPU": {
                    "type": "string",
                    "description": "Deprecated"
                  },
                  "selfStakedNetwork": {
                    "type": "string",
                    "description": "Deprecated"
                  },
                  "pendingRefundCPU": {
                    "type": "string",
                    "description": "Deprecated"
                  },
                  "pendingRefundNetwork": {
                    "type": "string",
                    "description": "Deprecated"
                  },
                  "blockHeight": {
                    "type": "string"
                  },
                  "blockHash": {
                    "type": "string"
                  },
                  "rewardsInfo": {
                    "type": "object",
                    "properties": {
                      "pendingRewards": {
                        "description": "Amount that is pending for rewards",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "hiddenOnUI": {
              "type": "boolean"
            },
            "customerRefId": {
              "type": "string"
            },
            "autoFuel": {
              "type": "boolean"
            }
          }
        }
      },
      "description": "List vault accounts.\n\nGets all vault accounts in your workspace."
    },
    {
      "method": "post",
      "path": "/vault/accounts",
      "name": "vault_accounts_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "total": {
                  "description": "The total wallet balance. In EOS this value includes the network balance, self staking and pending refund. For all other coins it is the balance as it appears on the blockchain.",
                  "type": "string"
                },
                "balance": {
                  "deprecated": true,
                  "description": "Deprecated - replaced by \"total\"",
                  "type": "string"
                },
                "available": {
                  "description": "Funds available for transfer. Equals the blockchain balance minus any locked amounts",
                  "type": "string"
                },
                "pending": {
                  "description": "The cumulative balance of all transactions pending to be cleared",
                  "type": "string"
                },
                "frozen": {
                  "description": "The cumulative frozen balance",
                  "type": "string"
                },
                "lockedAmount": {
                  "description": "Funds in outgoing transactions that are not yet published to the network",
                  "type": "string"
                },
                "staked": {
                  "description": "Staked balance",
                  "type": "string"
                },
                "totalStakedCPU": {
                  "type": "number",
                  "description": "Deprecated"
                },
                "totalStakedNetwork": {
                  "type": "string",
                  "description": "Deprecated"
                },
                "selfStakedCPU": {
                  "type": "string",
                  "description": "Deprecated"
                },
                "selfStakedNetwork": {
                  "type": "string",
                  "description": "Deprecated"
                },
                "pendingRefundCPU": {
                  "type": "string",
                  "description": "Deprecated"
                },
                "pendingRefundNetwork": {
                  "type": "string",
                  "description": "Deprecated"
                },
                "blockHeight": {
                  "type": "string"
                },
                "blockHash": {
                  "type": "string"
                },
                "rewardsInfo": {
                  "type": "object",
                  "properties": {
                    "pendingRewards": {
                      "description": "Amount that is pending for rewards",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "hiddenOnUI": {
            "type": "boolean"
          },
          "customerRefId": {
            "type": "string"
          },
          "autoFuel": {
            "type": "boolean"
          }
        }
      },
      "description": "Create a new vault account.\n\nCreates a new vault account with the requested name."
    },
    {
      "method": "get",
      "path": "/vault/accounts_paged",
      "name": "vault_accounts_paged_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "namePrefix": {
                  "type": "string"
                },
                "nameSuffix": {
                  "type": "string"
                },
                "minAmountThreshold": {
                  "type": "number"
                },
                "assetId": {
                  "type": "string",
                  "x-fb-entity": "asset"
                },
                "before": {
                  "type": "string"
                },
                "after": {
                  "type": "string"
                },
                "limit": {
                  "type": "number",
                  "minimum": 1,
                  "maximum": 500,
                  "default": 200
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "assets": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "total": {
                        "description": "The total wallet balance. In EOS this value includes the network balance, self staking and pending refund. For all other coins it is the balance as it appears on the blockchain.",
                        "type": "string"
                      },
                      "balance": {
                        "deprecated": true,
                        "description": "Deprecated - replaced by \"total\"",
                        "type": "string"
                      },
                      "available": {
                        "description": "Funds available for transfer. Equals the blockchain balance minus any locked amounts",
                        "type": "string"
                      },
                      "pending": {
                        "description": "The cumulative balance of all transactions pending to be cleared",
                        "type": "string"
                      },
                      "frozen": {
                        "description": "The cumulative frozen balance",
                        "type": "string"
                      },
                      "lockedAmount": {
                        "description": "Funds in outgoing transactions that are not yet published to the network",
                        "type": "string"
                      },
                      "staked": {
                        "description": "Staked balance",
                        "type": "string"
                      },
                      "totalStakedCPU": {
                        "type": "number",
                        "description": "Deprecated"
                      },
                      "totalStakedNetwork": {
                        "type": "string",
                        "description": "Deprecated"
                      },
                      "selfStakedCPU": {
                        "type": "string",
                        "description": "Deprecated"
                      },
                      "selfStakedNetwork": {
                        "type": "string",
                        "description": "Deprecated"
                      },
                      "pendingRefundCPU": {
                        "type": "string",
                        "description": "Deprecated"
                      },
                      "pendingRefundNetwork": {
                        "type": "string",
                        "description": "Deprecated"
                      },
                      "blockHeight": {
                        "type": "string"
                      },
                      "blockHash": {
                        "type": "string"
                      },
                      "rewardsInfo": {
                        "type": "object",
                        "properties": {
                          "pendingRewards": {
                            "description": "Amount that is pending for rewards",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "hiddenOnUI": {
                  "type": "boolean"
                },
                "customerRefId": {
                  "type": "string"
                },
                "autoFuel": {
                  "type": "boolean"
                }
              }
            }
          },
          "paging": {
            "type": "object",
            "properties": {
              "before": {
                "type": "string"
              },
              "after": {
                "type": "string"
              }
            }
          },
          "previousUrl": {
            "type": "string"
          },
          "nextUrl": {
            "type": "string"
          }
        }
      },
      "description": "List vault acounts (Paginated).\n\nGets all vault accounts in your workspace. This endpoint returns a limited amount of results with a quick response time."
    },
    {
      "method": "get",
      "path": "/vault/accounts/{vaultAccountId}",
      "name": "vault_accounts_getByVaultaccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account to return type: string"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "total": {
                  "description": "The total wallet balance. In EOS this value includes the network balance, self staking and pending refund. For all other coins it is the balance as it appears on the blockchain.",
                  "type": "string"
                },
                "balance": {
                  "deprecated": true,
                  "description": "Deprecated - replaced by \"total\"",
                  "type": "string"
                },
                "available": {
                  "description": "Funds available for transfer. Equals the blockchain balance minus any locked amounts",
                  "type": "string"
                },
                "pending": {
                  "description": "The cumulative balance of all transactions pending to be cleared",
                  "type": "string"
                },
                "frozen": {
                  "description": "The cumulative frozen balance",
                  "type": "string"
                },
                "lockedAmount": {
                  "description": "Funds in outgoing transactions that are not yet published to the network",
                  "type": "string"
                },
                "staked": {
                  "description": "Staked balance",
                  "type": "string"
                },
                "totalStakedCPU": {
                  "type": "number",
                  "description": "Deprecated"
                },
                "totalStakedNetwork": {
                  "type": "string",
                  "description": "Deprecated"
                },
                "selfStakedCPU": {
                  "type": "string",
                  "description": "Deprecated"
                },
                "selfStakedNetwork": {
                  "type": "string",
                  "description": "Deprecated"
                },
                "pendingRefundCPU": {
                  "type": "string",
                  "description": "Deprecated"
                },
                "pendingRefundNetwork": {
                  "type": "string",
                  "description": "Deprecated"
                },
                "blockHeight": {
                  "type": "string"
                },
                "blockHash": {
                  "type": "string"
                },
                "rewardsInfo": {
                  "type": "object",
                  "properties": {
                    "pendingRewards": {
                      "description": "Amount that is pending for rewards",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "hiddenOnUI": {
            "type": "boolean"
          },
          "customerRefId": {
            "type": "string"
          },
          "autoFuel": {
            "type": "boolean"
          }
        }
      },
      "description": "Find a vault account by ID.\n\nReturns the requested vault account."
    },
    {
      "method": "put",
      "path": "/vault/accounts/{vaultAccountId}",
      "name": "vault_accounts_putByVaultaccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account to edit"
            },
            "body": {}
          }
        }
      ],
      "description": "Rename a vault account.\n\nRenames the requested vault account."
    },
    {
      "method": "get",
      "path": "/vault/asset_wallets",
      "name": "vault_asset_wallets_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "totalAmountLargerThan": {
                  "type": "number",
                  "description": "When specified, only asset wallets with total balance larger than this amount are returned."
                },
                "assetId": {
                  "type": "string",
                  "x-fb-entity": "asset",
                  "description": "When specified, only asset wallets cross vault accounts that have this asset ID are returned."
                },
                "before": {
                  "type": "string",
                  "description": "Fetches the next paginated response before this element. This element is a cursor and is returned at the response of the previous page."
                },
                "after": {
                  "type": "string",
                  "description": "Fetches the next paginated response after this element. This element is a cursor and is returned at the response of the previous page."
                },
                "limit": {
                  "type": "number",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": 200,
                  "description": "The maximum number of asset wallets in a single response. The default is 200 and the maximum is 1000."
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "assetWallets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "vaultId": {
                  "description": "ID of the vault account. You can [get the vault account by this ID](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid) to retrieve vault properties such as its name, auto fueling, hidden on UI or customer reference ID.",
                  "type": "string"
                },
                "assetId": {
                  "description": "ID of the asset. You can get more information about this asset by using the [supported assets API](https://developers.fireblocks.com/reference/get_supported-assets)",
                  "type": "string"
                },
                "available": {
                  "description": "Available balance, available to use in a transaction.",
                  "type": "string"
                },
                "total": {
                  "description": "Total balance at the asset wallet, as seen at the blockchain explorers. This includes balance available, and any kind of unavailable balance such as locked, frozen, or others.",
                  "type": "string"
                },
                "pending": {
                  "description": "Pending balance.",
                  "type": "string"
                },
                "staked": {
                  "description": "Staked balance.",
                  "type": "string"
                },
                "frozen": {
                  "description": "Funds frozen due to the anti-money laundering policy at this workspace.",
                  "type": "string"
                },
                "lockedAmount": {
                  "description": "Locked balance.",
                  "type": "string"
                },
                "blockHeight": {
                  "description": "The height (number) of the block of the balance. Can by empty.",
                  "type": "string"
                },
                "blockHash": {
                  "description": "The hash of the block of the balance. Can by empty.",
                  "type": "string"
                },
                "creationTimestamp": {
                  "description": "Unix timestamp of the time the asset wallet was created.",
                  "type": "string"
                }
              }
            }
          },
          "paging": {
            "type": "object",
            "properties": {
              "before": {
                "description": "A string representing a cursor. Users can use this with a new request to this API endpoint as the “before” request parameter to fetch the previous page of results.",
                "type": "string"
              },
              "after": {
                "description": "A string representing a cursor. Users can use this with a new request to this API endpoint as the “before” request parameter to fetch the next page of results.",
                "type": "string"
              }
            }
          }
        }
      },
      "description": "List asset wallets (Paginated).\n\nGets all asset wallets at all of the vault accounts in your workspace. An asset wallet is an asset at a vault account. This method allows fast traversal of all account balances.\n**Note:**\n  - This API endpoint is in limited availability and available for selected customers. If you would like to get early access to this endpoint, please reach out to [Fireblocks Support](https://support.fireblocks.io/hc/en-us/requests/new?ticket_form_id=36000337220)\n  - This API call is subject to [rate limits](https://developers.fireblocks.com/reference/rate-limiting).\n"
    },
    {
      "method": "post",
      "path": "/vault/accounts/{vaultAccountId}/hide",
      "name": "vault_accounts_hide_postByVaultaccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "minimum": 1,
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The vault account to hide"
            }
          }
        }
      ],
      "description": "Hide a vault account in the console.\n\nHides the requested vault account from the web console view."
    },
    {
      "method": "post",
      "path": "/vault/accounts/{vaultAccountId}/unhide",
      "name": "vault_accounts_unhide_postByVaultaccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "minimum": 1,
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The vault account to unhide"
            }
          }
        }
      ],
      "description": "Unhide a vault account in the console.\n\nMakes a hidden vault account visible in web console view."
    },
    {
      "method": "post",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}/activate",
      "name": "vault_accounts_activate_postByVaultaccountidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account to return, or 'default' for the default vault account"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "legacyAddress": {
            "type": "string"
          },
          "enterpriseAddress": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "eosAccountName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "activationTxId": {
            "type": "string"
          }
        }
      },
      "description": "Activate a wallet in a vault account.\n\nInitiates activation for a wallet in a vault account."
    },
    {
      "method": "post",
      "path": "/vault/accounts/{vaultAccountId}/set_customer_ref_id",
      "name": "vault_accounts_set_customer_ref_id_postByVaultaccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "minimum": 1,
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The vault account ID"
            },
            "body": {}
          }
        }
      ],
      "description": "Set an AML/KYT customer reference ID for a vault account.\n\nAssigns an AML/KYT customer reference ID for the vault account."
    },
    {
      "method": "post",
      "path": "/vault/accounts/{vaultAccountId}/set_auto_fuel",
      "name": "vault_accounts_set_auto_fuel_postByVaultaccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "minimum": 1,
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The vault account ID"
            },
            "body": {}
          }
        }
      ],
      "description": "Turn autofueling on or off.\n\nSets the autofueling property of the vault account to enabled or disabled."
    },
    {
      "method": "get",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}",
      "name": "vault_accounts_getByVaultaccountidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account to return"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "total": {
            "description": "The total wallet balance. In EOS this value includes the network balance, self staking and pending refund. For all other coins it is the balance as it appears on the blockchain.",
            "type": "string"
          },
          "balance": {
            "deprecated": true,
            "description": "Deprecated - replaced by \"total\"",
            "type": "string"
          },
          "available": {
            "description": "Funds available for transfer. Equals the blockchain balance minus any locked amounts",
            "type": "string"
          },
          "pending": {
            "description": "The cumulative balance of all transactions pending to be cleared",
            "type": "string"
          },
          "frozen": {
            "description": "The cumulative frozen balance",
            "type": "string"
          },
          "lockedAmount": {
            "description": "Funds in outgoing transactions that are not yet published to the network",
            "type": "string"
          },
          "staked": {
            "description": "Staked balance",
            "type": "string"
          },
          "totalStakedCPU": {
            "type": "number",
            "description": "Deprecated"
          },
          "totalStakedNetwork": {
            "type": "string",
            "description": "Deprecated"
          },
          "selfStakedCPU": {
            "type": "string",
            "description": "Deprecated"
          },
          "selfStakedNetwork": {
            "type": "string",
            "description": "Deprecated"
          },
          "pendingRefundCPU": {
            "type": "string",
            "description": "Deprecated"
          },
          "pendingRefundNetwork": {
            "type": "string",
            "description": "Deprecated"
          },
          "blockHeight": {
            "type": "string"
          },
          "blockHash": {
            "type": "string"
          },
          "rewardsInfo": {
            "type": "object",
            "properties": {
              "pendingRewards": {
                "description": "Amount that is pending for rewards",
                "type": "string"
              }
            }
          }
        }
      },
      "description": "Get the asset balance for a vault account.\n\nReturns a wallet for a specific asset of a vault account."
    },
    {
      "method": "post",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}",
      "name": "vault_accounts_postByVaultaccountidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account to return, or 'default' for the default vault account"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            },
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "legacyAddress": {
            "type": "string"
          },
          "enterpriseAddress": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "eosAccountName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "activationTxId": {
            "type": "string"
          }
        }
      },
      "description": "Create a new wallet.\n\nCreates a wallet for a specific asset in a vault account."
    },
    {
      "method": "post",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}/balance",
      "name": "vault_accounts_balance_postByVaultaccountidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account to return"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            },
            "body": {
              "type": "object"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "total": {
            "description": "The total wallet balance. In EOS this value includes the network balance, self staking and pending refund. For all other coins it is the balance as it appears on the blockchain.",
            "type": "string"
          },
          "balance": {
            "deprecated": true,
            "description": "Deprecated - replaced by \"total\"",
            "type": "string"
          },
          "available": {
            "description": "Funds available for transfer. Equals the blockchain balance minus any locked amounts",
            "type": "string"
          },
          "pending": {
            "description": "The cumulative balance of all transactions pending to be cleared",
            "type": "string"
          },
          "frozen": {
            "description": "The cumulative frozen balance",
            "type": "string"
          },
          "lockedAmount": {
            "description": "Funds in outgoing transactions that are not yet published to the network",
            "type": "string"
          },
          "staked": {
            "description": "Staked balance",
            "type": "string"
          },
          "totalStakedCPU": {
            "type": "number",
            "description": "Deprecated"
          },
          "totalStakedNetwork": {
            "type": "string",
            "description": "Deprecated"
          },
          "selfStakedCPU": {
            "type": "string",
            "description": "Deprecated"
          },
          "selfStakedNetwork": {
            "type": "string",
            "description": "Deprecated"
          },
          "pendingRefundCPU": {
            "type": "string",
            "description": "Deprecated"
          },
          "pendingRefundNetwork": {
            "type": "string",
            "description": "Deprecated"
          },
          "blockHeight": {
            "type": "string"
          },
          "blockHash": {
            "type": "string"
          },
          "rewardsInfo": {
            "type": "object",
            "properties": {
              "pendingRewards": {
                "description": "Amount that is pending for rewards",
                "type": "string"
              }
            }
          }
        }
      },
      "description": "Refresh asset balance data.\n\nUpdates the balance of a specific asset in a vault account."
    },
    {
      "method": "get",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}/addresses",
      "name": "vault_accounts_addresses_getByVaultaccountidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account to return"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            }
          }
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset"
            },
            "address": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "customerRefId": {
              "type": "string"
            },
            "addressFormat": {
              "type": "string",
              "enum": [
                "SEGWIT",
                "LEGACY"
              ]
            },
            "legacyAddress": {
              "type": "string"
            },
            "enterpriseAddress": {
              "type": "string"
            },
            "bip44AddressIndex": {
              "type": "integer"
            },
            "userDefined": {
              "type": "boolean"
            }
          }
        }
      },
      "description": "Get asset addresses.\n\nLists all addresses for specific asset of vault account."
    },
    {
      "method": "post",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}/addresses",
      "name": "vault_accounts_addresses_postByVaultaccountidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account to return"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            },
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "legacyAddress": {
            "type": "string"
          },
          "enterpriseAddress": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "bip44AddressIndex": {
            "type": "integer"
          }
        }
      },
      "description": "Create new asset deposit address.\n\nCreates a new deposit address for an asset of a vault account."
    },
    {
      "method": "get",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}/max_spendable_amount",
      "name": "vault_accounts_max_spendable_amount_getByVaultaccountidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account, or 'default' for the default vault account"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            },
            "query": {
              "type": "object",
              "properties": {
                "manualSignging": {
                  "type": "boolean",
                  "description": "False by default. The maximum number of inputs depends if the transaction will be signed by an automated co-signer server or on a mobile device."
                }
              },
              "required": []
            }
          }
        }
      ],
      "description": "Get the maximum spendable amount in a single transaction.\n\nGet the maximum amount of a particular asset that can be spent in a single transaction from a specified vault account (UTXO assets only, with a limitation on number of inputs embedded). Send several transactions if you want to spend more than the maximum spendable amount."
    },
    {
      "method": "put",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}",
      "name": "vault_accounts_addresses_putByVaultaccountidAndAssetidAndAddressid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            },
            "addressId": {
              "type": "string",
              "description": "The address for which to add a description. For XRP, use <address>:<tag>, for all other assets, use only the address"
            },
            "body": {}
          }
        }
      ],
      "description": "Update address description.\n\nUpdates the description of an existing address of an asset in a vault account."
    },
    {
      "method": "post",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}/set_customer_ref_id",
      "name": "vault_accounts_addresses_set_customer_ref_id_postByVaultaccountidAndAssetidAndAddressid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            },
            "addressId": {
              "type": "string",
              "description": "The address for which to add a description. For XRP, use <address>:<tag>, for all other assets, use only the address"
            },
            "body": {}
          }
        }
      ],
      "description": "Assign AML customer reference ID.\n\nSets an AML/KYT customer reference ID for a specific address."
    },
    {
      "method": "post",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}/create_legacy",
      "name": "vault_accounts_addresses_create_legacy_postByVaultaccountidAndAssetidAndAddressid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            },
            "addressId": {
              "type": "string",
              "description": "The segwit address to translate"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "legacyAddress": {
            "type": "string"
          },
          "enterpriseAddress": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "bip44AddressIndex": {
            "type": "integer"
          }
        }
      },
      "description": "Convert a segwit address to legacy format.\n\nConverts an existing segwit address to the legacy format."
    },
    {
      "method": "get",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}/unspent_inputs",
      "name": "vault_accounts_unspent_inputs_getByVaultaccountidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account",
              "description": "The ID of the vault account"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            }
          }
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "input": {
              "type": "object",
              "properties": {
                "txHash": {
                  "type": "string"
                },
                "index": {
                  "type": "number"
                }
              }
            },
            "address": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            },
            "confirmations": {
              "type": "number"
            },
            "status": {
              "type": "string"
            }
          }
        }
      },
      "description": "Get UTXO unspent inputs information.\n\nReturns unspent inputs information of an asset in a vault account."
    },
    {
      "method": "get",
      "path": "/vault/public_key_info/",
      "name": "vault_public_key_info_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "derivationPath": {
                  "type": "string"
                },
                "algorithm": {
                  "type": "string"
                },
                "compressed": {
                  "type": "boolean"
                }
              },
              "required": [
                "derivationPath",
                "algorithm"
              ]
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string"
          },
          "derivationPath": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "publicKey": {
            "type": "string"
          }
        }
      },
      "description": "Get the public key information.\n\nGets the public key information based on derivation path and signing algorithm."
    },
    {
      "method": "get",
      "path": "/vault/accounts/{vaultAccountId}/{assetId}/{change}/{addressIndex}/public_key_info",
      "name": "vault_accounts_public_key_info_getByVaultaccountidAndAssetidAndChangeAndAddressindex",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "vaultAccountId": {
              "type": "string",
              "format": "numeric",
              "x-fb-entity": "vault_account"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset"
            },
            "change": {
              "type": "number"
            },
            "addressIndex": {
              "type": "number"
            },
            "query": {
              "type": "object",
              "properties": {
                "compressed": {
                  "type": "boolean"
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string"
          },
          "derivationPath": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "publicKey": {
            "type": "string"
          }
        }
      },
      "description": "Get the public key for a vault account.\n\nGets the public key information for the vault account."
    },
    {
      "method": "get",
      "path": "/vault/assets",
      "name": "vault_assets_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "accountNamePrefix": {
                  "type": "string"
                },
                "accountNameSuffix": {
                  "type": "string"
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "total": {
              "description": "The total wallet balance. In EOS this value includes the network balance, self staking and pending refund. For all other coins it is the balance as it appears on the blockchain.",
              "type": "string"
            },
            "balance": {
              "deprecated": true,
              "description": "Deprecated - replaced by \"total\"",
              "type": "string"
            },
            "available": {
              "description": "Funds available for transfer. Equals the blockchain balance minus any locked amounts",
              "type": "string"
            },
            "pending": {
              "description": "The cumulative balance of all transactions pending to be cleared",
              "type": "string"
            },
            "frozen": {
              "description": "The cumulative frozen balance",
              "type": "string"
            },
            "lockedAmount": {
              "description": "Funds in outgoing transactions that are not yet published to the network",
              "type": "string"
            },
            "staked": {
              "description": "Staked balance",
              "type": "string"
            },
            "totalStakedCPU": {
              "type": "number",
              "description": "Deprecated"
            },
            "totalStakedNetwork": {
              "type": "string",
              "description": "Deprecated"
            },
            "selfStakedCPU": {
              "type": "string",
              "description": "Deprecated"
            },
            "selfStakedNetwork": {
              "type": "string",
              "description": "Deprecated"
            },
            "pendingRefundCPU": {
              "type": "string",
              "description": "Deprecated"
            },
            "pendingRefundNetwork": {
              "type": "string",
              "description": "Deprecated"
            },
            "blockHeight": {
              "type": "string"
            },
            "blockHash": {
              "type": "string"
            },
            "rewardsInfo": {
              "type": "object",
              "properties": {
                "pendingRewards": {
                  "description": "Amount that is pending for rewards",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "description": "Get asset balance for chosen assets.\n\nGets the assets amount summary for all accounts or filtered accounts."
    },
    {
      "method": "get",
      "path": "/vault/assets/{assetId}",
      "name": "vault_assets_getByAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "total": {
            "description": "The total wallet balance. In EOS this value includes the network balance, self staking and pending refund. For all other coins it is the balance as it appears on the blockchain.",
            "type": "string"
          },
          "balance": {
            "deprecated": true,
            "description": "Deprecated - replaced by \"total\"",
            "type": "string"
          },
          "available": {
            "description": "Funds available for transfer. Equals the blockchain balance minus any locked amounts",
            "type": "string"
          },
          "pending": {
            "description": "The cumulative balance of all transactions pending to be cleared",
            "type": "string"
          },
          "frozen": {
            "description": "The cumulative frozen balance",
            "type": "string"
          },
          "lockedAmount": {
            "description": "Funds in outgoing transactions that are not yet published to the network",
            "type": "string"
          },
          "staked": {
            "description": "Staked balance",
            "type": "string"
          },
          "totalStakedCPU": {
            "type": "number",
            "description": "Deprecated"
          },
          "totalStakedNetwork": {
            "type": "string",
            "description": "Deprecated"
          },
          "selfStakedCPU": {
            "type": "string",
            "description": "Deprecated"
          },
          "selfStakedNetwork": {
            "type": "string",
            "description": "Deprecated"
          },
          "pendingRefundCPU": {
            "type": "string",
            "description": "Deprecated"
          },
          "pendingRefundNetwork": {
            "type": "string",
            "description": "Deprecated"
          },
          "blockHeight": {
            "type": "string"
          },
          "blockHash": {
            "type": "string"
          },
          "rewardsInfo": {
            "type": "object",
            "properties": {
              "pendingRewards": {
                "description": "Amount that is pending for rewards",
                "type": "string"
              }
            }
          }
        }
      },
      "description": "Get vault balance by asset.\n\nGets the vault balance summary for an asset."
    },
    {
      "method": "get",
      "path": "/exchange_accounts",
      "name": "exchange_accounts_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "BINANCE",
                "BINANCEUS",
                "BITFINEX",
                "BITHUMB",
                "BITMEX",
                "BITSO",
                "BITSTAMP",
                "BITTREX",
                "CIRCLE",
                "COINBASEPRO",
                "COINMETRO",
                "COINSPRO",
                "CRYPTOCOM",
                "DERIBIT",
                "FTX",
                "FIXUS",
                "GEMINI",
                "HITBTC",
                "HUOBI",
                "KORBIT",
                "KRAKEN",
                "LIQUID",
                "POLONIEX",
                "OKCOIN",
                "OKEX",
                "SEEDCX"
              ]
            },
            "name": {
              "type": "string",
              "description": "Display name of the exchange account"
            },
            "status": {
              "type": "string"
            },
            "assets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "balance": {
                    "type": "string"
                  },
                  "lockedAmount": {
                    "type": "string"
                  },
                  "total": {
                    "type": "string"
                  },
                  "available": {
                    "type": "string"
                  }
                }
              }
            },
            "tradingAccounts": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "assets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "balance": {
                          "type": "string"
                        },
                        "lockedAmount": {
                          "type": "string"
                        },
                        "total": {
                          "type": "string"
                        },
                        "available": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "isSubaccount": {
              "type": "boolean",
              "description": "True if the account is a subaccount in an exchange"
            },
            "mainAccountId": {
              "description": "if the account is a sub-account, the ID of the main account",
              "type": "string"
            }
          }
        }
      },
      "description": "List exchange accounts.\n\nReturns all exchange accounts."
    },
    {
      "method": "get",
      "path": "/exchange_accounts/{exchangeAccountId}",
      "name": "exchange_accounts_getByExchangeaccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "exchangeAccountId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the exchange account to return"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "BINANCE",
              "BINANCEUS",
              "BITFINEX",
              "BITHUMB",
              "BITMEX",
              "BITSO",
              "BITSTAMP",
              "BITTREX",
              "CIRCLE",
              "COINBASEPRO",
              "COINMETRO",
              "COINSPRO",
              "CRYPTOCOM",
              "DERIBIT",
              "FTX",
              "FIXUS",
              "GEMINI",
              "HITBTC",
              "HUOBI",
              "KORBIT",
              "KRAKEN",
              "LIQUID",
              "POLONIEX",
              "OKCOIN",
              "OKEX",
              "SEEDCX"
            ]
          },
          "name": {
            "type": "string",
            "description": "Display name of the exchange account"
          },
          "status": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "balance": {
                  "type": "string"
                },
                "lockedAmount": {
                  "type": "string"
                },
                "total": {
                  "type": "string"
                },
                "available": {
                  "type": "string"
                }
              }
            }
          },
          "tradingAccounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "assets": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "balance": {
                        "type": "string"
                      },
                      "lockedAmount": {
                        "type": "string"
                      },
                      "total": {
                        "type": "string"
                      },
                      "available": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "isSubaccount": {
            "type": "boolean",
            "description": "True if the account is a subaccount in an exchange"
          },
          "mainAccountId": {
            "description": "if the account is a sub-account, the ID of the main account",
            "type": "string"
          }
        }
      },
      "description": "Find a specific exchange account.\n\nReturns an exchange account by ID."
    },
    {
      "method": "post",
      "path": "/exchange_accounts/{exchangeAccountId}/internal_transfer",
      "name": "exchange_accounts_internal_transfer_postByExchangeaccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "exchangeAccountId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the exchange account to return"
            },
            "body": {}
          }
        }
      ],
      "description": "Internal tranfer for exchange accounts.\n\nTransfers funds between trading accounts under the same exchange account."
    },
    {
      "method": "post",
      "path": "/exchange_accounts/{exchangeAccountId}/convert",
      "name": "exchange_accounts_convert_postByExchangeaccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "exchangeAccountId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the exchange account. Please make sure the exchange supports conversions. To find the ID of your exchange account, use GET/exchange_accounts."
            },
            "body": {}
          }
        }
      ],
      "description": "Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions."
    },
    {
      "method": "get",
      "path": "/exchange_accounts/{exchangeAccountId}/{assetId}",
      "name": "exchange_accounts_getByExchangeaccountidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "exchangeAccountId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the exchange account to return"
            },
            "assetId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the asset to return"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "lockedAmount": {
            "type": "string"
          },
          "total": {
            "type": "string"
          },
          "available": {
            "type": "string"
          }
        }
      },
      "description": "Find an asset for an exchange account.\n\nReturns an asset for an exchange account."
    },
    {
      "method": "get",
      "path": "/fiat_accounts",
      "name": "fiat_accounts_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "BLINC"
              ]
            },
            "name": {
              "type": "string",
              "description": "Display name of the fiat account"
            },
            "address": {
              "type": "string"
            },
            "assets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "balance": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "description": "List fiat accounts.\n\nReturns all fiat accounts."
    },
    {
      "method": "get",
      "path": "/fiat_accounts/{accountId}",
      "name": "fiat_accounts_getByAccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "accountId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the fiat account to return"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "BLINC"
            ]
          },
          "name": {
            "type": "string",
            "description": "Display name of the fiat account"
          },
          "address": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "balance": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "description": "Find a specific fiat account.\n\nReturns a fiat account by ID."
    },
    {
      "method": "post",
      "path": "/fiat_accounts/{accountId}/redeem_to_linked_dda",
      "name": "fiat_accounts_redeem_to_linked_dda_postByAccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "accountId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the fiat account to use"
            },
            "body": {}
          }
        }
      ],
      "description": "Redeem funds to DDA.\n\nRedeems funds to the linked DDA."
    },
    {
      "method": "post",
      "path": "/fiat_accounts/{accountId}/deposit_from_linked_dda",
      "name": "fiat_accounts_deposit_from_linked_dda_postByAccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "accountId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the fiat account to use"
            },
            "body": {}
          }
        }
      ],
      "description": "Deposit funds from DDA.\n\nDeposits funds from the linked DDA."
    },
    {
      "method": "get",
      "path": "/network_connections",
      "name": "network_connections_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "localChannel": {
              "deprecated": true,
              "description": "Deprecated - Replaced by `localNetworkId`",
              "type": "object",
              "properties": {
                "networkId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "remoteChannel": {
              "deprecated": true,
              "description": "Deprecated - Replaced by `remoteNetworkId`",
              "type": "object",
              "properties": {
                "networkId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "status": {
              "type": "string",
              "enum": [
                "WAITING_FOR_APPROVAL",
                "APPROVED",
                "CANCELLED",
                "REJECTED",
                "FAILED"
              ]
            },
            "localNetworkId": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ]
            },
            "remoteNetworkId": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ]
            },
            "routingPolicy": {
              "type": "object",
              "properties": {
                "crypto": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "CUSTOM"
                          ],
                          "description": "The network routing logic."
                        },
                        "dstType": {
                          "type": "string",
                          "enum": [
                            "VAULT",
                            "EXCHANGE"
                          ],
                          "description": "The type of destination account the funds are being sent to."
                        },
                        "dstId": {
                          "type": "string",
                          "description": "The ID of the destination account the funds are being sent to."
                        }
                      },
                      "required": [
                        "scheme",
                        "dstType",
                        "dstId"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "DEFAULT"
                          ],
                          "description": "The network routing logic."
                        }
                      },
                      "required": [
                        "scheme"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "NONE"
                          ],
                          "description": "No network routing logic."
                        }
                      },
                      "required": [
                        "scheme"
                      ]
                    }
                  ]
                },
                "sen": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "CUSTOM"
                          ],
                          "description": "The network routing logic."
                        },
                        "dstType": {
                          "type": "string",
                          "enum": [
                            "FIAT_ACCOUNT"
                          ],
                          "description": "The fiat account the funds are being sent to."
                        },
                        "dstId": {
                          "type": "string",
                          "description": "The ID of the fiat account the funds are being sent to."
                        }
                      },
                      "required": [
                        "scheme",
                        "dstType",
                        "dstId"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "DEFAULT"
                          ],
                          "description": "The network routing logic."
                        }
                      },
                      "required": [
                        "scheme"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "NONE"
                          ],
                          "description": "No network routing logic."
                        }
                      },
                      "required": [
                        "scheme"
                      ]
                    }
                  ]
                },
                "signet": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "DEFAULT"
                          ],
                          "description": "The network routing logic."
                        }
                      },
                      "required": [
                        "scheme"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "CUSTOM"
                          ],
                          "description": "The network routing logic."
                        },
                        "dstType": {
                          "type": "string",
                          "enum": [
                            "FIAT_ACCOUNT"
                          ],
                          "description": "The fiat account the funds are being sent to."
                        },
                        "dstId": {
                          "type": "string",
                          "description": "The ID of the fiat account the funds are being sent to."
                        }
                      },
                      "required": [
                        "scheme",
                        "dstType",
                        "dstId"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "NONE"
                          ],
                          "description": "No network routing logic."
                        }
                      },
                      "required": [
                        "scheme"
                      ]
                    }
                  ]
                },
                "sen_test": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "DEFAULT"
                          ],
                          "description": "The network routing logic."
                        }
                      },
                      "required": [
                        "scheme"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "NONE"
                          ],
                          "description": "No network routing logic."
                        }
                      },
                      "required": [
                        "scheme"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "CUSTOM"
                          ],
                          "description": "The network routing logic."
                        },
                        "dstType": {
                          "type": "string",
                          "enum": [
                            "FIAT_ACCOUNT"
                          ],
                          "description": "The fiat account the funds are being sent to."
                        },
                        "dstId": {
                          "type": "string",
                          "description": "The ID of the fiat account the funds are being sent to."
                        }
                      },
                      "required": [
                        "scheme",
                        "dstType",
                        "dstId"
                      ]
                    }
                  ]
                },
                "signet_test": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "NONE"
                          ],
                          "description": "No network routing logic."
                        }
                      },
                      "required": [
                        "scheme"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "CUSTOM"
                          ],
                          "description": "The network routing logic."
                        },
                        "dstType": {
                          "type": "string",
                          "enum": [
                            "FIAT_ACCOUNT"
                          ],
                          "description": "The fiat account the funds are being sent to."
                        },
                        "dstId": {
                          "type": "string",
                          "description": "The ID of the fiat account the funds are being sent to."
                        }
                      },
                      "required": [
                        "scheme",
                        "dstType",
                        "dstId"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "enum": [
                            "DEFAULT"
                          ],
                          "description": "The network routing logic."
                        }
                      },
                      "required": [
                        "scheme"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "required": [
            "id",
            "localNetworkId",
            "remoteNetworkId",
            "routingPolicy",
            "status"
          ]
        }
      },
      "description": "List network connections.\n\nReturns all network connections.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "post",
      "path": "/network_connections",
      "name": "network_connections_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "localNetworkId": {
                  "type": "string",
                  "description": "The network ID of the profile trying to create the connection."
                },
                "remoteNetworkId": {
                  "type": "string",
                  "description": "The network ID the profile is attempting to connect to."
                },
                "routingPolicy": {
                  "type": "object",
                  "properties": {
                    "crypto": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "CUSTOM"
                              ],
                              "description": "The network routing logic."
                            },
                            "dstType": {
                              "type": "string",
                              "enum": [
                                "VAULT",
                                "EXCHANGE"
                              ],
                              "description": "The type of destination account the funds are being sent to."
                            },
                            "dstId": {
                              "type": "string",
                              "description": "The ID of the destination account the funds are being sent to."
                            }
                          },
                          "required": [
                            "scheme",
                            "dstType",
                            "dstId"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "DEFAULT"
                              ],
                              "description": "The network routing logic."
                            }
                          },
                          "required": [
                            "scheme"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "NONE"
                              ],
                              "description": "No network routing logic."
                            }
                          },
                          "required": [
                            "scheme"
                          ]
                        }
                      ]
                    },
                    "sen": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "CUSTOM"
                              ],
                              "description": "The network routing logic."
                            },
                            "dstType": {
                              "type": "string",
                              "enum": [
                                "FIAT_ACCOUNT"
                              ],
                              "description": "The fiat account the funds are being sent to."
                            },
                            "dstId": {
                              "type": "string",
                              "description": "The ID of the fiat account the funds are being sent to."
                            }
                          },
                          "required": [
                            "scheme",
                            "dstType",
                            "dstId"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "DEFAULT"
                              ],
                              "description": "The network routing logic."
                            }
                          },
                          "required": [
                            "scheme"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "NONE"
                              ],
                              "description": "No network routing logic."
                            }
                          },
                          "required": [
                            "scheme"
                          ]
                        }
                      ]
                    },
                    "signet": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "DEFAULT"
                              ],
                              "description": "The network routing logic."
                            }
                          },
                          "required": [
                            "scheme"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "CUSTOM"
                              ],
                              "description": "The network routing logic."
                            },
                            "dstType": {
                              "type": "string",
                              "enum": [
                                "FIAT_ACCOUNT"
                              ],
                              "description": "The fiat account the funds are being sent to."
                            },
                            "dstId": {
                              "type": "string",
                              "description": "The ID of the fiat account the funds are being sent to."
                            }
                          },
                          "required": [
                            "scheme",
                            "dstType",
                            "dstId"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "NONE"
                              ],
                              "description": "No network routing logic."
                            }
                          },
                          "required": [
                            "scheme"
                          ]
                        }
                      ]
                    },
                    "sen_test": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "DEFAULT"
                              ],
                              "description": "The network routing logic."
                            }
                          },
                          "required": [
                            "scheme"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "NONE"
                              ],
                              "description": "No network routing logic."
                            }
                          },
                          "required": [
                            "scheme"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "CUSTOM"
                              ],
                              "description": "The network routing logic."
                            },
                            "dstType": {
                              "type": "string",
                              "enum": [
                                "FIAT_ACCOUNT"
                              ],
                              "description": "The fiat account the funds are being sent to."
                            },
                            "dstId": {
                              "type": "string",
                              "description": "The ID of the fiat account the funds are being sent to."
                            }
                          },
                          "required": [
                            "scheme",
                            "dstType",
                            "dstId"
                          ]
                        }
                      ]
                    },
                    "signet_test": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "NONE"
                              ],
                              "description": "No network routing logic."
                            }
                          },
                          "required": [
                            "scheme"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "CUSTOM"
                              ],
                              "description": "The network routing logic."
                            },
                            "dstType": {
                              "type": "string",
                              "enum": [
                                "FIAT_ACCOUNT"
                              ],
                              "description": "The fiat account the funds are being sent to."
                            },
                            "dstId": {
                              "type": "string",
                              "description": "The ID of the fiat account the funds are being sent to."
                            }
                          },
                          "required": [
                            "scheme",
                            "dstType",
                            "dstId"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scheme": {
                              "type": "string",
                              "enum": [
                                "DEFAULT"
                              ],
                              "description": "The network routing logic."
                            }
                          },
                          "required": [
                            "scheme"
                          ]
                        }
                      ]
                    }
                  }
                }
              },
              "required": [
                "localNetworkId",
                "remoteNetworkId"
              ]
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "localChannel": {
            "deprecated": true,
            "description": "Deprecated - Replaced by `localNetworkId`",
            "type": "object",
            "properties": {
              "networkId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "remoteChannel": {
            "deprecated": true,
            "description": "Deprecated - Replaced by `remoteNetworkId`",
            "type": "object",
            "properties": {
              "networkId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "CANCELLED",
              "REJECTED",
              "FAILED"
            ]
          },
          "localNetworkId": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "remoteNetworkId": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "routingPolicy": {
            "type": "object",
            "properties": {
              "crypto": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "VAULT",
                          "EXCHANGE"
                        ],
                        "description": "The type of destination account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the destination account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "DEFAULT"
                        ],
                        "description": "The network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "sen": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "DEFAULT"
                        ],
                        "description": "The network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "signet": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "DEFAULT"
                        ],
                        "description": "The network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "sen_test": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "DEFAULT"
                        ],
                        "description": "The network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  }
                ]
              },
              "signet_test": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "DEFAULT"
                        ],
                        "description": "The network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              }
            }
          }
        },
        "required": [
          "id",
          "localNetworkId",
          "remoteNetworkId",
          "routingPolicy",
          "status"
        ]
      },
      "description": "Creates a new network connection.\n\nInitiates a new network connection.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "patch",
      "path": "/network_connections/{connectionId}/set_routing_policy",
      "name": "network_connections_set_routing_policy_patchByConnectionid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "connectionId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the network connection"
            },
            "body": {}
          }
        }
      ],
      "output": {},
      "description": "Update network connection routing policy.\n\nUpdates an existing network connection's routing policy.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "get",
      "path": "/network_connections/{connectionId}/is_third_party_routing/{assetType}",
      "name": "network_connections_is_third_party_routing_getByConnectionidAndAssettype",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "connectionId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the network connection"
            },
            "assetType": {
              "type": "string",
              "enum": [
                "CRYPTO",
                "SIGNET",
                "SEN",
                "SIGNET_TEST",
                "SEN_TEST"
              ],
              "description": "The destination asset type"
            }
          }
        }
      ],
      "output": {},
      "description": "Retrieve third-party network routing validation by asset type.\n\nThe Fireblocks Network allows for flexibility around incoming deposits. A receiver can receive network deposits to locations other than Fireblocks. This endpoint validates whether future transactions are routed to the displayed recipient or to a 3rd party."
    },
    {
      "method": "get",
      "path": "/network_connections/{connectionId}",
      "name": "network_connections_getByConnectionid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "connectionId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the connection"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "localChannel": {
            "deprecated": true,
            "description": "Deprecated - Replaced by `localNetworkId`",
            "type": "object",
            "properties": {
              "networkId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "remoteChannel": {
            "deprecated": true,
            "description": "Deprecated - Replaced by `remoteNetworkId`",
            "type": "object",
            "properties": {
              "networkId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "CANCELLED",
              "REJECTED",
              "FAILED"
            ]
          },
          "localNetworkId": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "remoteNetworkId": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "routingPolicy": {
            "type": "object",
            "properties": {
              "crypto": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "VAULT",
                          "EXCHANGE"
                        ],
                        "description": "The type of destination account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the destination account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "DEFAULT"
                        ],
                        "description": "The network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "sen": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "DEFAULT"
                        ],
                        "description": "The network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "signet": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "DEFAULT"
                        ],
                        "description": "The network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "sen_test": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "DEFAULT"
                        ],
                        "description": "The network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  }
                ]
              },
              "signet_test": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "DEFAULT"
                        ],
                        "description": "The network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              }
            }
          }
        },
        "required": [
          "id",
          "localNetworkId",
          "remoteNetworkId",
          "routingPolicy",
          "status"
        ]
      },
      "description": "Get a network connection.\n\nGets a network connection by ID.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "delete",
      "path": "/network_connections/{connectionId}",
      "name": "network_connections_eraseByConnectionid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "connectionId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the network connection to delete"
            }
          }
        }
      ],
      "output": {},
      "description": "Deletes a network connection by ID.\n\nDeletes an existing network connection specified by its connection ID.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "get",
      "path": "/network_ids",
      "name": "network_ids_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "array",
        "items": {}
      },
      "description": "Returns all network IDs, both local IDs and discoverable remote IDs.\n\nRetrieves a list of all local and discoverable remote network IDs.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "post",
      "path": "/network_ids",
      "name": "network_ids_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "routingPolicy": {
            "type": "object",
            "properties": {
              "crypto": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "VAULT",
                          "EXCHANGE"
                        ],
                        "description": "The type of destination account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the destination account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "sen": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "signet": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "sen_test": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  }
                ]
              },
              "signet_test": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  }
                ]
              }
            }
          },
          "isDiscoverable": {
            "type": "boolean",
            "description": "The specific network is discoverable."
          }
        }
      },
      "description": "Creates a new Network ID.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "get",
      "path": "/network_ids/{networkId}",
      "name": "network_ids_getByNetworkid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "networkId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the network"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "routingPolicy": {
            "type": "object",
            "properties": {
              "crypto": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "VAULT",
                          "EXCHANGE"
                        ],
                        "description": "The type of destination account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the destination account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "sen": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "signet": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  }
                ]
              },
              "sen_test": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  }
                ]
              },
              "signet_test": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "NONE"
                        ],
                        "description": "No network routing logic."
                      }
                    },
                    "required": [
                      "scheme"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "CUSTOM"
                        ],
                        "description": "The network routing logic."
                      },
                      "dstType": {
                        "type": "string",
                        "enum": [
                          "FIAT_ACCOUNT"
                        ],
                        "description": "The fiat account the funds are being sent to."
                      },
                      "dstId": {
                        "type": "string",
                        "description": "The ID of the fiat account the funds are being sent to."
                      }
                    },
                    "required": [
                      "scheme",
                      "dstType",
                      "dstId"
                    ]
                  }
                ]
              }
            }
          },
          "isDiscoverable": {
            "type": "boolean",
            "description": "The specific network is discoverable."
          }
        }
      },
      "description": "Returns specific network ID.\n\nRetrieves a network by its ID.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "delete",
      "path": "/network_ids/{networkId}",
      "name": "network_ids_eraseByNetworkid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "networkId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the network"
            }
          }
        }
      ],
      "output": {},
      "description": "Deletes specific network ID.\n\nDeletes a network by its ID.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "patch",
      "path": "/network_ids/{networkId}/set_routing_policy",
      "name": "network_ids_set_routing_policy_patchByNetworkid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "networkId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the network"
            },
            "body": {}
          }
        }
      ],
      "output": {},
      "description": "Update network id routing policy.\n\nUpdates the routing policy of a specified network ID.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "patch",
      "path": "/network_ids/{networkId}/set_discoverability",
      "name": "network_ids_set_discoverability_patchByNetworkid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "networkId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the network"
            },
            "body": {}
          }
        }
      ],
      "output": {},
      "description": "Update network ID's discoverability.\n\nUpdate whether or not the network ID is discoverable by others.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "patch",
      "path": "/network_ids/{networkId}/set_name",
      "name": "network_ids_set_name_patchByNetworkid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "networkId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the network"
            },
            "body": {}
          }
        }
      ],
      "output": {},
      "description": "Update network ID's name.\n\nUpdates name of a specified network ID.\n\n**Note:** This API call is subject to Flexible Routing Schemes.\n\nYour routing policy defines how your transactions are routed.\nYou can choose 1 of the 3 different schemes mentioned below for each asset type:\n  - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.\n  - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.\n  - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"\n\nDefault Workspace Presets:\n  - Network Profile Crypto → **Custom**\n  - Network Profile FIAT → **None**\n  - Network Connection Crypto → **Default**\n  - Network Connection FIAT → **Default**\n\n    - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`).\n"
    },
    {
      "method": "get",
      "path": "/internal_wallets",
      "name": "internal_wallets_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "customerRefId": {
              "type": "string"
            },
            "assets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "balance": {
                    "type": "string"
                  },
                  "lockedAmount": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "WAITING_FOR_APPROVAL",
                      "APPROVED",
                      "CANCELLED",
                      "REJECTED",
                      "FAILED"
                    ]
                  },
                  "address": {
                    "type": "string"
                  },
                  "tag": {
                    "type": "string"
                  },
                  "activationTime": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": [
            "id",
            "name",
            "status"
          ]
        }
      },
      "description": "List internal wallets.\n\nGets a list of internal wallets.\n\n**Note**: BTC-based assets belonging to whitelisted addresses cannot be retrieved between 00:00 UTC and 00:01 UTC daily due to third-party provider, Blockchair, being unavailable for this 60 second period. Please wait until the next minute to retrieve BTC-based assets.\n"
    },
    {
      "method": "post",
      "path": "/internal_wallets",
      "name": "internal_wallets_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "customerRefId": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "balance": {
                  "type": "string"
                },
                "lockedAmount": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "WAITING_FOR_APPROVAL",
                    "APPROVED",
                    "CANCELLED",
                    "REJECTED",
                    "FAILED"
                  ]
                },
                "address": {
                  "type": "string"
                },
                "tag": {
                  "type": "string"
                },
                "activationTime": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "status"
        ]
      },
      "description": "Create an internal wallet.\n\nCreates a new internal wallet with the requested name."
    },
    {
      "method": "get",
      "path": "/internal_wallets/{walletId}",
      "name": "internal_wallets_getByWalletid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the wallet to return"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "customerRefId": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "balance": {
                  "type": "string"
                },
                "lockedAmount": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "WAITING_FOR_APPROVAL",
                    "APPROVED",
                    "CANCELLED",
                    "REJECTED",
                    "FAILED"
                  ]
                },
                "address": {
                  "type": "string"
                },
                "tag": {
                  "type": "string"
                },
                "activationTime": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "status"
        ]
      },
      "description": "Get assets for internal wallet.\n\nReturns all assets in an internal wallet by ID."
    },
    {
      "method": "delete",
      "path": "/internal_wallets/{walletId}",
      "name": "internal_wallets_eraseByWalletid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the wallet to delete"
            }
          }
        }
      ],
      "description": "Delete an internal wallet.\n\nDeletes an internal wallet by ID."
    },
    {
      "method": "post",
      "path": "/internal_wallets/{walletId}/set_customer_ref_id",
      "name": "internal_wallets_set_customer_ref_id_postByWalletid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "minimum": 1,
              "description": "The wallet ID"
            },
            "body": {}
          }
        }
      ],
      "description": "Set an AML/KYT customer reference ID for an internal wallet.\n\nSets an AML/KYT customer reference ID for the specific internal wallet."
    },
    {
      "method": "get",
      "path": "/internal_wallets/{walletId}/{assetId}",
      "name": "internal_wallets_getByWalletidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the wallet"
            },
            "assetId": {
              "type": "string",
              "minimum": 1,
              "x-fb-entity": "asset",
              "description": "The ID of the asset to return"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "lockedAmount": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "CANCELLED",
              "REJECTED",
              "FAILED"
            ]
          },
          "address": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "activationTime": {
            "type": "string"
          }
        }
      },
      "description": "Get an asset from an internal wallet.\n\nReturns information for an asset in an internal wallet."
    },
    {
      "method": "post",
      "path": "/internal_wallets/{walletId}/{assetId}",
      "name": "internal_wallets_postByWalletidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "description": "The ID of the wallet"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset to add"
            },
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "lockedAmount": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "CANCELLED",
              "REJECTED",
              "FAILED"
            ]
          },
          "address": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "activationTime": {
            "type": "string"
          }
        }
      },
      "description": "Add an asset to an internal wallet.\n\nAdds an asset to an existing internal wallet."
    },
    {
      "method": "delete",
      "path": "/internal_wallets/{walletId}/{assetId}",
      "name": "internal_wallets_eraseByWalletidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the wallet"
            },
            "assetId": {
              "type": "string",
              "minimum": 1,
              "x-fb-entity": "asset",
              "description": "The ID of the asset to delete"
            }
          }
        }
      ],
      "description": "Delete a whitelisted address from an internal wallet.\n\nDeletes a whitelisted address (for an asset) from an internal wallet."
    },
    {
      "method": "get",
      "path": "/external_wallets",
      "name": "external_wallets_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "customerRefId": {
              "type": "string"
            },
            "assets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "balance": {
                    "type": "string"
                  },
                  "lockedAmount": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "WAITING_FOR_APPROVAL",
                      "APPROVED",
                      "CANCELLED",
                      "REJECTED",
                      "FAILED"
                    ]
                  },
                  "address": {
                    "type": "string"
                  },
                  "tag": {
                    "type": "string"
                  },
                  "activationTime": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": [
            "id",
            "name",
            "status"
          ]
        }
      },
      "description": "List external wallets.\n\nGets a list of external wallets under the workspace."
    },
    {
      "method": "post",
      "path": "/external_wallets",
      "name": "external_wallets_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "customerRefId": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "balance": {
                  "type": "string"
                },
                "lockedAmount": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "WAITING_FOR_APPROVAL",
                    "APPROVED",
                    "CANCELLED",
                    "REJECTED",
                    "FAILED"
                  ]
                },
                "address": {
                  "type": "string"
                },
                "tag": {
                  "type": "string"
                },
                "activationTime": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "status"
        ]
      },
      "description": "Create an external wallet.\n\nCreates a new external wallet with the requested name."
    },
    {
      "method": "get",
      "path": "/external_wallets/{walletId}",
      "name": "external_wallets_getByWalletid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the wallet to return"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "customerRefId": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "balance": {
                  "type": "string"
                },
                "lockedAmount": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "WAITING_FOR_APPROVAL",
                    "APPROVED",
                    "CANCELLED",
                    "REJECTED",
                    "FAILED"
                  ]
                },
                "address": {
                  "type": "string"
                },
                "tag": {
                  "type": "string"
                },
                "activationTime": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "status"
        ]
      },
      "description": "Find an external wallet.\n\nReturns an external wallet by ID."
    },
    {
      "method": "delete",
      "path": "/external_wallets/{walletId}",
      "name": "external_wallets_eraseByWalletid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the wallet to delete"
            }
          }
        }
      ],
      "description": "Delete an external wallet.\n\nDeletes an external wallet by ID."
    },
    {
      "method": "post",
      "path": "/external_wallets/{walletId}/set_customer_ref_id",
      "name": "external_wallets_set_customer_ref_id_postByWalletid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "minimum": 1,
              "description": "The wallet ID"
            },
            "body": {}
          }
        }
      ],
      "description": "Set an AML customer reference ID for an external wallet.\n\nSets an AML/KYT customer reference ID for the specific external wallet."
    },
    {
      "method": "get",
      "path": "/external_wallets/{walletId}/{assetId}",
      "name": "external_wallets_getByWalletidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the wallet"
            },
            "assetId": {
              "type": "string",
              "minimum": 1,
              "x-fb-entity": "asset",
              "description": "The ID of the asset to return"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "CANCELLED",
              "REJECTED",
              "FAILED"
            ]
          },
          "address": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "activationTime": {
            "type": "string"
          },
          "additionalInfo": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "accountHolderGivenName": {
                  "type": "string"
                },
                "accountHolderSurname": {
                  "type": "string"
                },
                "accountHolderCity": {
                  "type": "string"
                },
                "accountHolderCountry": {
                  "type": "string"
                },
                "accountHolderAddress1": {
                  "type": "string"
                },
                "accountHolderAddress2": {
                  "type": "string"
                },
                "accountHolderDistrict": {
                  "type": "string"
                },
                "accountHolderPostalCode": {
                  "type": "string"
                },
                "abaRoutingNumber": {
                  "type": "string"
                },
                "abaAccountNumber": {
                  "type": "string"
                },
                "abaCountry": {
                  "type": "string"
                },
                "iban": {
                  "type": "string"
                },
                "ibanCity": {
                  "type": "string"
                },
                "ibanCountry": {
                  "type": "string"
                },
                "speiClabe": {
                  "type": "string"
                },
                "speiName": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "description": "Get an asset from an external wallet.\n\nReturns an external wallet by wallet ID and asset ID."
    },
    {
      "method": "post",
      "path": "/external_wallets/{walletId}/{assetId}",
      "name": "external_wallets_postByWalletidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "description": "The ID of the wallet"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset to add"
            },
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "CANCELLED",
              "REJECTED",
              "FAILED"
            ]
          },
          "address": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "activationTime": {
            "type": "string"
          },
          "additionalInfo": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "accountHolderGivenName": {
                  "type": "string"
                },
                "accountHolderSurname": {
                  "type": "string"
                },
                "accountHolderCity": {
                  "type": "string"
                },
                "accountHolderCountry": {
                  "type": "string"
                },
                "accountHolderAddress1": {
                  "type": "string"
                },
                "accountHolderAddress2": {
                  "type": "string"
                },
                "accountHolderDistrict": {
                  "type": "string"
                },
                "accountHolderPostalCode": {
                  "type": "string"
                },
                "abaRoutingNumber": {
                  "type": "string"
                },
                "abaAccountNumber": {
                  "type": "string"
                },
                "abaCountry": {
                  "type": "string"
                },
                "iban": {
                  "type": "string"
                },
                "ibanCity": {
                  "type": "string"
                },
                "ibanCountry": {
                  "type": "string"
                },
                "speiClabe": {
                  "type": "string"
                },
                "speiName": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "description": "Add an asset to an external wallet.\n\nAdds an asset to an existing external wallet."
    },
    {
      "method": "delete",
      "path": "/external_wallets/{walletId}/{assetId}",
      "name": "external_wallets_eraseByWalletidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "walletId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the wallet"
            },
            "assetId": {
              "type": "string",
              "minimum": 1,
              "x-fb-entity": "asset",
              "description": "The ID of the asset to delete"
            }
          }
        }
      ],
      "description": "Delete an asset from an external wallet.\n\nDeletes an external wallet asset by ID."
    },
    {
      "method": "get",
      "path": "/contracts",
      "name": "contracts_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "customerRefId": {
              "type": "string"
            },
            "assets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "balance": {
                    "type": "string"
                  },
                  "lockedAmount": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "WAITING_FOR_APPROVAL",
                      "APPROVED",
                      "CANCELLED",
                      "REJECTED",
                      "FAILED"
                    ]
                  },
                  "address": {
                    "type": "string"
                  },
                  "tag": {
                    "type": "string"
                  },
                  "activationTime": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": [
            "id",
            "name",
            "status"
          ]
        }
      },
      "description": "List contracts.\n\nGets a list of contracts."
    },
    {
      "method": "post",
      "path": "/contracts",
      "name": "contracts_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "customerRefId": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "balance": {
                  "type": "string"
                },
                "lockedAmount": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "WAITING_FOR_APPROVAL",
                    "APPROVED",
                    "CANCELLED",
                    "REJECTED",
                    "FAILED"
                  ]
                },
                "address": {
                  "type": "string"
                },
                "tag": {
                  "type": "string"
                },
                "activationTime": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "status"
        ]
      },
      "description": "Create a contract.\n\nCreates a new contract."
    },
    {
      "method": "get",
      "path": "/contracts/{contractId}",
      "name": "contracts_getByContractid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "contractId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the contract to return"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "customerRefId": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "balance": {
                  "type": "string"
                },
                "lockedAmount": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "WAITING_FOR_APPROVAL",
                    "APPROVED",
                    "CANCELLED",
                    "REJECTED",
                    "FAILED"
                  ]
                },
                "address": {
                  "type": "string"
                },
                "tag": {
                  "type": "string"
                },
                "activationTime": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "status"
        ]
      },
      "description": "Find a specific contract.\n\nReturns a contract by ID."
    },
    {
      "method": "delete",
      "path": "/contracts/{contractId}",
      "name": "contracts_eraseByContractid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "contractId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the contract to delete"
            }
          }
        }
      ],
      "description": "Delete a contract.\n\nDeletes a contract by ID."
    },
    {
      "method": "get",
      "path": "/contracts/{contractId}/{assetId}",
      "name": "contracts_getByContractidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "contractId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the contract"
            },
            "assetId": {
              "type": "string",
              "minimum": 1,
              "x-fb-entity": "asset",
              "description": "The ID of the asset to return"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "CANCELLED",
              "REJECTED",
              "FAILED"
            ]
          },
          "address": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "activationTime": {
            "type": "string"
          },
          "additionalInfo": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "accountHolderGivenName": {
                  "type": "string"
                },
                "accountHolderSurname": {
                  "type": "string"
                },
                "accountHolderCity": {
                  "type": "string"
                },
                "accountHolderCountry": {
                  "type": "string"
                },
                "accountHolderAddress1": {
                  "type": "string"
                },
                "accountHolderAddress2": {
                  "type": "string"
                },
                "accountHolderDistrict": {
                  "type": "string"
                },
                "accountHolderPostalCode": {
                  "type": "string"
                },
                "abaRoutingNumber": {
                  "type": "string"
                },
                "abaAccountNumber": {
                  "type": "string"
                },
                "abaCountry": {
                  "type": "string"
                },
                "iban": {
                  "type": "string"
                },
                "ibanCity": {
                  "type": "string"
                },
                "ibanCountry": {
                  "type": "string"
                },
                "speiClabe": {
                  "type": "string"
                },
                "speiName": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "description": "Find a contract asset.\n\nReturns a contract asset by ID."
    },
    {
      "method": "post",
      "path": "/contracts/{contractId}/{assetId}",
      "name": "contracts_postByContractidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "contractId": {
              "type": "string",
              "description": "The ID of the contract"
            },
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset to add"
            },
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "CANCELLED",
              "REJECTED",
              "FAILED"
            ]
          },
          "address": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "activationTime": {
            "type": "string"
          },
          "additionalInfo": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "accountHolderGivenName": {
                  "type": "string"
                },
                "accountHolderSurname": {
                  "type": "string"
                },
                "accountHolderCity": {
                  "type": "string"
                },
                "accountHolderCountry": {
                  "type": "string"
                },
                "accountHolderAddress1": {
                  "type": "string"
                },
                "accountHolderAddress2": {
                  "type": "string"
                },
                "accountHolderDistrict": {
                  "type": "string"
                },
                "accountHolderPostalCode": {
                  "type": "string"
                },
                "abaRoutingNumber": {
                  "type": "string"
                },
                "abaAccountNumber": {
                  "type": "string"
                },
                "abaCountry": {
                  "type": "string"
                },
                "iban": {
                  "type": "string"
                },
                "ibanCity": {
                  "type": "string"
                },
                "ibanCountry": {
                  "type": "string"
                },
                "speiClabe": {
                  "type": "string"
                },
                "speiName": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "description": "Add an asset to a contract.\n\nAdds an asset to an existing contract."
    },
    {
      "method": "delete",
      "path": "/contracts/{contractId}/{assetId}",
      "name": "contracts_eraseByContractidAndAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "contractId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the contract"
            },
            "assetId": {
              "type": "string",
              "minimum": 1,
              "x-fb-entity": "asset",
              "description": "The ID of the asset to delete"
            }
          }
        }
      ],
      "description": "Delete a contract asset.\n\nDeletes a contract asset by ID."
    },
    {
      "method": "get",
      "path": "/supported_assets",
      "name": "supported_assets_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "ALGO_ASSET",
                "BASE_ASSET",
                "BEP20",
                "COMPOUND",
                "ERC20",
                "FIAT",
                "SOL_ASSET",
                "TRON_TRC20",
                "XLM_ASSET",
                "XDB_ASSET"
              ]
            },
            "contractAddress": {
              "type": "string"
            },
            "nativeAsset": {
              "type": "string"
            },
            "decimals": {
              "type": "number"
            }
          },
          "required": [
            "id",
            "name",
            "type"
          ]
        }
      },
      "description": "List all asset types supported by Fireblocks.\n\nReturns all asset types supported by Fireblocks."
    },
    {
      "method": "get",
      "path": "/estimate_network_fee",
      "name": "estimate_network_fee_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "assetId": {
                  "type": "string",
                  "x-fb-entity": "asset",
                  "description": "The asset for which to estimate the fee"
                }
              },
              "required": [
                "assetId"
              ]
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "low": {
            "type": "object",
            "properties": {
              "feePerByte": {
                "type": "string"
              },
              "gasPrice": {
                "type": "string"
              },
              "networkFee": {
                "type": "string"
              },
              "baseFee": {
                "description": "(optional) Base Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              },
              "priorityFee": {
                "description": "(optional) Priority Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              }
            }
          },
          "medium": {
            "type": "object",
            "properties": {
              "feePerByte": {
                "type": "string"
              },
              "gasPrice": {
                "type": "string"
              },
              "networkFee": {
                "type": "string"
              },
              "baseFee": {
                "description": "(optional) Base Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              },
              "priorityFee": {
                "description": "(optional) Priority Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              }
            }
          },
          "high": {
            "type": "object",
            "properties": {
              "feePerByte": {
                "type": "string"
              },
              "gasPrice": {
                "type": "string"
              },
              "networkFee": {
                "type": "string"
              },
              "baseFee": {
                "description": "(optional) Base Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              },
              "priorityFee": {
                "description": "(optional) Priority Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "low",
          "medium",
          "high"
        ]
      },
      "description": "Estimate the required fee for an asset.\n\nGets the estimated required fee for an asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee."
    },
    {
      "method": "get",
      "path": "/transactions/validate_address/{assetId}/{address}",
      "name": "transactions_validate_address_getByAssetidAndAddress",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The asset of the address"
            },
            "address": {
              "type": "string",
              "description": "The address to validate"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "requiresTag": {
            "type": "boolean"
          }
        }
      },
      "description": "Validate destination address.\n\nChecks if an address is valid (for XRP, DOT, XLM, and EOS)."
    },
    {
      "method": "get",
      "path": "/transactions",
      "name": "transactions_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "before": {
                  "type": "string",
                  "description": "Unix timestamp in milliseconds. Returns only transactions created before the specified date"
                },
                "after": {
                  "type": "string",
                  "description": "Unix timestamp in milliseconds. Returns only transactions created after the specified date"
                },
                "status": {
                  "type": "string",
                  "description": "You can filter by one of the statuses."
                },
                "limit": {
                  "type": "integer",
                  "minimum": 1,
                  "default": 200,
                  "description": "Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500"
                },
                "sourceId": {
                  "type": "string",
                  "description": "The source ID of the transaction"
                },
                "destId": {
                  "type": "string",
                  "description": "The destination ID of the transaction"
                },
                "assets": {
                  "type": "string",
                  "description": "A list of assets to filter by, seperated by commas"
                },
                "txHash": {
                  "type": "string",
                  "description": "Returns only results with a specified txHash"
                },
                "sourceWalletId": {
                  "type": "string",
                  "description": "Returns only results where the source is a specific end user wallet"
                },
                "destWalletId": {
                  "type": "string",
                  "description": "Returns only results where the destination is a specific end user wallet"
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "ID of the transaction."
            },
            "externalTxId": {
              "type": "string",
              "description": "Unique transaction ID provided by the user. Fireblocks highly recommends setting an `externalTxId` for every transaction created, to avoid submitting the same transaction twice."
            },
            "status": {
              "type": "string",
              "description": "The primary status of the transaction. For details, see [Primary transaction statuses](https://developers.fireblocks.com/reference/primary-transaction-statuses)."
            },
            "subStatus": {
              "type": "string",
              "description": "See [Transaction substatuses](https://developers.fireblocks.com/reference/transaction-substatuses) for the list of transaction sub statuses."
            },
            "txHash": {
              "type": "string",
              "description": "The hash of the transaction on the blockchain.\n * This parameter exists if at least one of the following conditions is met:\n\n     1. The transaction’s source type is `UNKNOWN`, `WHITELISTED_ADDRESS`, `NETWORK_CONNECTION`, `ONE_TIME_ADDRESS`, `FIAT_ACCOUNT` or `GAS_STATION`.\n\n     2. The transaction’s source type is `VAULT` and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these statuses prior to changing to `FAILED` or `REJECTED`. In some instances, transactions in status `BROADCASTING` will include the txHash as well.\n\n     3. The transaction’s source type is `EXCHANGE_ACCOUNT` and the transaction’s destination type is `VAULT`, and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these status prior to changing to `FAILED`.\n  \n\n* In addition, the following conditions must be met:\n\n    1. The asset is a crypto asset (not fiat).\n\n    2. The transaction operation is not RAW or `TYPED_MESSAGE`."
            },
            "operation": {
              "type": "string",
              "enum": [
                "TRANSFER",
                "BURN",
                "CONTRACT_CALL",
                "MINT",
                "RAW",
                "TYPED_MESSAGE",
                "ENABLE_ASSET",
                "STAKE",
                "UNSTAKE",
                "WITHDRAW",
                "REDEEM_FROM_COMPOUND",
                "SUPPLY_TO_COMPOUND"
              ],
              "description": "* `TRANSFER` - Transfers funds from one account to another. UTXO blockchains allow multi-input and multi-output transfers. All other blockchains allow transfers with one source address and one destination address.\n* `MINT` - Mints new tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `BURN` - Burns tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `CONTRACT_CALL` - Calls a smart contract method for web3 operations on any EVM blockchain. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n* `TYPED_MESSAGE` - An off-chain message in either Ethereum Personal Message or EIP712 format. Use it to sign specific readable messages that are not actual transactions. [Learn more about typed messages](https://developers.fireblocks.com/docs/typed-message-signing).\n* `RAW` - An off-chain message with no predefined format. Use it to sign any message with your private key, including protocols such as blockchains and custom transaction types that are not natively supported by Fireblocks. [Learn more about raw signing transactions.](https://developers.fireblocks.com/docs/raw-message-signing)\n* `ENABLE_ASSET` - Algorand, DigitalBits, Solana, and Stellar require an on-chain transaction to create an asset wallet and enable the deposit address. This transaction is automatically created when adding assets on these blockchains at a vault account.\n* `STAKE` - Assign assets to a staking pool managed by a staking validator. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations.\n* `UNSTAKE` - Remove assets from a staking pool managed by a staking validator. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations.\n* `WITHDRAW` - Transfer assets from a dedicated staking vault account to another address. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations.\n\n    **Note:** Fireblocks will rename this type from `WITHDRAW` to a different type name soon. There will be a 7-day notice regarding the new type name.\n\n* `SUPPLY_TO_COMPOUND` - Deprecated since April 1st, 2023. Older transactions may have this as their operation, in case users in the workspace have used the direct integration between Fireblocks and the Compound DeFI protocol.\n* `REDEEM_FROM_COMPOUND` - Deprecated since April 1st, 2023. Older transactions may have this as their operation, in case users in the workspace have used the direct integration between Fireblocks and the Compound DeFI protocol.\n"
            },
            "note": {
              "type": "string",
              "description": "Custom note, not sent to the blockchain, that describes the transaction at your Fireblocks workspace."
            },
            "assetId": {
              "type": "string",
              "description": "The ID of the asset to transfer, for `TRANSFER`, `MINT`, `BURN`, `ENABLE_ASSET`,`STAKE` ,`UNSTAKE` or `WITHDRAW` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)",
              "x-fb-entity": "asset"
            },
            "source": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "subType": {
                  "type": "string",
                  "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name. In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
                },
                "id": {
                  "type": "string",
                  "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the peer."
                },
                "walletId": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "sourceAddress": {
              "type": "string",
              "description": "For account based assets only, the source address of the transaction.\n**Note:** If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the source address. In any other case, this parameter will be empty."
            },
            "tag": {
              "type": "string",
              "description": "Source address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group)."
            },
            "destination": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "subType": {
                  "type": "string",
                  "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name.In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
                },
                "id": {
                  "type": "string",
                  "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the peer."
                },
                "walletId": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "destinations": {
              "type": "array",
              "description": "The transaction’s destinations.\n**Note:** In case the transaction is sent to a single destination, the `destination` parameter is used instead of this.",
              "items": {
                "type": "object",
                "properties": {
                  "destination": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "subType": {
                        "type": "string",
                        "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name.In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the peer."
                      },
                      "walletId": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "destinationAddress": {
                    "description": "Address where the asset was transferred."
                  },
                  "destinationAddressDescription": {
                    "description": "Description of the address."
                  },
                  "amount": {
                    "type": "string",
                    "description": "The amount to be sent to this destination."
                  },
                  "amountUSD": {
                    "type": "string",
                    "description": "The USD value of the requested amount."
                  },
                  "amlScreeningResult": {
                    "type": "object",
                    "description": "The result of the AML screening.",
                    "properties": {
                      "provider": {
                        "type": "string"
                      },
                      "payload": {
                        "type": "object"
                      }
                    }
                  },
                  "customerRefId": {
                    "description": "The ID for AML providers to associate the owner of funds with transactions."
                  },
                  "authorizationInfo": {
                    "type": "object",
                    "description": "The information about your [Transaction Authorization Policy (TAP).](https://developers.fireblocks.com/docs/capabilities#transaction-authorization-policy-tap)",
                    "properties": {
                      "allowOperatorAsAuthorizer": {
                        "type": "boolean"
                      },
                      "logic": {
                        "type": "string",
                        "enum": [
                          "AND",
                          "OR"
                        ]
                      },
                      "groups": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "th": {
                              "type": "number"
                            },
                            "users": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string",
                                "enum": [
                                  "PENDING_AUTHORIZATION",
                                  "APPROVED",
                                  "REJECTED",
                                  "NA"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "destinationAddress": {
              "type": "string",
              "description": "Address where the asset were transferred.\nNotes:\n  - For [Multi destination transactions](https://support.fireblocks.io/hc/en-us/articles/360018447980-Multi-destination-transactions), this parameter will be empty. In this case, you should refer to the destinations field.\n  - If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the destination address. In any other case, this parameter will be empty."
            },
            "destinationAddressDescription": {
              "type": "string",
              "description": "Description of the address."
            },
            "destinationTag": {
              "type": "string",
              "description": "Destination address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group)."
            },
            "contractCallDecodedData": {
              "description": "Decoded data for `CONTRACT_CALL` operations. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for setting this parameter's value.",
              "type": "object",
              "properties": {
                "contractName": {
                  "type": "string"
                },
                "functionCalls": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            },
            "amountInfo": {
              "type": "object",
              "description": "The details of the requested amount to transfer.",
              "properties": {
                "amount": {
                  "description": "If the transfer is a withdrawal from an exchange, the actual amount that was requested to be transferred. Otherwise, the requested amount.",
                  "type": "string"
                },
                "requestedAmount": {
                  "description": "The amount requested by the user.",
                  "type": "string"
                },
                "netAmount": {
                  "description": "The net amount of the transaction, after fee deduction.",
                  "type": "string"
                },
                "amountUSD": {
                  "description": "The USD value of the requested amount.",
                  "type": "string"
                }
              }
            },
            "treatAsGrossAmount": {
              "type": "boolean",
              "description": "For transactions initiated via this Fireblocks workspace, when set to `true`, the fee is deducted from the requested amount.\n\n**Note**: This parameter can only be considered if a transaction's asset is a base asset, such as ETH or MATIC. If the asset can't be used for transaction fees, like USDC, this parameter is ignored and the fee is deducted from the relevant base asset wallet in the source account."
            },
            "feeInfo": {
              "type": "object",
              "description": "Details of the transaction's fee.",
              "properties": {
                "networkFee": {
                  "description": "The fee paid to the network",
                  "type": "string"
                },
                "serviceFee": {
                  "description": "The total fee deducted by the exchange from the actual requested amount (serviceFee = amount - netAmount)",
                  "type": "string"
                },
                "gasPrice": {
                  "type": "string"
                }
              }
            },
            "feeCurrency": {
              "type": "string",
              "description": "The asset which was withdrawn to pay the transaction fee, for example ETH for EVM-based blockchains, BTC for Tether Omni."
            },
            "networkRecords": {
              "type": "array",
              "description": "In case a single transaction resulted with multiple transfers, for example a result of a contract call, then this parameter specifies each transfer that took place on the blockchain. In case of a single transfer transaction, this parameter is empty.",
              "items": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "subType": {
                        "type": "string",
                        "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name. In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the peer."
                      },
                      "walletId": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "destination": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "subType": {
                        "type": "string",
                        "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name.In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the peer."
                      },
                      "walletId": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  },
                  "txHash": {
                    "type": "string"
                  },
                  "networkFee": {
                    "type": "string"
                  },
                  "assetId": {
                    "type": "string",
                    "x-fb-entity": "asset"
                  },
                  "netAmount": {
                    "description": "The net amount of the transaction, after fee deduction",
                    "type": "string"
                  },
                  "isDropped": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "string"
                  },
                  "destinationAddress": {
                    "type": "string"
                  },
                  "sourceAddress": {
                    "type": "string"
                  },
                  "amountUSD": {
                    "type": "string"
                  },
                  "index": {
                    "type": "number"
                  },
                  "rewardInfo": {
                    "type": "object",
                    "description": "This field is relevant only for Algorand transactions. Both `srcRewards` and `destRewards` will appear only for Vault to Vault transactions, otherwise you will receive only the Fireblocks’ side of the transaction.",
                    "properties": {
                      "srcRewards": {
                        "type": "string"
                      },
                      "destRewards": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "createdAt": {
              "type": "number",
              "description": "The transaction’s creation date and time, in unix timestamp."
            },
            "lastUpdated": {
              "type": "number",
              "description": "The transaction’s last update date and time, in unix timestamp."
            },
            "createdBy": {
              "type": "string",
              "description": "User ID of the initiator of the transaction."
            },
            "signedBy": {
              "type": "array",
              "description": "User ID’s of the signers of the transaction.",
              "items": {
                "type": "string"
              }
            },
            "rejectedBy": {
              "type": "string",
              "description": "User ID of the user that rejected the transaction (in case it was rejected)."
            },
            "authorizationInfo": {
              "type": "object",
              "description": "The information about your [Transaction Authorization Policy (TAP).](https://developers.fireblocks.com/docs/capabilities#transaction-authorization-policy-tap)",
              "properties": {
                "allowOperatorAsAuthorizer": {
                  "type": "boolean"
                },
                "logic": {
                  "type": "string",
                  "enum": [
                    "AND",
                    "OR"
                  ]
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "th": {
                        "type": "number"
                      },
                      "users": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string",
                          "enum": [
                            "PENDING_AUTHORIZATION",
                            "APPROVED",
                            "REJECTED",
                            "NA"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            },
            "exchangeTxId": {
              "type": "string",
              "description": "If the transaction originated from an exchange, this is the ID of this transaction at the exchange."
            },
            "customerRefId": {
              "type": "string",
              "description": "The ID for AML providers to associate the owner of funds with transactions."
            },
            "amlScreeningResult": {
              "type": "object",
              "description": "The result of the AML screening.",
              "properties": {
                "provider": {
                  "type": "string"
                },
                "payload": {
                  "type": "object"
                }
              }
            },
            "extraParameters": {
              "type": "object",
              "properties": {},
              "description": "Additional protocol / operation specific key-value parameters:\n\nFor UTXO-based blockchain input selection, add the key `inputsSelection` with the value set the [input selection structure.](https://developers.fireblocks.com/reference/transaction-objects#inputsselection) The inputs can be retrieved from the [Retrieve Unspent Inputs endpoint.](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid-assetid-unspent-inputs)\n\nFor `RAW` operations, add the key `rawMessageData` with the value set to the [raw message data structure.](https://developers.fireblocks.com/reference/raw-signing-objects#rawmessagedata)\n\nFor `CONTRACT_CALL` operations, add the key `contractCallData` with the value set to the Ethereum smart contract Application Binary Interface (ABI) payload. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n"
            },
            "signedMessages": {
              "type": "object",
              "description": "A list of signed messages returned for raw signing.",
              "properties": {
                "content": {
                  "type": "string"
                },
                "algorithm": {
                  "type": "string",
                  "enum": [
                    "MPC_ECDSA_SECP256K1",
                    "MPC_EDDSA_ED25519"
                  ]
                },
                "derivationPath": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "signature": {
                  "type": "object",
                  "properties": {
                    "fullSig": {
                      "type": "string"
                    },
                    "r": {
                      "type": "string"
                    },
                    "s": {
                      "type": "string"
                    },
                    "v": {
                      "type": "number"
                    }
                  }
                },
                "publicKey": {
                  "type": "string"
                }
              }
            },
            "numOfConfirmations": {
              "type": "number",
              "description": "The number of confirmations of the transaction. The number will increase until the transaction will be considered completed according to the confirmation policy."
            },
            "blockInfo": {
              "type": "object",
              "description": "The block hash and height of the block that this transaction was mined in.\n     **Note**: If an outgoing transaction uses the destinations object with more than one value in the array, blockHash is set to null.",
              "properties": {
                "blockHeight": {
                  "type": "string"
                },
                "blockHash": {
                  "type": "string"
                }
              }
            },
            "index": {
              "type": "number",
              "description": "For UTXO based assets this is the vOut, for Ethereum based, this is the index of the event of the contract call.\n **Note:** This field is not returned if a transaction uses the `destinations` object with more than one value."
            },
            "rewardInfo": {
              "type": "object",
              "description": "This field is relevant only for Algorand transactions. Both `srcRewards` and `destRewards` will appear only for Vault to Vault transactions, otherwise you will receive only the Fireblocks’ side of the transaction.",
              "properties": {
                "srcRewards": {
                  "type": "string"
                },
                "destRewards": {
                  "type": "string"
                }
              }
            },
            "systemMessages": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "WARN",
                    "BLOCK"
                  ]
                },
                "message": {
                  "type": "string",
                  "description": "A response from Fireblocks that communicates a message about the health of the process being performed. If this object is returned with data, you should expect potential delays or incomplete transaction statuses.",
                  "example": "Slow transaction processing. Outgoing transactions might be stuck."
                }
              }
            },
            "addressType": {
              "type": "string",
              "enum": [
                "WHITELISTED",
                "ONE_TIME"
              ]
            },
            "requestedAmount": {
              "description": "The amount requested by the user. Deprecated - please use the `amountInfo` field for accuracy.",
              "type": "number",
              "deprecated": true
            },
            "amount": {
              "description": "If the transfer is a withdrawal from an exchange, the actual amount that was requested to be transferred. Otherwise, the requested amount. Deprecated - please use the `amountInfo` field for accuracy.",
              "type": "number",
              "deprecated": true
            },
            "netAmount": {
              "description": "The net amount of the transaction, after fee deduction. Deprecated - please use the `amountInfo` field for accuracy.",
              "type": "number",
              "deprecated": true
            },
            "amountUSD": {
              "description": "The USD value of the requested amount. Deprecated - please use the `amountInfo` field for accuracy.",
              "type": "number",
              "nullable": true,
              "deprecated": true
            },
            "serviceFee": {
              "description": "The total fee deducted by the exchange from the actual requested amount (`serviceFee` = `amount` - `netAmount`). Deprecated - please use the `feeInfo` field for accuracy.",
              "type": "number",
              "deprecated": true
            },
            "fee": {
              "description": "Deprecated - please use the `feeInfo` field for accuracy.",
              "type": "number",
              "deprecated": true
            },
            "networkFee": {
              "description": "The fee paid to the network. Deprecated - please use the `feeInfo` field for accuracy.",
              "type": "number",
              "deprecated": true
            }
          }
        }
      },
      "description": "List transaction history.\n\nLists the transaction history for your workspace."
    },
    {
      "method": "post",
      "path": "/transactions",
      "name": "transactions_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "operation": {
                  "type": "string",
                  "enum": [
                    "TRANSFER",
                    "BURN",
                    "CONTRACT_CALL",
                    "MINT",
                    "RAW",
                    "TYPED_MESSAGE"
                  ],
                  "description": "* `TRANSFER` - The default value for an operation. Transfers funds from one account to another. UTXO blockchains allow multi-input and multi-output transfers. All other blockchains allow transfers with one source address and one destination address.\n* `MINT` - Mints new tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `BURN` - Burns tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `CONTRACT_CALL` - Calls a smart contract method for web3 operations on any EVM blockchain. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n* `TYPED_MESSAGE` - An off-chain message in either Ethereum Personal Message or EIP712 format. Use it to sign specific readable messages that are not actual transactions. [Learn more about typed messages](https://developers.fireblocks.com/docs/typed-message-signing).\n* `RAW` - An off-chain message with no predefined format. Use it to sign any message with your private key, including protocols such as blockchains and custom transaction types that are not natively supported by Fireblocks. [Learn more about raw signing transactions.](https://developers.fireblocks.com/docs/raw-message-signing)\n"
                },
                "note": {
                  "type": "string",
                  "description": "Custom note, not sent to the blockchain, to describe the transaction at your Fireblocks workspace.",
                  "example": "Ticket 123"
                },
                "externalTxId": {
                  "type": "string",
                  "description": "An optional but highly recommended parameter. Fireblocks will reject future transactions with same ID. \n \nYou should set this to a unique ID representing the transaction, to avoid submitting the same transaction twice. This helps with cases where submitting the transaction responds with an error code due to Internet interruptions, but the transaction was actually sent and processed. To validate whether a transaction has been processed, [Find a specific transaction by external transaction ID](https://developers.fireblocks.com/reference/get_transactions-external-tx-id-externaltxid).\n \nThere is no specific format required for this parameter.",
                  "example": "00000000-0000-0000-0000-000000000000"
                },
                "assetId": {
                  "type": "string",
                  "description": "The ID of the asset to transfer, for `TRANSFER`, `MINT` or `BURN` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)",
                  "x-fb-entity": "asset",
                  "example": "ETH"
                },
                "source": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "VAULT_ACCOUNT",
                        "EXCHANGE_ACCOUNT",
                        "INTERNAL_WALLET",
                        "EXTERNAL_WALLET",
                        "NETWORK_CONNECTION",
                        "FIAT_ACCOUNT",
                        "COMPOUND",
                        "GAS_STATION",
                        "ONE_TIME_ADDRESS",
                        "UNKNOWN",
                        "END_USER_WALLET"
                      ]
                    },
                    "subType": {
                      "type": "string",
                      "enum": [
                        "BINANCE",
                        "BINANCEUS",
                        "BITFINEX",
                        "BITHUMB",
                        "BITMEX",
                        "BITSO",
                        "BITSTAMP",
                        "BITTREX",
                        "BLINC",
                        "BYBIT",
                        "CIRCLE",
                        "COINBASEEXCHANGE",
                        "COINBASEPRO",
                        "COINMETRO",
                        "COINSPRO",
                        "CRYPTOCOM",
                        "DERIBIT",
                        "GEMINI",
                        "HITBTC",
                        "HUOBI",
                        "INDEPENDENTRESERVE",
                        "KORBIT",
                        "KRAKEN",
                        "KRAKENINTL",
                        "KUCOIN",
                        "LIQUID",
                        "OKCOIN",
                        "OKEX",
                        "PAXOS",
                        "POLONIEX",
                        "External",
                        "Internal"
                      ]
                    },
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "walletId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "destination": {},
                "destinations": {
                  "type": "array",
                  "description": "For UTXO based blockchains, you can send a single transaction to multiple destinations.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "string"
                      },
                      "destination": {}
                    }
                  }
                },
                "amount": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)",
                      "example": "0.02"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)",
                      "example": 0.02
                    }
                  ],
                  "description": "For `TRANSFER` operations, the requested amount to transfer, in the asset’s unit. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                },
                "treatAsGrossAmount": {
                  "type": "boolean",
                  "description": "\"When set to `true`, the fee will be deducted from the requested amount.\"\n\n**Note**: This parameter can only be considered if a transaction’s asset is a base asset, such as ETH or MATIC. If the asset can’t be used for transaction fees, like USDC, this parameter is ignored and the fee is deducted from the relevant base asset wallet in the source account."
                },
                "forceSweep": {
                  "type": "boolean",
                  "description": "For Polkadot, Kusama and Westend transactions only. When set to true, Fireblocks will empty the asset wallet.\n\n   **Note:** If set to true when the source account is exactly 1 DOT, the transaction will fail. Any amount more or less than 1 DOT succeeds. This is a Polkadot blockchain limitation."
                },
                "feeLevel": {
                  "type": "string",
                  "enum": [
                    "LOW",
                    "MEDIUM",
                    "HIGH"
                  ],
                  "description": "For UTXO or EVM-based blockchains only. Defines the blockchain fee level which will be payed for the transaction. Alternatively, specific fee estimation parameters exist below."
                },
                "fee": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)"
                    }
                  ],
                  "description": "For UTXO-based blockchains, the fee per bytes in the asset’s smallest unit (Satoshi, Latoshi, etc.).  For Ripple, the fee for the transaction. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                },
                "priorityFee": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)",
                      "example": "2"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)",
                      "example": 2
                    }
                  ],
                  "description": "For Ethereum-based blockchains only, the fee for EIP-1559 transaction pricing mechanism. Value is in Gwei.  Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                },
                "failOnLowFee": {
                  "type": "boolean",
                  "description": "When set to `true`, in case the current `MEDIUM` fee level is higher than the one specified in the transaction, the transaction will fail to avoid getting stuck with no confirmations."
                },
                "maxFee": {
                  "description": "The maximum fee (gas price or fee per byte) that should be payed for the transaction.  In case the current value of the requested `feeLevel` is higher than this requested maximum fee.  Represented by a numeric string for accurate precision.",
                  "type": "string",
                  "example": "120"
                },
                "gasLimit": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)",
                      "example": "21000"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)",
                      "example": 21000
                    }
                  ],
                  "description": "For EVM-based blockchains only. Units of gas required to process the transaction. Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                },
                "gasPrice": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)"
                    }
                  ],
                  "description": "For non-EIP-1559, EVM-based transactions. Price per gas unit (in Ethereum this is specified in Gwei).  Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision.  Although a number input exists, it is deprecated."
                },
                "networkFee": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)"
                    }
                  ],
                  "description": "For EVM-based blockchains only. The total transaction fee in the blockchain’s largest unit. Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated. - The transaction blockchain fee.\n- For Ethereum, you can't pass gasPrice, gasLimit and networkFee all together.\n- A numeric value representation is required."
                },
                "replaceTxByHash": {
                  "type": "string",
                  "description": "For EVM-based blockchains only. In case a transaction is stuck, specify the hash of the stuck transaction to replace it by this transaction with a higher fee, or to replace it with this transaction with a zero fee and drop it from the blockchain.",
                  "example": "00000000-0000-0000-0000-000000000000"
                },
                "extraParameters": {
                  "type": "object",
                  "properties": {},
                  "description": "Additional protocol / operation specific key-value parameters:\n\nFor UTXO-based blockchain input selection, add the key `inputsSelection` with the value set the [input selection structure.](https://developers.fireblocks.com/reference/transaction-objects#inputsselection) The inputs can be retrieved from the [Retrieve Unspent Inputs endpoint.](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid-assetid-unspent-inputs)\n\nFor `RAW` operations, add the key `rawMessageData` with the value set to the [raw message data structure.](https://developers.fireblocks.com/reference/raw-signing-objects#rawmessagedata)\n\nFor `CONTRACT_CALL` operations, add the key `contractCallData` with the value set to the Ethereum smart contract Application Binary Interface (ABI) payload. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n"
                },
                "customerRefId": {
                  "type": "string",
                  "description": "The ID for AML providers to associate the owner of funds with transactions.",
                  "example": "abcdef"
                },
                "autoStaking": {
                  "type": "boolean",
                  "description": "This feature is no longer supported."
                },
                "networkStaking": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)"
                    }
                  ],
                  "description": "This feature is no longer supported."
                },
                "cpuStaking": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)"
                    }
                  ],
                  "description": "This feature is no longer supported."
                }
              }
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the transaction."
          },
          "status": {
            "type": "string",
            "description": "The primary status of the transaction. For details, see [Primary transaction statuses.] (https://developers.fireblocks.com/reference/primary-transaction-statuses)"
          },
          "systemMessages": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "WARN",
                  "BLOCK"
                ]
              },
              "message": {
                "type": "string",
                "description": "A response from Fireblocks that communicates a message about the health of the process being performed. If this object is returned with data, you should expect potential delays or incomplete transaction statuses.",
                "example": "Slow transaction processing. Outgoing transactions might be stuck."
              }
            }
          }
        }
      },
      "description": "Create a new transaction.\n\nCreates a new transaction."
    },
    {
      "method": "post",
      "path": "/transactions/estimate_fee",
      "name": "transactions_estimate_fee_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "operation": {
                  "type": "string",
                  "enum": [
                    "TRANSFER",
                    "BURN",
                    "CONTRACT_CALL",
                    "MINT",
                    "RAW",
                    "TYPED_MESSAGE"
                  ],
                  "description": "* `TRANSFER` - The default value for an operation. Transfers funds from one account to another. UTXO blockchains allow multi-input and multi-output transfers. All other blockchains allow transfers with one source address and one destination address.\n* `MINT` - Mints new tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `BURN` - Burns tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `CONTRACT_CALL` - Calls a smart contract method for web3 operations on any EVM blockchain. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n* `TYPED_MESSAGE` - An off-chain message in either Ethereum Personal Message or EIP712 format. Use it to sign specific readable messages that are not actual transactions. [Learn more about typed messages](https://developers.fireblocks.com/docs/typed-message-signing).\n* `RAW` - An off-chain message with no predefined format. Use it to sign any message with your private key, including protocols such as blockchains and custom transaction types that are not natively supported by Fireblocks. [Learn more about raw signing transactions.](https://developers.fireblocks.com/docs/raw-message-signing)\n"
                },
                "note": {
                  "type": "string",
                  "description": "Custom note, not sent to the blockchain, to describe the transaction at your Fireblocks workspace.",
                  "example": "Ticket 123"
                },
                "externalTxId": {
                  "type": "string",
                  "description": "An optional but highly recommended parameter. Fireblocks will reject future transactions with same ID. \n \nYou should set this to a unique ID representing the transaction, to avoid submitting the same transaction twice. This helps with cases where submitting the transaction responds with an error code due to Internet interruptions, but the transaction was actually sent and processed. To validate whether a transaction has been processed, [Find a specific transaction by external transaction ID](https://developers.fireblocks.com/reference/get_transactions-external-tx-id-externaltxid).\n \nThere is no specific format required for this parameter.",
                  "example": "00000000-0000-0000-0000-000000000000"
                },
                "assetId": {
                  "type": "string",
                  "description": "The ID of the asset to transfer, for `TRANSFER`, `MINT` or `BURN` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)",
                  "x-fb-entity": "asset",
                  "example": "ETH"
                },
                "source": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "VAULT_ACCOUNT",
                        "EXCHANGE_ACCOUNT",
                        "INTERNAL_WALLET",
                        "EXTERNAL_WALLET",
                        "NETWORK_CONNECTION",
                        "FIAT_ACCOUNT",
                        "COMPOUND",
                        "GAS_STATION",
                        "ONE_TIME_ADDRESS",
                        "UNKNOWN",
                        "END_USER_WALLET"
                      ]
                    },
                    "subType": {
                      "type": "string",
                      "enum": [
                        "BINANCE",
                        "BINANCEUS",
                        "BITFINEX",
                        "BITHUMB",
                        "BITMEX",
                        "BITSO",
                        "BITSTAMP",
                        "BITTREX",
                        "BLINC",
                        "BYBIT",
                        "CIRCLE",
                        "COINBASEEXCHANGE",
                        "COINBASEPRO",
                        "COINMETRO",
                        "COINSPRO",
                        "CRYPTOCOM",
                        "DERIBIT",
                        "GEMINI",
                        "HITBTC",
                        "HUOBI",
                        "INDEPENDENTRESERVE",
                        "KORBIT",
                        "KRAKEN",
                        "KRAKENINTL",
                        "KUCOIN",
                        "LIQUID",
                        "OKCOIN",
                        "OKEX",
                        "PAXOS",
                        "POLONIEX",
                        "External",
                        "Internal"
                      ]
                    },
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "walletId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "destination": {},
                "destinations": {
                  "type": "array",
                  "description": "For UTXO based blockchains, you can send a single transaction to multiple destinations.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "string"
                      },
                      "destination": {}
                    }
                  }
                },
                "amount": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)",
                      "example": "0.02"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)",
                      "example": 0.02
                    }
                  ],
                  "description": "For `TRANSFER` operations, the requested amount to transfer, in the asset’s unit. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                },
                "treatAsGrossAmount": {
                  "type": "boolean",
                  "description": "\"When set to `true`, the fee will be deducted from the requested amount.\"\n\n**Note**: This parameter can only be considered if a transaction’s asset is a base asset, such as ETH or MATIC. If the asset can’t be used for transaction fees, like USDC, this parameter is ignored and the fee is deducted from the relevant base asset wallet in the source account."
                },
                "forceSweep": {
                  "type": "boolean",
                  "description": "For Polkadot, Kusama and Westend transactions only. When set to true, Fireblocks will empty the asset wallet.\n\n   **Note:** If set to true when the source account is exactly 1 DOT, the transaction will fail. Any amount more or less than 1 DOT succeeds. This is a Polkadot blockchain limitation."
                },
                "feeLevel": {
                  "type": "string",
                  "enum": [
                    "LOW",
                    "MEDIUM",
                    "HIGH"
                  ],
                  "description": "For UTXO or EVM-based blockchains only. Defines the blockchain fee level which will be payed for the transaction. Alternatively, specific fee estimation parameters exist below."
                },
                "fee": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)"
                    }
                  ],
                  "description": "For UTXO-based blockchains, the fee per bytes in the asset’s smallest unit (Satoshi, Latoshi, etc.).  For Ripple, the fee for the transaction. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                },
                "priorityFee": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)",
                      "example": "2"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)",
                      "example": 2
                    }
                  ],
                  "description": "For Ethereum-based blockchains only, the fee for EIP-1559 transaction pricing mechanism. Value is in Gwei.  Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                },
                "failOnLowFee": {
                  "type": "boolean",
                  "description": "When set to `true`, in case the current `MEDIUM` fee level is higher than the one specified in the transaction, the transaction will fail to avoid getting stuck with no confirmations."
                },
                "maxFee": {
                  "description": "The maximum fee (gas price or fee per byte) that should be payed for the transaction.  In case the current value of the requested `feeLevel` is higher than this requested maximum fee.  Represented by a numeric string for accurate precision.",
                  "type": "string",
                  "example": "120"
                },
                "gasLimit": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)",
                      "example": "21000"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)",
                      "example": 21000
                    }
                  ],
                  "description": "For EVM-based blockchains only. Units of gas required to process the transaction. Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                },
                "gasPrice": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)"
                    }
                  ],
                  "description": "For non-EIP-1559, EVM-based transactions. Price per gas unit (in Ethereum this is specified in Gwei).  Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision.  Although a number input exists, it is deprecated."
                },
                "networkFee": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)"
                    }
                  ],
                  "description": "For EVM-based blockchains only. The total transaction fee in the blockchain’s largest unit. Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated. - The transaction blockchain fee.\n- For Ethereum, you can't pass gasPrice, gasLimit and networkFee all together.\n- A numeric value representation is required."
                },
                "replaceTxByHash": {
                  "type": "string",
                  "description": "For EVM-based blockchains only. In case a transaction is stuck, specify the hash of the stuck transaction to replace it by this transaction with a higher fee, or to replace it with this transaction with a zero fee and drop it from the blockchain.",
                  "example": "00000000-0000-0000-0000-000000000000"
                },
                "extraParameters": {
                  "type": "object",
                  "properties": {},
                  "description": "Additional protocol / operation specific key-value parameters:\n\nFor UTXO-based blockchain input selection, add the key `inputsSelection` with the value set the [input selection structure.](https://developers.fireblocks.com/reference/transaction-objects#inputsselection) The inputs can be retrieved from the [Retrieve Unspent Inputs endpoint.](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid-assetid-unspent-inputs)\n\nFor `RAW` operations, add the key `rawMessageData` with the value set to the [raw message data structure.](https://developers.fireblocks.com/reference/raw-signing-objects#rawmessagedata)\n\nFor `CONTRACT_CALL` operations, add the key `contractCallData` with the value set to the Ethereum smart contract Application Binary Interface (ABI) payload. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n"
                },
                "customerRefId": {
                  "type": "string",
                  "description": "The ID for AML providers to associate the owner of funds with transactions.",
                  "example": "abcdef"
                },
                "autoStaking": {
                  "type": "boolean",
                  "description": "This feature is no longer supported."
                },
                "networkStaking": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)"
                    }
                  ],
                  "description": "This feature is no longer supported."
                },
                "cpuStaking": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Numeric string (recommended)"
                    },
                    {
                      "type": "number",
                      "description": "Number (deprecated)"
                    }
                  ],
                  "description": "This feature is no longer supported."
                }
              }
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "low": {
            "type": "object",
            "properties": {
              "feePerByte": {
                "type": "string"
              },
              "gasPrice": {
                "type": "string"
              },
              "gasLimit": {
                "type": "string"
              },
              "networkFee": {
                "type": "string"
              },
              "baseFee": {
                "description": "(optional) Base Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              },
              "priorityFee": {
                "description": "(optional) Priority Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              }
            }
          },
          "medium": {
            "type": "object",
            "properties": {
              "feePerByte": {
                "type": "string"
              },
              "gasPrice": {
                "type": "string"
              },
              "gasLimit": {
                "type": "string"
              },
              "networkFee": {
                "type": "string"
              },
              "baseFee": {
                "description": "(optional) Base Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              },
              "priorityFee": {
                "description": "(optional) Priority Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              }
            }
          },
          "high": {
            "type": "object",
            "properties": {
              "feePerByte": {
                "type": "string"
              },
              "gasPrice": {
                "type": "string"
              },
              "gasLimit": {
                "type": "string"
              },
              "networkFee": {
                "type": "string"
              },
              "baseFee": {
                "description": "(optional) Base Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              },
              "priorityFee": {
                "description": "(optional) Priority Fee according to EIP-1559 (ETH assets)",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "low",
          "medium",
          "high"
        ]
      },
      "description": "Estimate transaction fee.\n\nEstimates the transaction fee for a transaction request.\n* Note: Supports all Fireblocks assets except ZCash (ZEC)."
    },
    {
      "method": "get",
      "path": "/transactions/{txId}",
      "name": "transactions_getByTxid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "txId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the transaction to return"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the transaction."
          },
          "externalTxId": {
            "type": "string",
            "description": "Unique transaction ID provided by the user. Fireblocks highly recommends setting an `externalTxId` for every transaction created, to avoid submitting the same transaction twice."
          },
          "status": {
            "type": "string",
            "description": "The primary status of the transaction. For details, see [Primary transaction statuses](https://developers.fireblocks.com/reference/primary-transaction-statuses)."
          },
          "subStatus": {
            "type": "string",
            "description": "See [Transaction substatuses](https://developers.fireblocks.com/reference/transaction-substatuses) for the list of transaction sub statuses."
          },
          "txHash": {
            "type": "string",
            "description": "The hash of the transaction on the blockchain.\n * This parameter exists if at least one of the following conditions is met:\n\n     1. The transaction’s source type is `UNKNOWN`, `WHITELISTED_ADDRESS`, `NETWORK_CONNECTION`, `ONE_TIME_ADDRESS`, `FIAT_ACCOUNT` or `GAS_STATION`.\n\n     2. The transaction’s source type is `VAULT` and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these statuses prior to changing to `FAILED` or `REJECTED`. In some instances, transactions in status `BROADCASTING` will include the txHash as well.\n\n     3. The transaction’s source type is `EXCHANGE_ACCOUNT` and the transaction’s destination type is `VAULT`, and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these status prior to changing to `FAILED`.\n  \n\n* In addition, the following conditions must be met:\n\n    1. The asset is a crypto asset (not fiat).\n\n    2. The transaction operation is not RAW or `TYPED_MESSAGE`."
          },
          "operation": {
            "type": "string",
            "enum": [
              "TRANSFER",
              "BURN",
              "CONTRACT_CALL",
              "MINT",
              "RAW",
              "TYPED_MESSAGE",
              "ENABLE_ASSET",
              "STAKE",
              "UNSTAKE",
              "WITHDRAW",
              "REDEEM_FROM_COMPOUND",
              "SUPPLY_TO_COMPOUND"
            ],
            "description": "* `TRANSFER` - Transfers funds from one account to another. UTXO blockchains allow multi-input and multi-output transfers. All other blockchains allow transfers with one source address and one destination address.\n* `MINT` - Mints new tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `BURN` - Burns tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `CONTRACT_CALL` - Calls a smart contract method for web3 operations on any EVM blockchain. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n* `TYPED_MESSAGE` - An off-chain message in either Ethereum Personal Message or EIP712 format. Use it to sign specific readable messages that are not actual transactions. [Learn more about typed messages](https://developers.fireblocks.com/docs/typed-message-signing).\n* `RAW` - An off-chain message with no predefined format. Use it to sign any message with your private key, including protocols such as blockchains and custom transaction types that are not natively supported by Fireblocks. [Learn more about raw signing transactions.](https://developers.fireblocks.com/docs/raw-message-signing)\n* `ENABLE_ASSET` - Algorand, DigitalBits, Solana, and Stellar require an on-chain transaction to create an asset wallet and enable the deposit address. This transaction is automatically created when adding assets on these blockchains at a vault account.\n* `STAKE` - Assign assets to a staking pool managed by a staking validator. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations.\n* `UNSTAKE` - Remove assets from a staking pool managed by a staking validator. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations.\n* `WITHDRAW` - Transfer assets from a dedicated staking vault account to another address. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations.\n\n    **Note:** Fireblocks will rename this type from `WITHDRAW` to a different type name soon. There will be a 7-day notice regarding the new type name.\n\n* `SUPPLY_TO_COMPOUND` - Deprecated since April 1st, 2023. Older transactions may have this as their operation, in case users in the workspace have used the direct integration between Fireblocks and the Compound DeFI protocol.\n* `REDEEM_FROM_COMPOUND` - Deprecated since April 1st, 2023. Older transactions may have this as their operation, in case users in the workspace have used the direct integration between Fireblocks and the Compound DeFI protocol.\n"
          },
          "note": {
            "type": "string",
            "description": "Custom note, not sent to the blockchain, that describes the transaction at your Fireblocks workspace."
          },
          "assetId": {
            "type": "string",
            "description": "The ID of the asset to transfer, for `TRANSFER`, `MINT`, `BURN`, `ENABLE_ASSET`,`STAKE` ,`UNSTAKE` or `WITHDRAW` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)",
            "x-fb-entity": "asset"
          },
          "source": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "subType": {
                "type": "string",
                "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name. In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
              },
              "id": {
                "type": "string",
                "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
              },
              "name": {
                "type": "string",
                "description": "The name of the peer."
              },
              "walletId": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "sourceAddress": {
            "type": "string",
            "description": "For account based assets only, the source address of the transaction.\n**Note:** If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the source address. In any other case, this parameter will be empty."
          },
          "tag": {
            "type": "string",
            "description": "Source address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group)."
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "subType": {
                "type": "string",
                "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name.In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
              },
              "id": {
                "type": "string",
                "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
              },
              "name": {
                "type": "string",
                "description": "The name of the peer."
              },
              "walletId": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "destinations": {
            "type": "array",
            "description": "The transaction’s destinations.\n**Note:** In case the transaction is sent to a single destination, the `destination` parameter is used instead of this.",
            "items": {
              "type": "object",
              "properties": {
                "destination": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "subType": {
                      "type": "string",
                      "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name.In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the peer."
                    },
                    "walletId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "destinationAddress": {
                  "description": "Address where the asset was transferred."
                },
                "destinationAddressDescription": {
                  "description": "Description of the address."
                },
                "amount": {
                  "type": "string",
                  "description": "The amount to be sent to this destination."
                },
                "amountUSD": {
                  "type": "string",
                  "description": "The USD value of the requested amount."
                },
                "amlScreeningResult": {
                  "type": "object",
                  "description": "The result of the AML screening.",
                  "properties": {
                    "provider": {
                      "type": "string"
                    },
                    "payload": {
                      "type": "object"
                    }
                  }
                },
                "customerRefId": {
                  "description": "The ID for AML providers to associate the owner of funds with transactions."
                },
                "authorizationInfo": {
                  "type": "object",
                  "description": "The information about your [Transaction Authorization Policy (TAP).](https://developers.fireblocks.com/docs/capabilities#transaction-authorization-policy-tap)",
                  "properties": {
                    "allowOperatorAsAuthorizer": {
                      "type": "boolean"
                    },
                    "logic": {
                      "type": "string",
                      "enum": [
                        "AND",
                        "OR"
                      ]
                    },
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "th": {
                            "type": "number"
                          },
                          "users": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string",
                              "enum": [
                                "PENDING_AUTHORIZATION",
                                "APPROVED",
                                "REJECTED",
                                "NA"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "destinationAddress": {
            "type": "string",
            "description": "Address where the asset were transferred.\nNotes:\n  - For [Multi destination transactions](https://support.fireblocks.io/hc/en-us/articles/360018447980-Multi-destination-transactions), this parameter will be empty. In this case, you should refer to the destinations field.\n  - If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the destination address. In any other case, this parameter will be empty."
          },
          "destinationAddressDescription": {
            "type": "string",
            "description": "Description of the address."
          },
          "destinationTag": {
            "type": "string",
            "description": "Destination address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group)."
          },
          "contractCallDecodedData": {
            "description": "Decoded data for `CONTRACT_CALL` operations. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for setting this parameter's value.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string"
              },
              "functionCalls": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "amountInfo": {
            "type": "object",
            "description": "The details of the requested amount to transfer.",
            "properties": {
              "amount": {
                "description": "If the transfer is a withdrawal from an exchange, the actual amount that was requested to be transferred. Otherwise, the requested amount.",
                "type": "string"
              },
              "requestedAmount": {
                "description": "The amount requested by the user.",
                "type": "string"
              },
              "netAmount": {
                "description": "The net amount of the transaction, after fee deduction.",
                "type": "string"
              },
              "amountUSD": {
                "description": "The USD value of the requested amount.",
                "type": "string"
              }
            }
          },
          "treatAsGrossAmount": {
            "type": "boolean",
            "description": "For transactions initiated via this Fireblocks workspace, when set to `true`, the fee is deducted from the requested amount.\n\n**Note**: This parameter can only be considered if a transaction's asset is a base asset, such as ETH or MATIC. If the asset can't be used for transaction fees, like USDC, this parameter is ignored and the fee is deducted from the relevant base asset wallet in the source account."
          },
          "feeInfo": {
            "type": "object",
            "description": "Details of the transaction's fee.",
            "properties": {
              "networkFee": {
                "description": "The fee paid to the network",
                "type": "string"
              },
              "serviceFee": {
                "description": "The total fee deducted by the exchange from the actual requested amount (serviceFee = amount - netAmount)",
                "type": "string"
              },
              "gasPrice": {
                "type": "string"
              }
            }
          },
          "feeCurrency": {
            "type": "string",
            "description": "The asset which was withdrawn to pay the transaction fee, for example ETH for EVM-based blockchains, BTC for Tether Omni."
          },
          "networkRecords": {
            "type": "array",
            "description": "In case a single transaction resulted with multiple transfers, for example a result of a contract call, then this parameter specifies each transfer that took place on the blockchain. In case of a single transfer transaction, this parameter is empty.",
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "subType": {
                      "type": "string",
                      "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name. In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the peer."
                    },
                    "walletId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "destination": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "subType": {
                      "type": "string",
                      "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name.In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the peer."
                    },
                    "walletId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "txHash": {
                  "type": "string"
                },
                "networkFee": {
                  "type": "string"
                },
                "assetId": {
                  "type": "string",
                  "x-fb-entity": "asset"
                },
                "netAmount": {
                  "description": "The net amount of the transaction, after fee deduction",
                  "type": "string"
                },
                "isDropped": {
                  "type": "boolean"
                },
                "type": {
                  "type": "string"
                },
                "destinationAddress": {
                  "type": "string"
                },
                "sourceAddress": {
                  "type": "string"
                },
                "amountUSD": {
                  "type": "string"
                },
                "index": {
                  "type": "number"
                },
                "rewardInfo": {
                  "type": "object",
                  "description": "This field is relevant only for Algorand transactions. Both `srcRewards` and `destRewards` will appear only for Vault to Vault transactions, otherwise you will receive only the Fireblocks’ side of the transaction.",
                  "properties": {
                    "srcRewards": {
                      "type": "string"
                    },
                    "destRewards": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "createdAt": {
            "type": "number",
            "description": "The transaction’s creation date and time, in unix timestamp."
          },
          "lastUpdated": {
            "type": "number",
            "description": "The transaction’s last update date and time, in unix timestamp."
          },
          "createdBy": {
            "type": "string",
            "description": "User ID of the initiator of the transaction."
          },
          "signedBy": {
            "type": "array",
            "description": "User ID’s of the signers of the transaction.",
            "items": {
              "type": "string"
            }
          },
          "rejectedBy": {
            "type": "string",
            "description": "User ID of the user that rejected the transaction (in case it was rejected)."
          },
          "authorizationInfo": {
            "type": "object",
            "description": "The information about your [Transaction Authorization Policy (TAP).](https://developers.fireblocks.com/docs/capabilities#transaction-authorization-policy-tap)",
            "properties": {
              "allowOperatorAsAuthorizer": {
                "type": "boolean"
              },
              "logic": {
                "type": "string",
                "enum": [
                  "AND",
                  "OR"
                ]
              },
              "groups": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "th": {
                      "type": "number"
                    },
                    "users": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string",
                        "enum": [
                          "PENDING_AUTHORIZATION",
                          "APPROVED",
                          "REJECTED",
                          "NA"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "exchangeTxId": {
            "type": "string",
            "description": "If the transaction originated from an exchange, this is the ID of this transaction at the exchange."
          },
          "customerRefId": {
            "type": "string",
            "description": "The ID for AML providers to associate the owner of funds with transactions."
          },
          "amlScreeningResult": {
            "type": "object",
            "description": "The result of the AML screening.",
            "properties": {
              "provider": {
                "type": "string"
              },
              "payload": {
                "type": "object"
              }
            }
          },
          "extraParameters": {
            "type": "object",
            "properties": {},
            "description": "Additional protocol / operation specific key-value parameters:\n\nFor UTXO-based blockchain input selection, add the key `inputsSelection` with the value set the [input selection structure.](https://developers.fireblocks.com/reference/transaction-objects#inputsselection) The inputs can be retrieved from the [Retrieve Unspent Inputs endpoint.](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid-assetid-unspent-inputs)\n\nFor `RAW` operations, add the key `rawMessageData` with the value set to the [raw message data structure.](https://developers.fireblocks.com/reference/raw-signing-objects#rawmessagedata)\n\nFor `CONTRACT_CALL` operations, add the key `contractCallData` with the value set to the Ethereum smart contract Application Binary Interface (ABI) payload. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n"
          },
          "signedMessages": {
            "type": "object",
            "description": "A list of signed messages returned for raw signing.",
            "properties": {
              "content": {
                "type": "string"
              },
              "algorithm": {
                "type": "string",
                "enum": [
                  "MPC_ECDSA_SECP256K1",
                  "MPC_EDDSA_ED25519"
                ]
              },
              "derivationPath": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "signature": {
                "type": "object",
                "properties": {
                  "fullSig": {
                    "type": "string"
                  },
                  "r": {
                    "type": "string"
                  },
                  "s": {
                    "type": "string"
                  },
                  "v": {
                    "type": "number"
                  }
                }
              },
              "publicKey": {
                "type": "string"
              }
            }
          },
          "numOfConfirmations": {
            "type": "number",
            "description": "The number of confirmations of the transaction. The number will increase until the transaction will be considered completed according to the confirmation policy."
          },
          "blockInfo": {
            "type": "object",
            "description": "The block hash and height of the block that this transaction was mined in.\n     **Note**: If an outgoing transaction uses the destinations object with more than one value in the array, blockHash is set to null.",
            "properties": {
              "blockHeight": {
                "type": "string"
              },
              "blockHash": {
                "type": "string"
              }
            }
          },
          "index": {
            "type": "number",
            "description": "For UTXO based assets this is the vOut, for Ethereum based, this is the index of the event of the contract call.\n **Note:** This field is not returned if a transaction uses the `destinations` object with more than one value."
          },
          "rewardInfo": {
            "type": "object",
            "description": "This field is relevant only for Algorand transactions. Both `srcRewards` and `destRewards` will appear only for Vault to Vault transactions, otherwise you will receive only the Fireblocks’ side of the transaction.",
            "properties": {
              "srcRewards": {
                "type": "string"
              },
              "destRewards": {
                "type": "string"
              }
            }
          },
          "systemMessages": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "WARN",
                  "BLOCK"
                ]
              },
              "message": {
                "type": "string",
                "description": "A response from Fireblocks that communicates a message about the health of the process being performed. If this object is returned with data, you should expect potential delays or incomplete transaction statuses.",
                "example": "Slow transaction processing. Outgoing transactions might be stuck."
              }
            }
          },
          "addressType": {
            "type": "string",
            "enum": [
              "WHITELISTED",
              "ONE_TIME"
            ]
          },
          "requestedAmount": {
            "description": "The amount requested by the user. Deprecated - please use the `amountInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          },
          "amount": {
            "description": "If the transfer is a withdrawal from an exchange, the actual amount that was requested to be transferred. Otherwise, the requested amount. Deprecated - please use the `amountInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          },
          "netAmount": {
            "description": "The net amount of the transaction, after fee deduction. Deprecated - please use the `amountInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          },
          "amountUSD": {
            "description": "The USD value of the requested amount. Deprecated - please use the `amountInfo` field for accuracy.",
            "type": "number",
            "nullable": true,
            "deprecated": true
          },
          "serviceFee": {
            "description": "The total fee deducted by the exchange from the actual requested amount (`serviceFee` = `amount` - `netAmount`). Deprecated - please use the `feeInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          },
          "fee": {
            "description": "Deprecated - please use the `feeInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          },
          "networkFee": {
            "description": "The fee paid to the network. Deprecated - please use the `feeInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          }
        }
      },
      "description": "Find a specific transaction by Fireblocks transaction ID.\n\nReturns a transaction by ID."
    },
    {
      "method": "get",
      "path": "/transactions/external_tx_id/{externalTxId}/",
      "name": "transactions_external_tx_id_getByExternaltxid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "externalTxId": {
              "type": "string",
              "minimum": 1,
              "description": "The external ID of the transaction to return"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the transaction."
          },
          "externalTxId": {
            "type": "string",
            "description": "Unique transaction ID provided by the user. Fireblocks highly recommends setting an `externalTxId` for every transaction created, to avoid submitting the same transaction twice."
          },
          "status": {
            "type": "string",
            "description": "The primary status of the transaction. For details, see [Primary transaction statuses](https://developers.fireblocks.com/reference/primary-transaction-statuses)."
          },
          "subStatus": {
            "type": "string",
            "description": "See [Transaction substatuses](https://developers.fireblocks.com/reference/transaction-substatuses) for the list of transaction sub statuses."
          },
          "txHash": {
            "type": "string",
            "description": "The hash of the transaction on the blockchain.\n * This parameter exists if at least one of the following conditions is met:\n\n     1. The transaction’s source type is `UNKNOWN`, `WHITELISTED_ADDRESS`, `NETWORK_CONNECTION`, `ONE_TIME_ADDRESS`, `FIAT_ACCOUNT` or `GAS_STATION`.\n\n     2. The transaction’s source type is `VAULT` and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these statuses prior to changing to `FAILED` or `REJECTED`. In some instances, transactions in status `BROADCASTING` will include the txHash as well.\n\n     3. The transaction’s source type is `EXCHANGE_ACCOUNT` and the transaction’s destination type is `VAULT`, and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these status prior to changing to `FAILED`.\n  \n\n* In addition, the following conditions must be met:\n\n    1. The asset is a crypto asset (not fiat).\n\n    2. The transaction operation is not RAW or `TYPED_MESSAGE`."
          },
          "operation": {
            "type": "string",
            "enum": [
              "TRANSFER",
              "BURN",
              "CONTRACT_CALL",
              "MINT",
              "RAW",
              "TYPED_MESSAGE",
              "ENABLE_ASSET",
              "STAKE",
              "UNSTAKE",
              "WITHDRAW",
              "REDEEM_FROM_COMPOUND",
              "SUPPLY_TO_COMPOUND"
            ],
            "description": "* `TRANSFER` - Transfers funds from one account to another. UTXO blockchains allow multi-input and multi-output transfers. All other blockchains allow transfers with one source address and one destination address.\n* `MINT` - Mints new tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `BURN` - Burns tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `CONTRACT_CALL` - Calls a smart contract method for web3 operations on any EVM blockchain. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n* `TYPED_MESSAGE` - An off-chain message in either Ethereum Personal Message or EIP712 format. Use it to sign specific readable messages that are not actual transactions. [Learn more about typed messages](https://developers.fireblocks.com/docs/typed-message-signing).\n* `RAW` - An off-chain message with no predefined format. Use it to sign any message with your private key, including protocols such as blockchains and custom transaction types that are not natively supported by Fireblocks. [Learn more about raw signing transactions.](https://developers.fireblocks.com/docs/raw-message-signing)\n* `ENABLE_ASSET` - Algorand, DigitalBits, Solana, and Stellar require an on-chain transaction to create an asset wallet and enable the deposit address. This transaction is automatically created when adding assets on these blockchains at a vault account.\n* `STAKE` - Assign assets to a staking pool managed by a staking validator. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations.\n* `UNSTAKE` - Remove assets from a staking pool managed by a staking validator. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations.\n* `WITHDRAW` - Transfer assets from a dedicated staking vault account to another address. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations.\n\n    **Note:** Fireblocks will rename this type from `WITHDRAW` to a different type name soon. There will be a 7-day notice regarding the new type name.\n\n* `SUPPLY_TO_COMPOUND` - Deprecated since April 1st, 2023. Older transactions may have this as their operation, in case users in the workspace have used the direct integration between Fireblocks and the Compound DeFI protocol.\n* `REDEEM_FROM_COMPOUND` - Deprecated since April 1st, 2023. Older transactions may have this as their operation, in case users in the workspace have used the direct integration between Fireblocks and the Compound DeFI protocol.\n"
          },
          "note": {
            "type": "string",
            "description": "Custom note, not sent to the blockchain, that describes the transaction at your Fireblocks workspace."
          },
          "assetId": {
            "type": "string",
            "description": "The ID of the asset to transfer, for `TRANSFER`, `MINT`, `BURN`, `ENABLE_ASSET`,`STAKE` ,`UNSTAKE` or `WITHDRAW` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)",
            "x-fb-entity": "asset"
          },
          "source": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "subType": {
                "type": "string",
                "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name. In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
              },
              "id": {
                "type": "string",
                "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
              },
              "name": {
                "type": "string",
                "description": "The name of the peer."
              },
              "walletId": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "sourceAddress": {
            "type": "string",
            "description": "For account based assets only, the source address of the transaction.\n**Note:** If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the source address. In any other case, this parameter will be empty."
          },
          "tag": {
            "type": "string",
            "description": "Source address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group)."
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "subType": {
                "type": "string",
                "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name.In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
              },
              "id": {
                "type": "string",
                "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
              },
              "name": {
                "type": "string",
                "description": "The name of the peer."
              },
              "walletId": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "destinations": {
            "type": "array",
            "description": "The transaction’s destinations.\n**Note:** In case the transaction is sent to a single destination, the `destination` parameter is used instead of this.",
            "items": {
              "type": "object",
              "properties": {
                "destination": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "subType": {
                      "type": "string",
                      "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name.In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the peer."
                    },
                    "walletId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "destinationAddress": {
                  "description": "Address where the asset was transferred."
                },
                "destinationAddressDescription": {
                  "description": "Description of the address."
                },
                "amount": {
                  "type": "string",
                  "description": "The amount to be sent to this destination."
                },
                "amountUSD": {
                  "type": "string",
                  "description": "The USD value of the requested amount."
                },
                "amlScreeningResult": {
                  "type": "object",
                  "description": "The result of the AML screening.",
                  "properties": {
                    "provider": {
                      "type": "string"
                    },
                    "payload": {
                      "type": "object"
                    }
                  }
                },
                "customerRefId": {
                  "description": "The ID for AML providers to associate the owner of funds with transactions."
                },
                "authorizationInfo": {
                  "type": "object",
                  "description": "The information about your [Transaction Authorization Policy (TAP).](https://developers.fireblocks.com/docs/capabilities#transaction-authorization-policy-tap)",
                  "properties": {
                    "allowOperatorAsAuthorizer": {
                      "type": "boolean"
                    },
                    "logic": {
                      "type": "string",
                      "enum": [
                        "AND",
                        "OR"
                      ]
                    },
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "th": {
                            "type": "number"
                          },
                          "users": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string",
                              "enum": [
                                "PENDING_AUTHORIZATION",
                                "APPROVED",
                                "REJECTED",
                                "NA"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "destinationAddress": {
            "type": "string",
            "description": "Address where the asset were transferred.\nNotes:\n  - For [Multi destination transactions](https://support.fireblocks.io/hc/en-us/articles/360018447980-Multi-destination-transactions), this parameter will be empty. In this case, you should refer to the destinations field.\n  - If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the destination address. In any other case, this parameter will be empty."
          },
          "destinationAddressDescription": {
            "type": "string",
            "description": "Description of the address."
          },
          "destinationTag": {
            "type": "string",
            "description": "Destination address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group)."
          },
          "contractCallDecodedData": {
            "description": "Decoded data for `CONTRACT_CALL` operations. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for setting this parameter's value.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string"
              },
              "functionCalls": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "amountInfo": {
            "type": "object",
            "description": "The details of the requested amount to transfer.",
            "properties": {
              "amount": {
                "description": "If the transfer is a withdrawal from an exchange, the actual amount that was requested to be transferred. Otherwise, the requested amount.",
                "type": "string"
              },
              "requestedAmount": {
                "description": "The amount requested by the user.",
                "type": "string"
              },
              "netAmount": {
                "description": "The net amount of the transaction, after fee deduction.",
                "type": "string"
              },
              "amountUSD": {
                "description": "The USD value of the requested amount.",
                "type": "string"
              }
            }
          },
          "treatAsGrossAmount": {
            "type": "boolean",
            "description": "For transactions initiated via this Fireblocks workspace, when set to `true`, the fee is deducted from the requested amount.\n\n**Note**: This parameter can only be considered if a transaction's asset is a base asset, such as ETH or MATIC. If the asset can't be used for transaction fees, like USDC, this parameter is ignored and the fee is deducted from the relevant base asset wallet in the source account."
          },
          "feeInfo": {
            "type": "object",
            "description": "Details of the transaction's fee.",
            "properties": {
              "networkFee": {
                "description": "The fee paid to the network",
                "type": "string"
              },
              "serviceFee": {
                "description": "The total fee deducted by the exchange from the actual requested amount (serviceFee = amount - netAmount)",
                "type": "string"
              },
              "gasPrice": {
                "type": "string"
              }
            }
          },
          "feeCurrency": {
            "type": "string",
            "description": "The asset which was withdrawn to pay the transaction fee, for example ETH for EVM-based blockchains, BTC for Tether Omni."
          },
          "networkRecords": {
            "type": "array",
            "description": "In case a single transaction resulted with multiple transfers, for example a result of a contract call, then this parameter specifies each transfer that took place on the blockchain. In case of a single transfer transaction, this parameter is empty.",
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "subType": {
                      "type": "string",
                      "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name. In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the peer."
                    },
                    "walletId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "destination": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "subType": {
                      "type": "string",
                      "description": "In case the type is set to `EXCHANGE_ACCOUNT` or `FIAT_ACCOUNT`, the specific exchange vendor name or fiat vendor name.In case the type is set to `INTERNAL_WALLET` or `EXTERNAL_WALLET`, the subType is set to `Internal` or `External`."
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the peer. You can retrieve the ID of each venue object using the endpoints for [listing vault accounts](https://developers.fireblocks.com/reference/get_vault-accounts-paged), [listing exchange account](https://developers.fireblocks.com/reference/get_exchange-accounts), [listing fiat accounts](https://developers.fireblocks.com/reference/get_fiat-accounts), [listing internal wallets](https://developers.fireblocks.com/reference/get_internal-wallets), [listing external wallets](https://developers.fireblocks.com/reference/get_external-wallets), [listing network connections](https://developers.fireblocks.com/reference/get_network-connections). For the other types, this parameter is not needed."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the peer."
                    },
                    "walletId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "txHash": {
                  "type": "string"
                },
                "networkFee": {
                  "type": "string"
                },
                "assetId": {
                  "type": "string",
                  "x-fb-entity": "asset"
                },
                "netAmount": {
                  "description": "The net amount of the transaction, after fee deduction",
                  "type": "string"
                },
                "isDropped": {
                  "type": "boolean"
                },
                "type": {
                  "type": "string"
                },
                "destinationAddress": {
                  "type": "string"
                },
                "sourceAddress": {
                  "type": "string"
                },
                "amountUSD": {
                  "type": "string"
                },
                "index": {
                  "type": "number"
                },
                "rewardInfo": {
                  "type": "object",
                  "description": "This field is relevant only for Algorand transactions. Both `srcRewards` and `destRewards` will appear only for Vault to Vault transactions, otherwise you will receive only the Fireblocks’ side of the transaction.",
                  "properties": {
                    "srcRewards": {
                      "type": "string"
                    },
                    "destRewards": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "createdAt": {
            "type": "number",
            "description": "The transaction’s creation date and time, in unix timestamp."
          },
          "lastUpdated": {
            "type": "number",
            "description": "The transaction’s last update date and time, in unix timestamp."
          },
          "createdBy": {
            "type": "string",
            "description": "User ID of the initiator of the transaction."
          },
          "signedBy": {
            "type": "array",
            "description": "User ID’s of the signers of the transaction.",
            "items": {
              "type": "string"
            }
          },
          "rejectedBy": {
            "type": "string",
            "description": "User ID of the user that rejected the transaction (in case it was rejected)."
          },
          "authorizationInfo": {
            "type": "object",
            "description": "The information about your [Transaction Authorization Policy (TAP).](https://developers.fireblocks.com/docs/capabilities#transaction-authorization-policy-tap)",
            "properties": {
              "allowOperatorAsAuthorizer": {
                "type": "boolean"
              },
              "logic": {
                "type": "string",
                "enum": [
                  "AND",
                  "OR"
                ]
              },
              "groups": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "th": {
                      "type": "number"
                    },
                    "users": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string",
                        "enum": [
                          "PENDING_AUTHORIZATION",
                          "APPROVED",
                          "REJECTED",
                          "NA"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "exchangeTxId": {
            "type": "string",
            "description": "If the transaction originated from an exchange, this is the ID of this transaction at the exchange."
          },
          "customerRefId": {
            "type": "string",
            "description": "The ID for AML providers to associate the owner of funds with transactions."
          },
          "amlScreeningResult": {
            "type": "object",
            "description": "The result of the AML screening.",
            "properties": {
              "provider": {
                "type": "string"
              },
              "payload": {
                "type": "object"
              }
            }
          },
          "extraParameters": {
            "type": "object",
            "properties": {},
            "description": "Additional protocol / operation specific key-value parameters:\n\nFor UTXO-based blockchain input selection, add the key `inputsSelection` with the value set the [input selection structure.](https://developers.fireblocks.com/reference/transaction-objects#inputsselection) The inputs can be retrieved from the [Retrieve Unspent Inputs endpoint.](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid-assetid-unspent-inputs)\n\nFor `RAW` operations, add the key `rawMessageData` with the value set to the [raw message data structure.](https://developers.fireblocks.com/reference/raw-signing-objects#rawmessagedata)\n\nFor `CONTRACT_CALL` operations, add the key `contractCallData` with the value set to the Ethereum smart contract Application Binary Interface (ABI) payload. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n"
          },
          "signedMessages": {
            "type": "object",
            "description": "A list of signed messages returned for raw signing.",
            "properties": {
              "content": {
                "type": "string"
              },
              "algorithm": {
                "type": "string",
                "enum": [
                  "MPC_ECDSA_SECP256K1",
                  "MPC_EDDSA_ED25519"
                ]
              },
              "derivationPath": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "signature": {
                "type": "object",
                "properties": {
                  "fullSig": {
                    "type": "string"
                  },
                  "r": {
                    "type": "string"
                  },
                  "s": {
                    "type": "string"
                  },
                  "v": {
                    "type": "number"
                  }
                }
              },
              "publicKey": {
                "type": "string"
              }
            }
          },
          "numOfConfirmations": {
            "type": "number",
            "description": "The number of confirmations of the transaction. The number will increase until the transaction will be considered completed according to the confirmation policy."
          },
          "blockInfo": {
            "type": "object",
            "description": "The block hash and height of the block that this transaction was mined in.\n     **Note**: If an outgoing transaction uses the destinations object with more than one value in the array, blockHash is set to null.",
            "properties": {
              "blockHeight": {
                "type": "string"
              },
              "blockHash": {
                "type": "string"
              }
            }
          },
          "index": {
            "type": "number",
            "description": "For UTXO based assets this is the vOut, for Ethereum based, this is the index of the event of the contract call.\n **Note:** This field is not returned if a transaction uses the `destinations` object with more than one value."
          },
          "rewardInfo": {
            "type": "object",
            "description": "This field is relevant only for Algorand transactions. Both `srcRewards` and `destRewards` will appear only for Vault to Vault transactions, otherwise you will receive only the Fireblocks’ side of the transaction.",
            "properties": {
              "srcRewards": {
                "type": "string"
              },
              "destRewards": {
                "type": "string"
              }
            }
          },
          "systemMessages": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "WARN",
                  "BLOCK"
                ]
              },
              "message": {
                "type": "string",
                "description": "A response from Fireblocks that communicates a message about the health of the process being performed. If this object is returned with data, you should expect potential delays or incomplete transaction statuses.",
                "example": "Slow transaction processing. Outgoing transactions might be stuck."
              }
            }
          },
          "addressType": {
            "type": "string",
            "enum": [
              "WHITELISTED",
              "ONE_TIME"
            ]
          },
          "requestedAmount": {
            "description": "The amount requested by the user. Deprecated - please use the `amountInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          },
          "amount": {
            "description": "If the transfer is a withdrawal from an exchange, the actual amount that was requested to be transferred. Otherwise, the requested amount. Deprecated - please use the `amountInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          },
          "netAmount": {
            "description": "The net amount of the transaction, after fee deduction. Deprecated - please use the `amountInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          },
          "amountUSD": {
            "description": "The USD value of the requested amount. Deprecated - please use the `amountInfo` field for accuracy.",
            "type": "number",
            "nullable": true,
            "deprecated": true
          },
          "serviceFee": {
            "description": "The total fee deducted by the exchange from the actual requested amount (`serviceFee` = `amount` - `netAmount`). Deprecated - please use the `feeInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          },
          "fee": {
            "description": "Deprecated - please use the `feeInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          },
          "networkFee": {
            "description": "The fee paid to the network. Deprecated - please use the `feeInfo` field for accuracy.",
            "type": "number",
            "deprecated": true
          }
        }
      },
      "description": "Find a specific transaction by external transaction ID.\n\nReturns transaction by external transaction ID."
    },
    {
      "method": "post",
      "path": "/transactions/{txId}/set_confirmation_threshold",
      "name": "transactions_set_confirmation_threshold_postByTxid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "txId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the transaction"
            },
            "body": {
              "type": "object",
              "properties": {
                "numOfConfirmations": {
                  "type": "number"
                }
              }
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "transactions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "description": "Set confirmation threshold by transaction ID.\n\nOverrides the required number of confirmations for transaction completion by transaction ID."
    },
    {
      "method": "post",
      "path": "/transactions/{txId}/drop",
      "name": "transactions_drop_postByTxid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "txId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the transaction"
            },
            "body": {
              "type": "object",
              "properties": {
                "txId": {
                  "type": "string"
                },
                "feeLevel": {
                  "type": "string"
                },
                "gasPrice": {
                  "type": "string"
                }
              }
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "transactions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "description": "Drop ETH transaction by ID.\n\nDrops a stuck ETH transaction and creates a replacement transaction."
    },
    {
      "method": "post",
      "path": "/transactions/{txId}/cancel",
      "name": "transactions_cancel_postByTxid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "txId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the transaction to cancel"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "description": "Cancel a transaction.\n\nCancels a transaction by ID."
    },
    {
      "method": "post",
      "path": "/transactions/{txId}/freeze",
      "name": "transactions_freeze_postByTxid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "txId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the transaction to freeze"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "description": "Freeze a transaction.\n\nFreezes a transaction by ID."
    },
    {
      "method": "post",
      "path": "/transactions/{txId}/unfreeze",
      "name": "transactions_unfreeze_postByTxid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "txId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the transaction to unfreeze"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "description": "Unfreeze a transaction.\n\nUnfreezes a transaction by ID and makes the transaction available again."
    },
    {
      "method": "post",
      "path": "/txHash/{txHash}/set_confirmation_threshold",
      "name": "txHash_set_confirmation_threshold_postByTxhash",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "txHash": {
              "type": "string",
              "minimum": 1,
              "description": "The TxHash"
            },
            "body": {
              "type": "object",
              "properties": {
                "numOfConfirmations": {
                  "type": "number"
                }
              }
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "transactions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "description": "Set confirmation threshold by transaction hash.\n\nOverrides the required number of confirmations for transaction completion by transaction hash."
    },
    {
      "method": "get",
      "path": "/payments/xb-settlements/configs",
      "name": "payments_xb_settlements_configs_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "configurations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "configId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Cross Bodrder configuraion unique id"
                },
                "corridorId": {
                  "type": "string",
                  "enum": [
                    "MX_US",
                    "CO_US",
                    "US_MX",
                    "US_EU",
                    "US_UK"
                  ],
                  "description": "- MX_US : Mexico (MXN) to USA (USD)\n- CO_US : Colombia (COP) to USA (USD)\n- US_MX : USA (USD) to Mexico (MXN)\n- US_EU : USA (USD) to Europe Union (EUR)\n- US_UK : USA (USD) to United Kingdon (GBP)\n"
                },
                "name": {
                  "type": "string",
                  "description": "The name for the cross-border ettlement configuration"
                },
                "steps": {
                  "type": "object",
                  "properties": {
                    "stepType": {
                      "type": "string",
                      "enum": [
                        "ON_RAMP",
                        "VAULT_ACCOUNT",
                        "OFF_RAMP",
                        "FIAT_DESTINATION"
                      ],
                      "description": "- ON_RAMP : A service that allows for the exchange of fiat currencies for cryptocurrencies. An OnRamp input value will always be fiat and output value crypto asset.\n- VAULT_ACCOUNT : Fireblocks Vault account\n- OFF_RAMP : A service that allows for the exchange of cryptocurrencies for fiat. An OffRamp input value will always be a crypto asset and output value be fiat.\n- FIAT_DESTINATION : Fiat account\n"
                    }
                  },
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "accountId": {
                        "type": "string"
                      },
                      "inputAssetId": {},
                      "outputAssetId": {}
                    },
                    "required": [
                      "accountId"
                    ]
                  }
                },
                "conversionSlippageBasisPoints": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 10000,
                  "description": "Slippage configuarion in basis points, the default value is 10%\n"
                },
                "createdAt": {
                  "type": "number",
                  "description": "The creation time in epoch format."
                }
              },
              "required": [
                "configId",
                "name",
                "corridorId",
                "steps",
                "conversionSlippageBasisPoints",
                "createdAt"
              ]
            }
          }
        },
        "required": [
          "configurations"
        ]
      },
      "description": "Get all the cross-border settlement configurations. </br>\n**Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts.\nThese endpoints are currently in beta and might be subject to changes.\nIf you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "post",
      "path": "/payments/xb-settlements/configs",
      "name": "payments_xb_settlements_configs_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name for the cross-border settlement configuration"
                },
                "corridorId": {
                  "type": "string",
                  "enum": [
                    "MX_US",
                    "CO_US",
                    "US_MX",
                    "US_EU",
                    "US_UK"
                  ],
                  "description": "- MX_US : Mexico (MXN) to USA (USD)\n- CO_US : Colombia (COP) to USA (USD)\n- US_MX : USA (USD) to Mexico (MXN)\n- US_EU : USA (USD) to Europe Union (EUR)\n- US_UK : USA (USD) to United Kingdon (GBP)\n"
                },
                "steps": {
                  "type": "object",
                  "properties": {
                    "stepType": {
                      "type": "string",
                      "enum": [
                        "ON_RAMP",
                        "VAULT_ACCOUNT",
                        "OFF_RAMP",
                        "FIAT_DESTINATION"
                      ],
                      "description": "- ON_RAMP : A service that allows for the exchange of fiat currencies for cryptocurrencies. An OnRamp input value will always be fiat and output value crypto asset.\n- VAULT_ACCOUNT : Fireblocks Vault account\n- OFF_RAMP : A service that allows for the exchange of cryptocurrencies for fiat. An OffRamp input value will always be a crypto asset and output value be fiat.\n- FIAT_DESTINATION : Fiat account\n"
                    }
                  },
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "accountId": {
                        "type": "string"
                      },
                      "inputAssetId": {},
                      "outputAssetId": {}
                    },
                    "required": [
                      "accountId"
                    ]
                  }
                },
                "conversionSlippageBasisPoints": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 10000,
                  "description": "Slippage configuarion in basis points, the default value is 10%\n"
                }
              },
              "required": [
                "name",
                "corridorId",
                "steps"
              ]
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "configId": {
            "type": "string",
            "format": "uuid",
            "description": "Cross Bodrder configuraion unique id"
          },
          "corridorId": {
            "type": "string",
            "enum": [
              "MX_US",
              "CO_US",
              "US_MX",
              "US_EU",
              "US_UK"
            ],
            "description": "- MX_US : Mexico (MXN) to USA (USD)\n- CO_US : Colombia (COP) to USA (USD)\n- US_MX : USA (USD) to Mexico (MXN)\n- US_EU : USA (USD) to Europe Union (EUR)\n- US_UK : USA (USD) to United Kingdon (GBP)\n"
          },
          "name": {
            "type": "string",
            "description": "The name for the cross-border ettlement configuration"
          },
          "steps": {
            "type": "object",
            "properties": {
              "stepType": {
                "type": "string",
                "enum": [
                  "ON_RAMP",
                  "VAULT_ACCOUNT",
                  "OFF_RAMP",
                  "FIAT_DESTINATION"
                ],
                "description": "- ON_RAMP : A service that allows for the exchange of fiat currencies for cryptocurrencies. An OnRamp input value will always be fiat and output value crypto asset.\n- VAULT_ACCOUNT : Fireblocks Vault account\n- OFF_RAMP : A service that allows for the exchange of cryptocurrencies for fiat. An OffRamp input value will always be a crypto asset and output value be fiat.\n- FIAT_DESTINATION : Fiat account\n"
              }
            },
            "additionalProperties": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "inputAssetId": {},
                "outputAssetId": {}
              },
              "required": [
                "accountId"
              ]
            }
          },
          "conversionSlippageBasisPoints": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10000,
            "default": 10000,
            "description": "Slippage configuarion in basis points, the default value is 10%\n"
          },
          "createdAt": {
            "type": "number",
            "description": "The creation time in epoch format."
          }
        },
        "required": [
          "configId",
          "name",
          "corridorId",
          "steps",
          "conversionSlippageBasisPoints",
          "createdAt"
        ]
      },
      "description": "Create a new cross-border settlement configuration.\n\n<u><b>Create a new cross-border settlement configuration. </u></b></br>Configurations define the default assets, on-ramps, and off-ramps to use for the cross-border settlement. </br> \nA configuration must contain at least two steps - `ON_RAMP` and `VAULT_ACCOUNT`. </br>\nAll other steps (e.g., `OFF_RAMP`, `FIAT_DESTINATION`, etc.) are optional. </br>\nEvery step must include the `accountId` to be used, while `inputAssetId` and `outputAssetId` are optional. \nIf those are not provided, a default value will be used from the Corridor Settings.</br>\nIf the inputAssetId or the outputAssetId is provided for one of the objects, all assets in the objects must be consistent. For example, if the output asset of ON_RAMP is XLM_USDC_5F3T, then the input asset of the VAULT_ACCOUNT must also be XLM_USDC_5F3T..</br>\nYou can set a slippage amount for your configuration. Slippage is defined by basis points (bps). This value can be overloaded on execution. If you do not configure a slippage amount, the default slippage of 10000 bps (10%) is used. </br>\n**Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts.\nThese endpoints are currently in beta and might be subject to changes.\nIf you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "get",
      "path": "/payments/xb-settlements/configs/{configId}",
      "name": "payments_xb_settlements_configs_getByConfigid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "configId": {
              "type": "string",
              "description": "The cross-border settlement configuration ID."
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "configId": {
            "type": "string",
            "format": "uuid",
            "description": "Cross Bodrder configuraion unique id"
          },
          "corridorId": {
            "type": "string",
            "enum": [
              "MX_US",
              "CO_US",
              "US_MX",
              "US_EU",
              "US_UK"
            ],
            "description": "- MX_US : Mexico (MXN) to USA (USD)\n- CO_US : Colombia (COP) to USA (USD)\n- US_MX : USA (USD) to Mexico (MXN)\n- US_EU : USA (USD) to Europe Union (EUR)\n- US_UK : USA (USD) to United Kingdon (GBP)\n"
          },
          "name": {
            "type": "string",
            "description": "The name for the cross-border ettlement configuration"
          },
          "steps": {
            "type": "object",
            "properties": {
              "stepType": {
                "type": "string",
                "enum": [
                  "ON_RAMP",
                  "VAULT_ACCOUNT",
                  "OFF_RAMP",
                  "FIAT_DESTINATION"
                ],
                "description": "- ON_RAMP : A service that allows for the exchange of fiat currencies for cryptocurrencies. An OnRamp input value will always be fiat and output value crypto asset.\n- VAULT_ACCOUNT : Fireblocks Vault account\n- OFF_RAMP : A service that allows for the exchange of cryptocurrencies for fiat. An OffRamp input value will always be a crypto asset and output value be fiat.\n- FIAT_DESTINATION : Fiat account\n"
              }
            },
            "additionalProperties": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "inputAssetId": {},
                "outputAssetId": {}
              },
              "required": [
                "accountId"
              ]
            }
          },
          "conversionSlippageBasisPoints": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10000,
            "default": 10000,
            "description": "Slippage configuarion in basis points, the default value is 10%\n"
          },
          "createdAt": {
            "type": "number",
            "description": "The creation time in epoch format."
          }
        },
        "required": [
          "configId",
          "name",
          "corridorId",
          "steps",
          "conversionSlippageBasisPoints",
          "createdAt"
        ]
      },
      "description": "Get a specific cross-border settlement configuration.</br>\n**Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts.\nThese endpoints are currently in beta and might be subject to changes.\nIf you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "put",
      "path": "/payments/xb-settlements/configs/{configId}",
      "name": "payments_xb_settlements_configs_putByConfigid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "configId": {
              "type": "string",
              "description": "The cross-border settlement configuration ID."
            },
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name for the cross-border settlement configuration"
                },
                "steps": {
                  "type": "object",
                  "properties": {
                    "stepType": {
                      "type": "string",
                      "enum": [
                        "ON_RAMP",
                        "VAULT_ACCOUNT",
                        "OFF_RAMP",
                        "FIAT_DESTINATION"
                      ],
                      "description": "- ON_RAMP : A service that allows for the exchange of fiat currencies for cryptocurrencies. An OnRamp input value will always be fiat and output value crypto asset.\n- VAULT_ACCOUNT : Fireblocks Vault account\n- OFF_RAMP : A service that allows for the exchange of cryptocurrencies for fiat. An OffRamp input value will always be a crypto asset and output value be fiat.\n- FIAT_DESTINATION : Fiat account\n"
                    }
                  },
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "accountId": {
                        "type": "string"
                      },
                      "inputAssetId": {},
                      "outputAssetId": {}
                    },
                    "required": [
                      "accountId"
                    ]
                  }
                },
                "conversionSlippageBasisPoints": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 10000,
                  "description": "Slippage configuarion in basis points, the default value is 10%\n"
                }
              },
              "required": [
                "name",
                "steps"
              ]
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "configId": {
            "type": "string",
            "format": "uuid",
            "description": "Cross Bodrder configuraion unique id"
          },
          "corridorId": {
            "type": "string",
            "enum": [
              "MX_US",
              "CO_US",
              "US_MX",
              "US_EU",
              "US_UK"
            ],
            "description": "- MX_US : Mexico (MXN) to USA (USD)\n- CO_US : Colombia (COP) to USA (USD)\n- US_MX : USA (USD) to Mexico (MXN)\n- US_EU : USA (USD) to Europe Union (EUR)\n- US_UK : USA (USD) to United Kingdon (GBP)\n"
          },
          "name": {
            "type": "string",
            "description": "The name for the cross-border ettlement configuration"
          },
          "steps": {
            "type": "object",
            "properties": {
              "stepType": {
                "type": "string",
                "enum": [
                  "ON_RAMP",
                  "VAULT_ACCOUNT",
                  "OFF_RAMP",
                  "FIAT_DESTINATION"
                ],
                "description": "- ON_RAMP : A service that allows for the exchange of fiat currencies for cryptocurrencies. An OnRamp input value will always be fiat and output value crypto asset.\n- VAULT_ACCOUNT : Fireblocks Vault account\n- OFF_RAMP : A service that allows for the exchange of cryptocurrencies for fiat. An OffRamp input value will always be a crypto asset and output value be fiat.\n- FIAT_DESTINATION : Fiat account\n"
              }
            },
            "additionalProperties": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "inputAssetId": {},
                "outputAssetId": {}
              },
              "required": [
                "accountId"
              ]
            }
          },
          "conversionSlippageBasisPoints": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10000,
            "default": 10000,
            "description": "Slippage configuarion in basis points, the default value is 10%\n"
          },
          "createdAt": {
            "type": "number",
            "description": "The creation time in epoch format."
          }
        },
        "required": [
          "configId",
          "name",
          "corridorId",
          "steps",
          "conversionSlippageBasisPoints",
          "createdAt"
        ]
      },
      "description": "Edit a cross-border settlement configuration.\nEditing a configuration does not affect previously executed flows that used the configuration.\n**Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts.\nThese endpoints are currently in beta and might be subject to changes.\nIf you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "delete",
      "path": "/payments/xb-settlements/configs/{configId}",
      "name": "payments_xb_settlements_configs_eraseByConfigid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "configId": {
              "type": "string",
              "description": "The cross-border settlement configuration ID."
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "configId": {
            "type": "string",
            "format": "uuid",
            "description": "Cross Bodrder configuraion unique id"
          },
          "corridorId": {
            "type": "string",
            "enum": [
              "MX_US",
              "CO_US",
              "US_MX",
              "US_EU",
              "US_UK"
            ],
            "description": "- MX_US : Mexico (MXN) to USA (USD)\n- CO_US : Colombia (COP) to USA (USD)\n- US_MX : USA (USD) to Mexico (MXN)\n- US_EU : USA (USD) to Europe Union (EUR)\n- US_UK : USA (USD) to United Kingdon (GBP)\n"
          },
          "name": {
            "type": "string",
            "description": "The name for the cross-border ettlement configuration"
          },
          "steps": {
            "type": "object",
            "properties": {
              "stepType": {
                "type": "string",
                "enum": [
                  "ON_RAMP",
                  "VAULT_ACCOUNT",
                  "OFF_RAMP",
                  "FIAT_DESTINATION"
                ],
                "description": "- ON_RAMP : A service that allows for the exchange of fiat currencies for cryptocurrencies. An OnRamp input value will always be fiat and output value crypto asset.\n- VAULT_ACCOUNT : Fireblocks Vault account\n- OFF_RAMP : A service that allows for the exchange of cryptocurrencies for fiat. An OffRamp input value will always be a crypto asset and output value be fiat.\n- FIAT_DESTINATION : Fiat account\n"
              }
            },
            "additionalProperties": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "inputAssetId": {},
                "outputAssetId": {}
              },
              "required": [
                "accountId"
              ]
            }
          },
          "conversionSlippageBasisPoints": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10000,
            "default": 10000,
            "description": "Slippage configuarion in basis points, the default value is 10%\n"
          },
          "createdAt": {
            "type": "number",
            "description": "The creation time in epoch format."
          }
        },
        "required": [
          "configId",
          "name",
          "corridorId",
          "steps",
          "conversionSlippageBasisPoints",
          "createdAt"
        ]
      },
      "description": "Delete a cross-border settlement configuration.\nThis does not delete or remove previously executed flows that used this configuration.\n**Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts.\nThese endpoints are currently in beta and might be subject to changes.\nIf you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "post",
      "path": "/payments/xb-settlements/flows",
      "name": "payments_xb_settlements_flows_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "configId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Cross Bodrder configuraion unique id"
                },
                "amount": {
                  "type": "string",
                  "description": "The amount to transfer in this cross-border flow. The type of asset is defined by the cross-border settlement configuration."
                }
              },
              "required": [
                "configId",
                "amount"
              ]
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "flowId": {
            "type": "string",
            "description": "The unique id for the cross-border flow."
          },
          "configId": {
            "type": "string",
            "format": "uuid",
            "description": "Cross Bodrder configuraion unique id"
          },
          "conversionRate": {
            "type": "string",
            "description": "The conversion rate received from the on-ramp or off-ramp."
          },
          "inputAmount": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string"
              },
              "assetId": {}
            },
            "required": [
              "amount"
            ]
          },
          "estimatedOutputAmount": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string"
              },
              "assetId": {}
            },
            "required": [
              "amount"
            ]
          },
          "totalEstimatedFee": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string"
              },
              "assetId": {}
            },
            "required": [
              "amount"
            ]
          },
          "totalEstimatedTime": {
            "type": "number",
            "description": "The total *estimated* time for executing the cross-border flow."
          },
          "steps": {
            "type": "object",
            "properties": {
              "stepType": {
                "type": "string",
                "enum": [
                  "ON_RAMP",
                  "VAULT_ACCOUNT",
                  "OFF_RAMP",
                  "FIAT_DESTINATION"
                ],
                "description": "- ON_RAMP : A service that allows for the exchange of fiat currencies for cryptocurrencies. An OnRamp input value will always be fiat and output value crypto asset.\n- VAULT_ACCOUNT : Fireblocks Vault account\n- OFF_RAMP : A service that allows for the exchange of cryptocurrencies for fiat. An OffRamp input value will always be a crypto asset and output value be fiat.\n- FIAT_DESTINATION : Fiat account\n"
              }
            },
            "additionalProperties": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "inputAmount": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "string"
                    },
                    "assetId": {}
                  },
                  "required": [
                    "amount"
                  ]
                },
                "outputAmount": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "string"
                    },
                    "assetId": {}
                  },
                  "required": [
                    "amount"
                  ]
                },
                "estimatedFeeAmount": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "string"
                    },
                    "assetId": {}
                  },
                  "required": [
                    "amount"
                  ]
                },
                "estimatedTime": {
                  "type": "number",
                  "description": "The estimated time for executing the step."
                },
                "isSignRequired": {
                  "type": "boolean",
                  "description": "Whether or not signing is required for executing the step."
                }
              },
              "required": [
                "accountId",
                "inputAmount",
                "outputAmount",
                "estimatedFeeAmount",
                "estimatedTime",
                "isSignRequired"
              ]
            }
          }
        },
        "required": [
          "flowId",
          "configId",
          "steps",
          "inputAmount",
          "estimatedOutputAmount",
          "totalEstimatedFee",
          "totalEstimatedTime",
          "conversionRate"
        ]
      },
      "description": "Create a new cross-border settlement flow.\n\nCreate a cross-border flow (based on a cross-border configuration) with an amount to transfer. \nThe assetId is defined by the cross-border configuration.\nCreating a flow triggers a calculation of the flow estimations, including FX rates, times, and fees based on the amount provided.\nCreating a cross-border flow will not execute the flow.\n\n**Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts.\nThese endpoints are currently in beta and might be subject to changes.\nIf you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "get",
      "path": "/payments/xb-settlements/flows/{flowId}",
      "name": "payments_xb_settlements_flows_getByFlowid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "flowId": {
              "type": "string",
              "description": "The cross-border settlement flow ID."
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "preview": {
            "type": "object",
            "properties": {
              "flowId": {
                "type": "string",
                "description": "The unique id for the cross-border flow."
              },
              "configId": {
                "type": "string",
                "format": "uuid",
                "description": "Cross Bodrder configuraion unique id"
              },
              "conversionRate": {
                "type": "string",
                "description": "The conversion rate received from the on-ramp or off-ramp."
              },
              "inputAmount": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string"
                  },
                  "assetId": {}
                },
                "required": [
                  "amount"
                ]
              },
              "estimatedOutputAmount": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string"
                  },
                  "assetId": {}
                },
                "required": [
                  "amount"
                ]
              },
              "totalEstimatedFee": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string"
                  },
                  "assetId": {}
                },
                "required": [
                  "amount"
                ]
              },
              "totalEstimatedTime": {
                "type": "number",
                "description": "The total *estimated* time for executing the cross-border flow."
              },
              "steps": {
                "type": "object",
                "properties": {
                  "stepType": {
                    "type": "string",
                    "enum": [
                      "ON_RAMP",
                      "VAULT_ACCOUNT",
                      "OFF_RAMP",
                      "FIAT_DESTINATION"
                    ],
                    "description": "- ON_RAMP : A service that allows for the exchange of fiat currencies for cryptocurrencies. An OnRamp input value will always be fiat and output value crypto asset.\n- VAULT_ACCOUNT : Fireblocks Vault account\n- OFF_RAMP : A service that allows for the exchange of cryptocurrencies for fiat. An OffRamp input value will always be a crypto asset and output value be fiat.\n- FIAT_DESTINATION : Fiat account\n"
                  }
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "type": "string"
                    },
                    "inputAmount": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "string"
                        },
                        "assetId": {}
                      },
                      "required": [
                        "amount"
                      ]
                    },
                    "outputAmount": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "string"
                        },
                        "assetId": {}
                      },
                      "required": [
                        "amount"
                      ]
                    },
                    "estimatedFeeAmount": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "string"
                        },
                        "assetId": {}
                      },
                      "required": [
                        "amount"
                      ]
                    },
                    "estimatedTime": {
                      "type": "number",
                      "description": "The estimated time for executing the step."
                    },
                    "isSignRequired": {
                      "type": "boolean",
                      "description": "Whether or not signing is required for executing the step."
                    }
                  },
                  "required": [
                    "accountId",
                    "inputAmount",
                    "outputAmount",
                    "estimatedFeeAmount",
                    "estimatedTime",
                    "isSignRequired"
                  ]
                }
              }
            },
            "required": [
              "flowId",
              "configId",
              "steps",
              "inputAmount",
              "estimatedOutputAmount",
              "totalEstimatedFee",
              "totalEstimatedTime",
              "conversionRate"
            ]
          },
          "execution": {
            "type": "object",
            "properties": {
              "flowId": {
                "type": "string",
                "description": "The unique id for the cross-border flow."
              },
              "configId": {
                "type": "string",
                "format": "uuid",
                "description": "Cross Bodrder configuraion unique id"
              },
              "inputAmount": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string"
                  },
                  "assetId": {}
                },
                "required": [
                  "amount"
                ]
              },
              "outputAmount": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string"
                  },
                  "assetId": {}
                },
                "required": [
                  "amount"
                ]
              },
              "totalFee": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string"
                  },
                  "assetId": {}
                },
                "required": [
                  "amount"
                ]
              },
              "initiatedAt": {
                "type": "number",
                "description": "The time the cross-border flow executed in epoch format."
              },
              "initiatedBy": {
                "description": "The id of the user which launched the flow",
                "type": "string"
              },
              "state": {
                "type": "string",
                "enum": [
                  "NOT_LAUNCHED",
                  "PROCESSING",
                  "COMPLETED",
                  "FAILED"
                ]
              },
              "steps": {
                "type": "object",
                "properties": {
                  "stepType": {
                    "type": "string",
                    "enum": [
                      "ON_RAMP",
                      "VAULT_ACCOUNT",
                      "OFF_RAMP",
                      "FIAT_DESTINATION"
                    ],
                    "description": "- ON_RAMP : A service that allows for the exchange of fiat currencies for cryptocurrencies. An OnRamp input value will always be fiat and output value crypto asset.\n- VAULT_ACCOUNT : Fireblocks Vault account\n- OFF_RAMP : A service that allows for the exchange of cryptocurrencies for fiat. An OffRamp input value will always be a crypto asset and output value be fiat.\n- FIAT_DESTINATION : Fiat account\n"
                  }
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "A unique id for the step execution"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "NOT_STARTED",
                        "PROCESSING",
                        "COMPLETED",
                        "FAILED"
                      ]
                    },
                    "inputAmount": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "string"
                        },
                        "assetId": {}
                      },
                      "required": [
                        "amount"
                      ]
                    },
                    "outputAmount": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "string"
                        },
                        "assetId": {}
                      },
                      "required": [
                        "amount"
                      ]
                    },
                    "fee": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "string"
                        },
                        "assetId": {}
                      },
                      "required": [
                        "amount"
                      ]
                    },
                    "startedAt": {
                      "type": "number",
                      "description": "The step execution start time in epoch format."
                    },
                    "completedAt": {
                      "type": "number",
                      "description": "The step execution end time in epoch format."
                    },
                    "isSignRequired": {
                      "type": "boolean",
                      "description": "Whether or not signing is required for executing the step."
                    }
                  },
                  "required": [
                    "id",
                    "accountId",
                    "status",
                    "inputAmount",
                    "isSignRequired"
                  ]
                }
              },
              "selectedConversionSlippage": {
                "type": "object",
                "description": "Indicates the selected slippage used during the flow since override logic may have taken place.",
                "properties": {
                  "basisPoints": {
                    "type": "number"
                  },
                  "reason": {
                    "type": "string",
                    "enum": [
                      "DEFAULT",
                      "CONFIG",
                      "FLOW"
                    ]
                  }
                },
                "required": [
                  "basisPoints",
                  "reason"
                ]
              }
            },
            "required": [
              "flowId",
              "configId",
              "steps",
              "inputAmount",
              "outputAmount",
              "totalFee",
              "initiatedAt",
              "initiatedBy",
              "state",
              "selectedConversionSlippage"
            ]
          }
        }
      },
      "description": "Get specific cross-border settlement flow details.\n\nGets details for a specific cross-border settlement flow\n**Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts.\nThese endpoints are currently in beta and might be subject to changes.\nIf you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "post",
      "path": "/payments/xb-settlements/flows/{flowId}/actions/execute",
      "name": "payments_xb_settlements_flows_actions_execute_postByFlowid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "flowId": {
              "type": "string",
              "description": "The cross-border settlement flow ID."
            },
            "body": {
              "type": "object",
              "properties": {
                "conversionSlippageBasisPoints": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 10000,
                  "description": "Slippage configuarion in basis points, the default value is 10%\n"
                }
              }
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "flowId": {
            "type": "string",
            "description": "The unique id for the cross-border flow."
          },
          "configId": {
            "type": "string",
            "format": "uuid",
            "description": "Cross Bodrder configuraion unique id"
          },
          "inputAmount": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string"
              },
              "assetId": {}
            },
            "required": [
              "amount"
            ]
          },
          "outputAmount": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string"
              },
              "assetId": {}
            },
            "required": [
              "amount"
            ]
          },
          "totalFee": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string"
              },
              "assetId": {}
            },
            "required": [
              "amount"
            ]
          },
          "initiatedAt": {
            "type": "number",
            "description": "The time the cross-border flow executed in epoch format."
          },
          "initiatedBy": {
            "description": "The id of the user which launched the flow",
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "NOT_LAUNCHED",
              "PROCESSING",
              "COMPLETED",
              "FAILED"
            ]
          },
          "steps": {
            "type": "object",
            "properties": {
              "stepType": {
                "type": "string",
                "enum": [
                  "ON_RAMP",
                  "VAULT_ACCOUNT",
                  "OFF_RAMP",
                  "FIAT_DESTINATION"
                ],
                "description": "- ON_RAMP : A service that allows for the exchange of fiat currencies for cryptocurrencies. An OnRamp input value will always be fiat and output value crypto asset.\n- VAULT_ACCOUNT : Fireblocks Vault account\n- OFF_RAMP : A service that allows for the exchange of cryptocurrencies for fiat. An OffRamp input value will always be a crypto asset and output value be fiat.\n- FIAT_DESTINATION : Fiat account\n"
              }
            },
            "additionalProperties": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique id for the step execution"
                },
                "accountId": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "NOT_STARTED",
                    "PROCESSING",
                    "COMPLETED",
                    "FAILED"
                  ]
                },
                "inputAmount": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "string"
                    },
                    "assetId": {}
                  },
                  "required": [
                    "amount"
                  ]
                },
                "outputAmount": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "string"
                    },
                    "assetId": {}
                  },
                  "required": [
                    "amount"
                  ]
                },
                "fee": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "string"
                    },
                    "assetId": {}
                  },
                  "required": [
                    "amount"
                  ]
                },
                "startedAt": {
                  "type": "number",
                  "description": "The step execution start time in epoch format."
                },
                "completedAt": {
                  "type": "number",
                  "description": "The step execution end time in epoch format."
                },
                "isSignRequired": {
                  "type": "boolean",
                  "description": "Whether or not signing is required for executing the step."
                }
              },
              "required": [
                "id",
                "accountId",
                "status",
                "inputAmount",
                "isSignRequired"
              ]
            }
          },
          "selectedConversionSlippage": {
            "type": "object",
            "description": "Indicates the selected slippage used during the flow since override logic may have taken place.",
            "properties": {
              "basisPoints": {
                "type": "number"
              },
              "reason": {
                "type": "string",
                "enum": [
                  "DEFAULT",
                  "CONFIG",
                  "FLOW"
                ]
              }
            },
            "required": [
              "basisPoints",
              "reason"
            ]
          }
        },
        "required": [
          "flowId",
          "configId",
          "steps",
          "inputAmount",
          "outputAmount",
          "totalFee",
          "initiatedAt",
          "initiatedBy",
          "state",
          "selectedConversionSlippage"
        ]
      },
      "description": "Execute cross-border settlement flow.\n\nSend a payment flow with 'flowId' for execution.\nIf a differet slippage configuraion is needed for this execution than configured in the flow configuration, the request body must define the desired slippage configuration for this execution.\n\n**Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts.\nThese endpoints are currently in beta and might be subject to changes.\nIf you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "post",
      "path": "/payments/payout",
      "name": "payments_payout_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "paymentAccount": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "VAULT_ACCOUNT",
                        "EXCHANGE_ACCOUNT",
                        "FIAT_ACCOUNT"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ]
                },
                "instructionSet": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "payeeAccount": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "VAULT_ACCOUNT",
                              "EXCHANGE_ACCOUNT",
                              "INTERNAL_WALLET",
                              "EXTERNAL_WALLET",
                              "NETWORK_CONNECTION",
                              "FIAT_ACCOUNT"
                            ],
                            "description": "- VAULT_ACCOUNT  \ta native Fireblocks vault account\n- EXCHANGE_ACCOUNT \ta third-party exchange account\n- INTERNAL_WALLET \ta whitelisted address marked as internal to the workspace/organization\n- EXTERNAL_WALLET\ta whitelisted address marked as external\n- NETWORK_CONNECTION\ta member of the Fireblocks network\n- FIAT_ACCOUNT\ta third-party account of a fiat bank (Signature, BCB, etc)\n"
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ]
                      },
                      "amount": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "string"
                          },
                          "assetId": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "amount",
                          "assetId"
                        ]
                      }
                    },
                    "required": [
                      "amount",
                      "payeeAccount"
                    ]
                  }
                }
              },
              "required": [
                "paymentAccount",
                "instructionSet"
              ]
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "payoutId": {
            "type": "string"
          },
          "paymentAccount": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "VAULT_ACCOUNT",
                  "EXCHANGE_ACCOUNT",
                  "FIAT_ACCOUNT"
                ]
              }
            }
          },
          "createdAt": {
            "type": "number"
          },
          "state": {
            "type": "string",
            "enum": [
              "CREATED",
              "FILE_FOUND",
              "REQUESTED",
              "TRANSLATED",
              "PROCESSING",
              "SUBMITTED",
              "FINALIZED",
              "INSUFFICIENT_BALANCE",
              "FAILED"
            ],
            "description": "- CREATED - payout instruction set created with all its details\n- FILE_FOUND - new file found in the FTP\n- REQUESTED - payout requested with all its details\n- TRANSLATED - payout instruction account IDs identified and translated\n- PROCESSING - payout instruction set executed and is processing\n- SUBMITTED - transactions submitted for payout instructions\n- FINALIZED - payout finished processing, all transactions processed successfully\n- INSUFFICIENT_BALANCE - insufficient balance in the payment account (can be a temporary state)\n- FAILED - one or more of the payout instructions failed\n"
          },
          "status": {
            "type": "string",
            "enum": [
              "REGISTERED",
              "VERIFYING",
              "IN_PROGRESS",
              "DONE",
              "INSUFFICIENT_BALANCE",
              "FAILED"
            ],
            "description": "- REQUESTED\tpayout requested with all its details\n- VERIFIED\tpayout instruction set details were verified\n- PROCESSING\tpayout instruction set executed and is processing\n- FINALIZED\tpayout done (all payout instructions completed successfully)\n- INSUFFICIENT_BALANCE\tinsufficient balance in the payment account (can be a temporary state)\n- FAILED\tone or more of the payout instructions failed\n"
          },
          "reasonOfFailure": {
            "type": "string",
            "description": "<ul> \n<li> INSUFFICIENT_BALANCE</li>\n<li> SOURCE_TRANSLATION</li>\n<li> SOURCE_NOT_UNIQUE</li>\n<li> SOURCE_NOT_FOUND</li>\n<li> SOURCE_TYPE_NOT_SUPPORTED</li>\n<li> EMPTY_SOURCE</li>\n<li> DESTINATION_TRANSLATION</li>\n<li> DESTINATION_NOT_UNIQUE</li>\n<li> DESTINATION_NOT_FOUND</li>\n<li> EMPTY_DESTINATION</li>\n<li> PARSING </li>\n<li> UNKNOWN</li>\n<li> FIREBLOCKS_CLIENT</li>\n<li> TRANSACTION_SUBMISSION</li>\n</ul>\n"
          },
          "initMethod": {
            "type": "string",
            "enum": [
              "FILE",
              "API"
            ]
          },
          "instructionSet": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "payeeAccount": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "VAULT_ACCOUNT",
                        "EXCHANGE_ACCOUNT",
                        "INTERNAL_WALLET",
                        "EXTERNAL_WALLET",
                        "NETWORK_CONNECTION",
                        "FIAT_ACCOUNT"
                      ],
                      "description": "- VAULT_ACCOUNT  \ta native Fireblocks vault account\n- EXCHANGE_ACCOUNT \ta third-party exchange account\n- INTERNAL_WALLET \ta whitelisted address marked as internal to the workspace/organization\n- EXTERNAL_WALLET\ta whitelisted address marked as external\n- NETWORK_CONNECTION\ta member of the Fireblocks network\n- FIAT_ACCOUNT\ta third-party account of a fiat bank (Signature, BCB, etc)\n"
                    }
                  }
                },
                "amount": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "string"
                    },
                    "assetId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "amount",
                    "assetId"
                  ]
                },
                "state": {
                  "type": "string",
                  "enum": [
                    "NOT_STARTED",
                    "TRANSACTION_SENT",
                    "COMPLETED",
                    "FAILED",
                    "TRANSLATION_ERROR",
                    "SKIPPED"
                  ],
                  "description": "- NOT_STARTED\t- waiting to start\n- TRANSACTION_SENT - an underlying transaction was sent\n- COMPLETED\t- completed successfully\n- FAILED - failed\n- TRANSLATION_ERROR -lookup of the destination failed (due to changes in the underlying whitelisted external wallet or similar)\n- SKIPPED- no transaction(s) created for this instruction\n"
                },
                "transactions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string",
                        "enum": [
                          "SUBMITTED",
                          "QUEUED",
                          "PENDING_AUTHORIZATION",
                          "PENDING_SIGNATURE",
                          "BROADCASTING",
                          "PENDING_3RD_PARTY_MANUAL_APPROVAL",
                          "PENDING_3RD_PARTY",
                          "PENDING",
                          "CONFIRMING",
                          "CONFIRMED",
                          "COMPLETED",
                          "PARTIALLY_COMPLETED",
                          "PENDING_AML_SCREENING",
                          "CANCELLING",
                          "CANCELLED",
                          "REJECTED",
                          "BLOCKED",
                          "FAILED",
                          "TIMEOUT"
                        ]
                      },
                      "timestamp": {
                        "type": "number",
                        "format": "date-time"
                      },
                      "instructionId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "state"
                    ]
                  }
                }
              },
              "required": [
                "amount",
                "payeeAccount",
                "state",
                "transactions"
              ]
            }
          },
          "reportUrl": {
            "type": "string"
          }
        },
        "required": [
          "payoutId",
          "createdAt",
          "state",
          "status",
          "paymentAccount",
          "instructionSet"
        ]
      },
      "description": "Create a payout instruction set.\n\n**Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br>\n</br>These endpoints are currently in beta and might be subject to changes.</br>\n</br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br>\n</br> <b u>Create a payout instruction set.</b> </u></br>\nA payout instruction set is a set of instructions for distributing payments from a single payment account to a list of payee accounts. </br>\nThe instruction set defines: </br>\n<ul>\n<li>the payment account and its account type (vault, exchange, or fiat). </li>\n<li>the account type (vault account, exchange account, whitelisted address, network connection, fiat account, or merchant account), the amount, and the asset of payment for each payee account.</li>\n</ul>\n"
    },
    {
      "method": "post",
      "path": "/payments/payout/{payoutId}/actions/execute",
      "name": "payments_payout_actions_execute_postByPayoutid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "payoutId": {
              "type": "string",
              "description": "the payout id received from the creation of the payout instruction set"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "payoutId": {
            "type": "string"
          }
        },
        "required": [
          "payoutId"
        ]
      },
      "description": "Execute a payout instruction set.\n\n**Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br>\n</br>These endpoints are currently in beta and might be subject to changes.</br>\n</br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br>\n</br><b u>Execute a payout instruction set.</b> </u> </br>\n</br>The instruction set will be verified and executed.</br>\n<b><u>Source locking</br></b> </u>\nIf you are executing a payout instruction set from a payment account with an already active payout the active payout will complete before the new payout instruction set can be executed. </br>\nYou cannot execute the same payout instruction set more than once.\n"
    },
    {
      "method": "get",
      "path": "/payments/payout/{payoutId}",
      "name": "payments_payout_getByPayoutid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "payoutId": {
              "type": "string",
              "description": "the payout id received from the creation of the payout instruction set"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "payoutId": {
            "type": "string"
          },
          "paymentAccount": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "VAULT_ACCOUNT",
                  "EXCHANGE_ACCOUNT",
                  "FIAT_ACCOUNT"
                ]
              }
            }
          },
          "createdAt": {
            "type": "number"
          },
          "state": {
            "type": "string",
            "enum": [
              "CREATED",
              "FILE_FOUND",
              "REQUESTED",
              "TRANSLATED",
              "PROCESSING",
              "SUBMITTED",
              "FINALIZED",
              "INSUFFICIENT_BALANCE",
              "FAILED"
            ],
            "description": "- CREATED - payout instruction set created with all its details\n- FILE_FOUND - new file found in the FTP\n- REQUESTED - payout requested with all its details\n- TRANSLATED - payout instruction account IDs identified and translated\n- PROCESSING - payout instruction set executed and is processing\n- SUBMITTED - transactions submitted for payout instructions\n- FINALIZED - payout finished processing, all transactions processed successfully\n- INSUFFICIENT_BALANCE - insufficient balance in the payment account (can be a temporary state)\n- FAILED - one or more of the payout instructions failed\n"
          },
          "status": {
            "type": "string",
            "enum": [
              "REGISTERED",
              "VERIFYING",
              "IN_PROGRESS",
              "DONE",
              "INSUFFICIENT_BALANCE",
              "FAILED"
            ],
            "description": "- REQUESTED\tpayout requested with all its details\n- VERIFIED\tpayout instruction set details were verified\n- PROCESSING\tpayout instruction set executed and is processing\n- FINALIZED\tpayout done (all payout instructions completed successfully)\n- INSUFFICIENT_BALANCE\tinsufficient balance in the payment account (can be a temporary state)\n- FAILED\tone or more of the payout instructions failed\n"
          },
          "reasonOfFailure": {
            "type": "string",
            "description": "<ul> \n<li> INSUFFICIENT_BALANCE</li>\n<li> SOURCE_TRANSLATION</li>\n<li> SOURCE_NOT_UNIQUE</li>\n<li> SOURCE_NOT_FOUND</li>\n<li> SOURCE_TYPE_NOT_SUPPORTED</li>\n<li> EMPTY_SOURCE</li>\n<li> DESTINATION_TRANSLATION</li>\n<li> DESTINATION_NOT_UNIQUE</li>\n<li> DESTINATION_NOT_FOUND</li>\n<li> EMPTY_DESTINATION</li>\n<li> PARSING </li>\n<li> UNKNOWN</li>\n<li> FIREBLOCKS_CLIENT</li>\n<li> TRANSACTION_SUBMISSION</li>\n</ul>\n"
          },
          "initMethod": {
            "type": "string",
            "enum": [
              "FILE",
              "API"
            ]
          },
          "instructionSet": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "payeeAccount": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "VAULT_ACCOUNT",
                        "EXCHANGE_ACCOUNT",
                        "INTERNAL_WALLET",
                        "EXTERNAL_WALLET",
                        "NETWORK_CONNECTION",
                        "FIAT_ACCOUNT"
                      ],
                      "description": "- VAULT_ACCOUNT  \ta native Fireblocks vault account\n- EXCHANGE_ACCOUNT \ta third-party exchange account\n- INTERNAL_WALLET \ta whitelisted address marked as internal to the workspace/organization\n- EXTERNAL_WALLET\ta whitelisted address marked as external\n- NETWORK_CONNECTION\ta member of the Fireblocks network\n- FIAT_ACCOUNT\ta third-party account of a fiat bank (Signature, BCB, etc)\n"
                    }
                  }
                },
                "amount": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "string"
                    },
                    "assetId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "amount",
                    "assetId"
                  ]
                },
                "state": {
                  "type": "string",
                  "enum": [
                    "NOT_STARTED",
                    "TRANSACTION_SENT",
                    "COMPLETED",
                    "FAILED",
                    "TRANSLATION_ERROR",
                    "SKIPPED"
                  ],
                  "description": "- NOT_STARTED\t- waiting to start\n- TRANSACTION_SENT - an underlying transaction was sent\n- COMPLETED\t- completed successfully\n- FAILED - failed\n- TRANSLATION_ERROR -lookup of the destination failed (due to changes in the underlying whitelisted external wallet or similar)\n- SKIPPED- no transaction(s) created for this instruction\n"
                },
                "transactions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string",
                        "enum": [
                          "SUBMITTED",
                          "QUEUED",
                          "PENDING_AUTHORIZATION",
                          "PENDING_SIGNATURE",
                          "BROADCASTING",
                          "PENDING_3RD_PARTY_MANUAL_APPROVAL",
                          "PENDING_3RD_PARTY",
                          "PENDING",
                          "CONFIRMING",
                          "CONFIRMED",
                          "COMPLETED",
                          "PARTIALLY_COMPLETED",
                          "PENDING_AML_SCREENING",
                          "CANCELLING",
                          "CANCELLED",
                          "REJECTED",
                          "BLOCKED",
                          "FAILED",
                          "TIMEOUT"
                        ]
                      },
                      "timestamp": {
                        "type": "number",
                        "format": "date-time"
                      },
                      "instructionId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "state"
                    ]
                  }
                }
              },
              "required": [
                "amount",
                "payeeAccount",
                "state",
                "transactions"
              ]
            }
          },
          "reportUrl": {
            "type": "string"
          }
        },
        "required": [
          "payoutId",
          "createdAt",
          "state",
          "status",
          "paymentAccount",
          "instructionSet"
        ]
      },
      "description": "Get the status of a payout instruction set.\n\n**Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br>\n</br>These endpoints are currently in beta and might be subject to changes.</br>\n</br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br>\n"
    },
    {
      "method": "get",
      "path": "/gas_station",
      "name": "gas_station_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "object"
          },
          "configuration": {
            "type": "object",
            "properties": {
              "gasThreshold": {
                "type": "string"
              },
              "gasCap": {
                "type": "string"
              },
              "maxGasPrice": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "low",
          "medium",
          "high"
        ]
      },
      "description": "Get gas station settings.\n\nReturns gas station settings and ETH balance."
    },
    {
      "method": "get",
      "path": "/gas_station/{assetId}",
      "name": "gas_station_getByAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "object"
          },
          "configuration": {
            "type": "object",
            "properties": {
              "gasThreshold": {
                "type": "string"
              },
              "gasCap": {
                "type": "string"
              },
              "maxGasPrice": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "low",
          "medium",
          "high"
        ]
      },
      "description": "Get gas station settings by asset.\n\nReturns gas station settings and balances for a requested asset."
    },
    {
      "method": "put",
      "path": "/gas_station/configuration",
      "name": "gas_station_configuration_put",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "gasThreshold": {
                  "type": "string"
                },
                "gasCap": {
                  "type": "string"
                },
                "maxGasPrice": {
                  "type": "string"
                }
              }
            }
          }
        }
      ],
      "description": "Edit gas station settings.\n\nConfigures gas station settings for ETH."
    },
    {
      "method": "put",
      "path": "/gas_station/configuration/{assetId}",
      "name": "gas_station_configuration_putByAssetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string",
              "x-fb-entity": "asset",
              "description": "The ID of the asset"
            },
            "body": {
              "type": "object",
              "properties": {
                "gasThreshold": {
                  "type": "string"
                },
                "gasCap": {
                  "type": "string"
                },
                "maxGasPrice": {
                  "type": "string"
                }
              }
            }
          }
        }
      ],
      "description": "Edit gas station settings for an asset.\n\nConfigures gas station settings for a requested asset."
    },
    {
      "method": "get",
      "path": "/users",
      "name": "users_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "role": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "description": "List users.\n\nList all users for the workspace.\n\nPlease note that this endpoint is available only for API keys with Admin permissions.\n"
    },
    {
      "method": "get",
      "path": "/audits",
      "name": "audits_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {},
              "required": []
            }
          }
        }
      ],
      "description": "Get audit logs"
    },
    {
      "method": "post",
      "path": "/off_exchange/add",
      "name": "off_exchange_add_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "transactionRequest": {
                  "type": "object",
                  "properties": {
                    "operation": {
                      "type": "string",
                      "enum": [
                        "TRANSFER",
                        "BURN",
                        "CONTRACT_CALL",
                        "MINT",
                        "RAW",
                        "TYPED_MESSAGE"
                      ],
                      "description": "* `TRANSFER` - The default value for an operation. Transfers funds from one account to another. UTXO blockchains allow multi-input and multi-output transfers. All other blockchains allow transfers with one source address and one destination address.\n* `MINT` - Mints new tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `BURN` - Burns tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `CONTRACT_CALL` - Calls a smart contract method for web3 operations on any EVM blockchain. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n* `TYPED_MESSAGE` - An off-chain message in either Ethereum Personal Message or EIP712 format. Use it to sign specific readable messages that are not actual transactions. [Learn more about typed messages](https://developers.fireblocks.com/docs/typed-message-signing).\n* `RAW` - An off-chain message with no predefined format. Use it to sign any message with your private key, including protocols such as blockchains and custom transaction types that are not natively supported by Fireblocks. [Learn more about raw signing transactions.](https://developers.fireblocks.com/docs/raw-message-signing)\n"
                    },
                    "note": {
                      "type": "string",
                      "description": "Custom note, not sent to the blockchain, to describe the transaction at your Fireblocks workspace.",
                      "example": "Ticket 123"
                    },
                    "externalTxId": {
                      "type": "string",
                      "description": "An optional but highly recommended parameter. Fireblocks will reject future transactions with same ID. \n \nYou should set this to a unique ID representing the transaction, to avoid submitting the same transaction twice. This helps with cases where submitting the transaction responds with an error code due to Internet interruptions, but the transaction was actually sent and processed. To validate whether a transaction has been processed, [Find a specific transaction by external transaction ID](https://developers.fireblocks.com/reference/get_transactions-external-tx-id-externaltxid).\n \nThere is no specific format required for this parameter.",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "assetId": {
                      "type": "string",
                      "description": "The ID of the asset to transfer, for `TRANSFER`, `MINT` or `BURN` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)",
                      "x-fb-entity": "asset",
                      "example": "ETH"
                    },
                    "source": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "VAULT_ACCOUNT",
                            "EXCHANGE_ACCOUNT",
                            "INTERNAL_WALLET",
                            "EXTERNAL_WALLET",
                            "NETWORK_CONNECTION",
                            "FIAT_ACCOUNT",
                            "COMPOUND",
                            "GAS_STATION",
                            "ONE_TIME_ADDRESS",
                            "UNKNOWN",
                            "END_USER_WALLET"
                          ]
                        },
                        "subType": {
                          "type": "string",
                          "enum": [
                            "BINANCE",
                            "BINANCEUS",
                            "BITFINEX",
                            "BITHUMB",
                            "BITMEX",
                            "BITSO",
                            "BITSTAMP",
                            "BITTREX",
                            "BLINC",
                            "BYBIT",
                            "CIRCLE",
                            "COINBASEEXCHANGE",
                            "COINBASEPRO",
                            "COINMETRO",
                            "COINSPRO",
                            "CRYPTOCOM",
                            "DERIBIT",
                            "GEMINI",
                            "HITBTC",
                            "HUOBI",
                            "INDEPENDENTRESERVE",
                            "KORBIT",
                            "KRAKEN",
                            "KRAKENINTL",
                            "KUCOIN",
                            "LIQUID",
                            "OKCOIN",
                            "OKEX",
                            "PAXOS",
                            "POLONIEX",
                            "External",
                            "Internal"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "walletId": {
                          "type": "string",
                          "format": "uuid"
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "destination": {},
                    "destinations": {
                      "type": "array",
                      "description": "For UTXO based blockchains, you can send a single transaction to multiple destinations.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "string"
                          },
                          "destination": {}
                        }
                      }
                    },
                    "amount": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)",
                          "example": "0.02"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)",
                          "example": 0.02
                        }
                      ],
                      "description": "For `TRANSFER` operations, the requested amount to transfer, in the asset’s unit. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                    },
                    "treatAsGrossAmount": {
                      "type": "boolean",
                      "description": "\"When set to `true`, the fee will be deducted from the requested amount.\"\n\n**Note**: This parameter can only be considered if a transaction’s asset is a base asset, such as ETH or MATIC. If the asset can’t be used for transaction fees, like USDC, this parameter is ignored and the fee is deducted from the relevant base asset wallet in the source account."
                    },
                    "forceSweep": {
                      "type": "boolean",
                      "description": "For Polkadot, Kusama and Westend transactions only. When set to true, Fireblocks will empty the asset wallet.\n\n   **Note:** If set to true when the source account is exactly 1 DOT, the transaction will fail. Any amount more or less than 1 DOT succeeds. This is a Polkadot blockchain limitation."
                    },
                    "feeLevel": {
                      "type": "string",
                      "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH"
                      ],
                      "description": "For UTXO or EVM-based blockchains only. Defines the blockchain fee level which will be payed for the transaction. Alternatively, specific fee estimation parameters exist below."
                    },
                    "fee": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)"
                        }
                      ],
                      "description": "For UTXO-based blockchains, the fee per bytes in the asset’s smallest unit (Satoshi, Latoshi, etc.).  For Ripple, the fee for the transaction. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                    },
                    "priorityFee": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)",
                          "example": "2"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)",
                          "example": 2
                        }
                      ],
                      "description": "For Ethereum-based blockchains only, the fee for EIP-1559 transaction pricing mechanism. Value is in Gwei.  Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                    },
                    "failOnLowFee": {
                      "type": "boolean",
                      "description": "When set to `true`, in case the current `MEDIUM` fee level is higher than the one specified in the transaction, the transaction will fail to avoid getting stuck with no confirmations."
                    },
                    "maxFee": {
                      "description": "The maximum fee (gas price or fee per byte) that should be payed for the transaction.  In case the current value of the requested `feeLevel` is higher than this requested maximum fee.  Represented by a numeric string for accurate precision.",
                      "type": "string",
                      "example": "120"
                    },
                    "gasLimit": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)",
                          "example": "21000"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)",
                          "example": 21000
                        }
                      ],
                      "description": "For EVM-based blockchains only. Units of gas required to process the transaction. Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                    },
                    "gasPrice": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)"
                        }
                      ],
                      "description": "For non-EIP-1559, EVM-based transactions. Price per gas unit (in Ethereum this is specified in Gwei).  Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision.  Although a number input exists, it is deprecated."
                    },
                    "networkFee": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)"
                        }
                      ],
                      "description": "For EVM-based blockchains only. The total transaction fee in the blockchain’s largest unit. Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated. - The transaction blockchain fee.\n- For Ethereum, you can't pass gasPrice, gasLimit and networkFee all together.\n- A numeric value representation is required."
                    },
                    "replaceTxByHash": {
                      "type": "string",
                      "description": "For EVM-based blockchains only. In case a transaction is stuck, specify the hash of the stuck transaction to replace it by this transaction with a higher fee, or to replace it with this transaction with a zero fee and drop it from the blockchain.",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "extraParameters": {
                      "type": "object",
                      "properties": {},
                      "description": "Additional protocol / operation specific key-value parameters:\n\nFor UTXO-based blockchain input selection, add the key `inputsSelection` with the value set the [input selection structure.](https://developers.fireblocks.com/reference/transaction-objects#inputsselection) The inputs can be retrieved from the [Retrieve Unspent Inputs endpoint.](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid-assetid-unspent-inputs)\n\nFor `RAW` operations, add the key `rawMessageData` with the value set to the [raw message data structure.](https://developers.fireblocks.com/reference/raw-signing-objects#rawmessagedata)\n\nFor `CONTRACT_CALL` operations, add the key `contractCallData` with the value set to the Ethereum smart contract Application Binary Interface (ABI) payload. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n"
                    },
                    "customerRefId": {
                      "type": "string",
                      "description": "The ID for AML providers to associate the owner of funds with transactions.",
                      "example": "abcdef"
                    },
                    "autoStaking": {
                      "type": "boolean",
                      "description": "This feature is no longer supported."
                    },
                    "networkStaking": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)"
                        }
                      ],
                      "description": "This feature is no longer supported."
                    },
                    "cpuStaking": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)"
                        }
                      ],
                      "description": "This feature is no longer supported."
                    }
                  }
                },
                "isSrcCollateral": {
                  "type": "boolean",
                  "description": "optional"
                }
              }
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the transaction."
          },
          "status": {
            "type": "string",
            "description": "The primary status of the transaction. For details, see [Primary transaction statuses.] (https://developers.fireblocks.com/reference/primary-transaction-statuses)"
          },
          "systemMessages": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "WARN",
                  "BLOCK"
                ]
              },
              "message": {
                "type": "string",
                "description": "A response from Fireblocks that communicates a message about the health of the process being performed. If this object is returned with data, you should expect potential delays or incomplete transaction statuses.",
                "example": "Slow transaction processing. Outgoing transactions might be stuck."
              }
            }
          }
        }
      },
      "description": "add collateral, create deposit request"
    },
    {
      "method": "post",
      "path": "/off_exchange/remove",
      "name": "off_exchange_remove_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "transactionRequest": {
                  "type": "object",
                  "properties": {
                    "operation": {
                      "type": "string",
                      "enum": [
                        "TRANSFER",
                        "BURN",
                        "CONTRACT_CALL",
                        "MINT",
                        "RAW",
                        "TYPED_MESSAGE"
                      ],
                      "description": "* `TRANSFER` - The default value for an operation. Transfers funds from one account to another. UTXO blockchains allow multi-input and multi-output transfers. All other blockchains allow transfers with one source address and one destination address.\n* `MINT` - Mints new tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `BURN` - Burns tokens. Supported for Stellar, Ripple and EVM-based blockchains.\n* `CONTRACT_CALL` - Calls a smart contract method for web3 operations on any EVM blockchain. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n* `TYPED_MESSAGE` - An off-chain message in either Ethereum Personal Message or EIP712 format. Use it to sign specific readable messages that are not actual transactions. [Learn more about typed messages](https://developers.fireblocks.com/docs/typed-message-signing).\n* `RAW` - An off-chain message with no predefined format. Use it to sign any message with your private key, including protocols such as blockchains and custom transaction types that are not natively supported by Fireblocks. [Learn more about raw signing transactions.](https://developers.fireblocks.com/docs/raw-message-signing)\n"
                    },
                    "note": {
                      "type": "string",
                      "description": "Custom note, not sent to the blockchain, to describe the transaction at your Fireblocks workspace.",
                      "example": "Ticket 123"
                    },
                    "externalTxId": {
                      "type": "string",
                      "description": "An optional but highly recommended parameter. Fireblocks will reject future transactions with same ID. \n \nYou should set this to a unique ID representing the transaction, to avoid submitting the same transaction twice. This helps with cases where submitting the transaction responds with an error code due to Internet interruptions, but the transaction was actually sent and processed. To validate whether a transaction has been processed, [Find a specific transaction by external transaction ID](https://developers.fireblocks.com/reference/get_transactions-external-tx-id-externaltxid).\n \nThere is no specific format required for this parameter.",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "assetId": {
                      "type": "string",
                      "description": "The ID of the asset to transfer, for `TRANSFER`, `MINT` or `BURN` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)",
                      "x-fb-entity": "asset",
                      "example": "ETH"
                    },
                    "source": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "VAULT_ACCOUNT",
                            "EXCHANGE_ACCOUNT",
                            "INTERNAL_WALLET",
                            "EXTERNAL_WALLET",
                            "NETWORK_CONNECTION",
                            "FIAT_ACCOUNT",
                            "COMPOUND",
                            "GAS_STATION",
                            "ONE_TIME_ADDRESS",
                            "UNKNOWN",
                            "END_USER_WALLET"
                          ]
                        },
                        "subType": {
                          "type": "string",
                          "enum": [
                            "BINANCE",
                            "BINANCEUS",
                            "BITFINEX",
                            "BITHUMB",
                            "BITMEX",
                            "BITSO",
                            "BITSTAMP",
                            "BITTREX",
                            "BLINC",
                            "BYBIT",
                            "CIRCLE",
                            "COINBASEEXCHANGE",
                            "COINBASEPRO",
                            "COINMETRO",
                            "COINSPRO",
                            "CRYPTOCOM",
                            "DERIBIT",
                            "GEMINI",
                            "HITBTC",
                            "HUOBI",
                            "INDEPENDENTRESERVE",
                            "KORBIT",
                            "KRAKEN",
                            "KRAKENINTL",
                            "KUCOIN",
                            "LIQUID",
                            "OKCOIN",
                            "OKEX",
                            "PAXOS",
                            "POLONIEX",
                            "External",
                            "Internal"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "walletId": {
                          "type": "string",
                          "format": "uuid"
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "destination": {},
                    "destinations": {
                      "type": "array",
                      "description": "For UTXO based blockchains, you can send a single transaction to multiple destinations.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "string"
                          },
                          "destination": {}
                        }
                      }
                    },
                    "amount": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)",
                          "example": "0.02"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)",
                          "example": 0.02
                        }
                      ],
                      "description": "For `TRANSFER` operations, the requested amount to transfer, in the asset’s unit. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                    },
                    "treatAsGrossAmount": {
                      "type": "boolean",
                      "description": "\"When set to `true`, the fee will be deducted from the requested amount.\"\n\n**Note**: This parameter can only be considered if a transaction’s asset is a base asset, such as ETH or MATIC. If the asset can’t be used for transaction fees, like USDC, this parameter is ignored and the fee is deducted from the relevant base asset wallet in the source account."
                    },
                    "forceSweep": {
                      "type": "boolean",
                      "description": "For Polkadot, Kusama and Westend transactions only. When set to true, Fireblocks will empty the asset wallet.\n\n   **Note:** If set to true when the source account is exactly 1 DOT, the transaction will fail. Any amount more or less than 1 DOT succeeds. This is a Polkadot blockchain limitation."
                    },
                    "feeLevel": {
                      "type": "string",
                      "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH"
                      ],
                      "description": "For UTXO or EVM-based blockchains only. Defines the blockchain fee level which will be payed for the transaction. Alternatively, specific fee estimation parameters exist below."
                    },
                    "fee": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)"
                        }
                      ],
                      "description": "For UTXO-based blockchains, the fee per bytes in the asset’s smallest unit (Satoshi, Latoshi, etc.).  For Ripple, the fee for the transaction. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                    },
                    "priorityFee": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)",
                          "example": "2"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)",
                          "example": 2
                        }
                      ],
                      "description": "For Ethereum-based blockchains only, the fee for EIP-1559 transaction pricing mechanism. Value is in Gwei.  Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                    },
                    "failOnLowFee": {
                      "type": "boolean",
                      "description": "When set to `true`, in case the current `MEDIUM` fee level is higher than the one specified in the transaction, the transaction will fail to avoid getting stuck with no confirmations."
                    },
                    "maxFee": {
                      "description": "The maximum fee (gas price or fee per byte) that should be payed for the transaction.  In case the current value of the requested `feeLevel` is higher than this requested maximum fee.  Represented by a numeric string for accurate precision.",
                      "type": "string",
                      "example": "120"
                    },
                    "gasLimit": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)",
                          "example": "21000"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)",
                          "example": 21000
                        }
                      ],
                      "description": "For EVM-based blockchains only. Units of gas required to process the transaction. Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated."
                    },
                    "gasPrice": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)"
                        }
                      ],
                      "description": "For non-EIP-1559, EVM-based transactions. Price per gas unit (in Ethereum this is specified in Gwei).  Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision.  Although a number input exists, it is deprecated."
                    },
                    "networkFee": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)"
                        }
                      ],
                      "description": "For EVM-based blockchains only. The total transaction fee in the blockchain’s largest unit. Note: Only two of the three arguments can be specified in a single transaction: `gasLimit`, `gasPrice` and `networkFee`. Fireblocks recommends using a numeric string for accurate precision. Although a number input exists, it is deprecated. - The transaction blockchain fee.\n- For Ethereum, you can't pass gasPrice, gasLimit and networkFee all together.\n- A numeric value representation is required."
                    },
                    "replaceTxByHash": {
                      "type": "string",
                      "description": "For EVM-based blockchains only. In case a transaction is stuck, specify the hash of the stuck transaction to replace it by this transaction with a higher fee, or to replace it with this transaction with a zero fee and drop it from the blockchain.",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "extraParameters": {
                      "type": "object",
                      "properties": {},
                      "description": "Additional protocol / operation specific key-value parameters:\n\nFor UTXO-based blockchain input selection, add the key `inputsSelection` with the value set the [input selection structure.](https://developers.fireblocks.com/reference/transaction-objects#inputsselection) The inputs can be retrieved from the [Retrieve Unspent Inputs endpoint.](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid-assetid-unspent-inputs)\n\nFor `RAW` operations, add the key `rawMessageData` with the value set to the [raw message data structure.](https://developers.fireblocks.com/reference/raw-signing-objects#rawmessagedata)\n\nFor `CONTRACT_CALL` operations, add the key `contractCallData` with the value set to the Ethereum smart contract Application Binary Interface (ABI) payload. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions.\n"
                    },
                    "customerRefId": {
                      "type": "string",
                      "description": "The ID for AML providers to associate the owner of funds with transactions.",
                      "example": "abcdef"
                    },
                    "autoStaking": {
                      "type": "boolean",
                      "description": "This feature is no longer supported."
                    },
                    "networkStaking": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)"
                        }
                      ],
                      "description": "This feature is no longer supported."
                    },
                    "cpuStaking": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Numeric string (recommended)"
                        },
                        {
                          "type": "number",
                          "description": "Number (deprecated)"
                        }
                      ],
                      "description": "This feature is no longer supported."
                    }
                  }
                },
                "isDstCollateral": {
                  "type": "boolean",
                  "description": "optional"
                }
              }
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the transaction."
          },
          "status": {
            "type": "string",
            "description": "The primary status of the transaction. For details, see [Primary transaction statuses.] (https://developers.fireblocks.com/reference/primary-transaction-statuses)"
          },
          "systemMessages": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "WARN",
                  "BLOCK"
                ]
              },
              "message": {
                "type": "string",
                "description": "A response from Fireblocks that communicates a message about the health of the process being performed. If this object is returned with data, you should expect potential delays or incomplete transaction statuses.",
                "example": "Slow transaction processing. Outgoing transactions might be stuck."
              }
            }
          }
        }
      },
      "description": "remove collateral, create withdraw request"
    },
    {
      "method": "get",
      "path": "/off_exchange/collateral_accounts/{mainExchangeAccountId}",
      "name": "off_exchange_collateral_accounts_getByMainexchangeaccountid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "mainExchangeAccountId": {
              "type": "string",
              "minimum": 1,
              "description": "The id of the main exchange account for which the requested collateral account is associated with"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "BINANCE",
              "BINANCEUS",
              "BITFINEX",
              "BITHUMB",
              "BITMEX",
              "BITSO",
              "BITSTAMP",
              "BITTREX",
              "CIRCLE",
              "COINBASEPRO",
              "COINMETRO",
              "COINSPRO",
              "CRYPTOCOM",
              "DERIBIT",
              "FTX",
              "FIXUS",
              "GEMINI",
              "HITBTC",
              "HUOBI",
              "KORBIT",
              "KRAKEN",
              "LIQUID",
              "POLONIEX",
              "OKCOIN",
              "OKEX",
              "SEEDCX"
            ]
          },
          "name": {
            "type": "string",
            "description": "Display name of the exchange account"
          },
          "status": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "balance": {
                  "type": "string"
                },
                "lockedAmount": {
                  "type": "string"
                },
                "total": {
                  "type": "string"
                },
                "available": {
                  "type": "string"
                }
              }
            }
          },
          "tradingAccounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "assets": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "balance": {
                        "type": "string"
                      },
                      "lockedAmount": {
                        "type": "string"
                      },
                      "total": {
                        "type": "string"
                      },
                      "available": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "isSubaccount": {
            "type": "boolean",
            "description": "True if the account is a subaccount in an exchange"
          },
          "mainAccountId": {
            "description": "if the account is a sub-account, the ID of the main account",
            "type": "string"
          }
        }
      },
      "description": "Find a specific collateral exchange account.\n\nReturns a collateral account by mainExchangeAccountId."
    },
    {
      "method": "post",
      "path": "/webhooks/resend",
      "name": "webhooks_resend_post",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "messagesCount": {
            "type": "number"
          }
        }
      },
      "description": "Resend failed webhooks.\n\nResends all failed webhook notifications."
    },
    {
      "method": "post",
      "path": "/webhooks/resend/{txId}",
      "name": "webhooks_resend_postByTxid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "txId": {
              "type": "string",
              "minimum": 1,
              "description": "The ID of the transaction for webhooks"
            },
            "body": {}
          }
        }
      ],
      "description": "Resend failed webhooks for a transaction by ID.\n\nResends failed webhook notifications for a transaction by ID."
    },
    {
      "method": "get",
      "path": "/nfts/ownership/tokens",
      "name": "nfts_ownership_tokens_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "vaultAccountIds": {
                  "type": "string",
                  "description": "A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request"
                },
                "ids": {
                  "type": "string",
                  "description": "A comma separated list of NFT IDs. Up to 100 are allowed in a single request."
                },
                "collectionIds": {
                  "type": "string",
                  "description": "A comma separated list of collection IDs. Up to 100 are allowed in a single request."
                },
                "pageCursor": {
                  "type": "string",
                  "description": "Page cursor to fetch"
                },
                "pageSize": {
                  "minimum": 1,
                  "maximum": 100,
                  "type": "number",
                  "description": "Items per page (max 100)"
                },
                "sort": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "ownershipLastUpdateTime",
                      "name",
                      "collection.name",
                      "blockchainDescriptor"
                    ]
                  },
                  "description": "Sort by param, it can be one param or a list of params separated by comma"
                },
                "search": {
                  "maximum": 100,
                  "type": "string",
                  "description": "Search owned tokens and their collections. Possible criteria for search:  token name and id within the contract/collection, collection name, blockchain descriptor and name."
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {},
      "description": "List all owned tokens (paginated).\n\nReturns all tokens and their data in your workspace.\n\n**Note**: This endpoint is now in Beta, disabled for general availability at this time.\n\nTo enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).\n"
    },
    {
      "method": "put",
      "path": "/nfts/ownership/tokens",
      "name": "nfts_ownership_tokens_put",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "vaultAccountId": {
                  "type": "string",
                  "description": "Vault account filter"
                }
              },
              "required": [
                "vaultAccountId"
              ]
            }
          }
        }
      ],
      "description": "Refresh vault account tokens.\n\nUpdates all tokens and balances per blockchain and vault account.\n\n**Note**: This endpoint is now in Beta, disabled for general availability at this time.\n\nTo enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).\n"
    },
    {
      "method": "get",
      "path": "/nfts/ownership/collections",
      "name": "nfts_ownership_collections_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "search": {
                  "maximum": 100,
                  "type": "string",
                  "description": "Search owned collections. Possible criteria for search: collection name, collection contract address."
                },
                "pageCursor": {
                  "type": "string",
                  "description": "Page cursor to fetch"
                },
                "pageSize": {
                  "minimum": 1,
                  "maximum": 100,
                  "type": "number",
                  "description": "Items per page (max 100)"
                },
                "sort": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "name"
                    ]
                  },
                  "description": "Sort by param, it can be one param or a list of params separated by comma"
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {},
      "description": "List owned collections (paginated).\n\nReturns all collections in your workspace\n\n**Note**: This endpoint is now in Beta, disabled for general availability at this time.\n\nTo enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).\n"
    },
    {
      "method": "get",
      "path": "/nfts/tokens/{id}",
      "name": "nfts_tokens_getById",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "NFT ID"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Fireblocks NFT asset id"
          },
          "tokenId": {
            "type": "string",
            "description": "Token id within the contract/collection"
          },
          "standard": {
            "type": "string",
            "description": "ERC721 / ERC1155"
          },
          "metadataURI": {
            "type": "string",
            "description": "URL of the original token JSON metadata"
          },
          "cachedMetadataURI": {
            "type": "string",
            "description": "URL of the cached token JSON metadata"
          },
          "media": {
            "description": "Media items extracted from metadata JSON",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "Cached accessible URL"
                },
                "contentType": {
                  "type": "string",
                  "enum": [
                    "IMAGE",
                    "VIDEO",
                    "ANIMATION",
                    "THREE_D",
                    "TEXT",
                    "GIF",
                    "UNKNOWN_TYPE",
                    "SVG",
                    "AUDIO"
                  ],
                  "description": "Media type"
                }
              },
              "required": [
                "url",
                "contentType"
              ]
            }
          },
          "collection": {
            "description": "Parent collection information",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "symbol": {
                "type": "string"
              }
            }
          },
          "blockchainDescriptor": {
            "type": "string",
            "enum": [
              "ETH",
              "ETH_TEST3",
              "POLYGON",
              "POLYGON_TEST_MUMBAI"
            ]
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "tokenId",
          "standard",
          "media",
          "blockchainDescriptor",
          "description",
          "name"
        ]
      },
      "description": "List token data by ID.\n\nReturns the requested token data.\n\n**Note**: This endpoint is now in Beta, disabled for general availability at this time.\n\nTo enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).\n"
    },
    {
      "method": "put",
      "path": "/nfts/tokens/{id}",
      "name": "nfts_tokens_putById",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "NFT ID"
            }
          }
        }
      ],
      "description": "Refresh token metadata.\n\nUpdates the latest token metadata.\n\n**Note**: This endpoint is now in Beta, disabled for general availability at this time.\n\nTo enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).\n"
    },
    {
      "method": "get",
      "path": "/nfts/tokens",
      "name": "nfts_tokens_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "ids": {
                  "type": "string",
                  "description": "A comma separated list of NFT IDs. Up to 100 are allowed in a single request."
                },
                "pageCursor": {
                  "type": "string",
                  "description": "Page cursor to fetch"
                },
                "pageSize": {
                  "minimum": 1,
                  "maximum": 100,
                  "type": "number",
                  "description": "Items per page (max 100)"
                },
                "sort": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "collection.name",
                      "name",
                      "blockchainDescriptor"
                    ]
                  },
                  "description": "Sort by param, it can be one param or a list of params separated by comma"
                }
              },
              "required": [
                "ids"
              ]
            }
          }
        }
      ],
      "output": {},
      "description": "List tokens by IDs.\n\nReturns the requested tokens data\n\n**Note**: This endpoint is now in Beta, disabled for general availability at this time.\n\nTo enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).\n"
    },
    {
      "method": "put",
      "path": "/nfts/ownership/tokens/{id}/status",
      "name": "nfts_ownership_tokens_status_putById",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "NFT ID"
            },
            "body": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "LISTED",
                    "ARCHIVED"
                  ]
                }
              },
              "required": [
                "status"
              ]
            }
          }
        }
      ],
      "description": "Update token ownership status.\n\nUpdates token ownership status for a tenant, in all tenant vaults.\n\n**Note**: This endpoint is now in Beta, disabled for general availability at this time.\n\nTo enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manager or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).\n"
    },
    {
      "method": "get",
      "path": "/connections",
      "name": "connections_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "userId": {
                  "type": "string"
                },
                "vaultAccountId": {
                  "type": "number"
                },
                "connectionMethod": {
                  "type": "string"
                },
                "feeLevel": {
                  "type": "string"
                },
                "appUrl": {
                  "type": "string"
                },
                "appName": {
                  "type": "string"
                },
                "pageSize": {
                  "type": "number",
                  "default": 10,
                  "maximum": 50,
                  "description": "Amount of results to return in the next page."
                },
                "next": {
                  "type": "string",
                  "description": "Cursor to the next page"
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array with the requested Web3 connection's data",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Id of the connection",
                  "example": "4e9e7051-f3b2-48e9-8ee6-b12492552657"
                },
                "userId": {
                  "type": "string",
                  "description": "Id of the user that created the connection"
                },
                "sessionMetadata": {
                  "description": "Metadata of the connection (provided by the dapp)",
                  "type": "object",
                  "properties": {
                    "appUrl": {
                      "type": "string"
                    },
                    "appName": {
                      "type": "string"
                    },
                    "appDescription": {
                      "type": "string"
                    },
                    "appIcon": {
                      "type": "string"
                    }
                  }
                },
                "vaultAccountId": {
                  "type": "number",
                  "description": "The vault to connect",
                  "example": 1
                },
                "feeLevel": {
                  "type": "string",
                  "enum": [
                    "MEDIUM",
                    "HIGH"
                  ],
                  "description": "The default fee level"
                },
                "chainIds": {
                  "description": "The chains approved for the connection",
                  "example": [
                    "ETH",
                    "ETH_TEST",
                    "SOL"
                  ],
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "connectionType": {
                  "type": "string",
                  "enum": [
                    "WalletConnect"
                  ],
                  "description": "The connection's type"
                },
                "connectionMethod": {
                  "type": "string",
                  "enum": [
                    "DESKTOP",
                    "MOBILE",
                    "API"
                  ],
                  "description": "The method through which the connection was established"
                },
                "creationDate": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Timestamp of the session's creation"
                }
              },
              "required": [
                "id",
                "userId",
                "sessionMetadata",
                "vaultAccountId",
                "feeLevel",
                "chainIds",
                "connectionType",
                "connectionMethod",
                "creationDate"
              ]
            }
          },
          "paging": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "Cursor to the next page"
              }
            },
            "required": [
              "next"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "description": "List all open Web3 connections.\n\nGet open Web3 connections."
    },
    {
      "method": "post",
      "path": "/connections/wc",
      "name": "connections_wc_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "vaultAccountId": {
                  "type": "number",
                  "description": "The ID of the vault to connect to the Web3 connection.",
                  "example": 1
                },
                "feeLevel": {
                  "type": "string",
                  "enum": [
                    "MEDIUM",
                    "HIGH"
                  ],
                  "description": "The default fee level. Valid values are `MEDIUM` and `HIGH`."
                },
                "uri": {
                  "type": "string",
                  "description": "The WalletConnect uri provided by the dapp.",
                  "example": "wc:77752975-906f-48f5-b59f-047826ee947e@1?bridge=https%3A%2F%2F0.bridge.walletconnect.org&key=64be99adc6086b7a729b0ec8c7e1f174927ab92e84f5c6f9527050225344a637"
                },
                "chainIds": {
                  "description": "The ID of the blockchain network used in the Web3 connection.",
                  "example": [
                    "ETH",
                    "ETH_TEST"
                  ],
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "vaultAccountId",
                "feeLevel",
                "uri",
                "chainIds"
              ]
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Web3 connection initiated.",
            "example": "4e9e7051-f3b2-48e9-8ee6-b12492552657"
          },
          "sessionMetadata": {
            "description": "Metadata of the Web3 connection (provided by the DApp).",
            "type": "object",
            "properties": {
              "appUrl": {
                "type": "string"
              },
              "appName": {
                "type": "string"
              },
              "appDescription": {
                "type": "string"
              },
              "appIcon": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "sessionMetadata"
        ]
      },
      "description": "Create a new Web3 connection.\n\nInitiate a new Web3 connection.\n\n* Note: After this succeeds, make a request to `PUT /v1/connections/wc/{id}` (below) to approve or reject the new Web3 connection."
    },
    {
      "method": "put",
      "path": "/connections/wc/{id}",
      "name": "connections_wc_putById",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the initiated Web3 connection to approve."
            },
            "body": {
              "type": "object",
              "properties": {
                "approve": {
                  "type": "boolean",
                  "description": "Approval of the initiated Web3 connection."
                }
              },
              "required": [
                "approve"
              ]
            }
          }
        }
      ],
      "description": "Respond to a pending Web3 connection request.\n\nSubmit a response to *approve* or *reject* an initiated Web3 connection.\n* Note: This call is used to complete your `POST /v1/connections/wc/` request.\n\nAfter this succeeds, your new Web3 connection is created and functioning."
    },
    {
      "method": "delete",
      "path": "/connections/wc/{id}",
      "name": "connections_wc_eraseById",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the existing Web3 connection to remove."
            }
          }
        }
      ],
      "description": "Remove an existing Web3 connection.\n\nRemove a Web3 connection"
    },
    {
      "method": "post",
      "path": "/screening/travel_rule/transaction/validate",
      "name": "screening_travel_rule_transaction_validate_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "transactionAsset": {
                  "type": "string",
                  "example": "BTC",
                  "description": "Transaction asset symbol BTC,ETH)"
                },
                "destination": {
                  "type": "string",
                  "example": "bc1qxy2kgdygjrsqtzq2n0yrf1234p83kkfjhx0wlh",
                  "description": "Transaction destination address"
                },
                "transactionAmount": {
                  "type": "string",
                  "example": "10",
                  "description": "Transaction amount in the transaction asset"
                },
                "originatorVASPdid": {
                  "type": "string",
                  "example": "did:ethr:0x44957e75d6ce4a5bf37aae117da86422c848f7c2",
                  "description": "This is the identifier assigned to your VASP"
                },
                "originatorEqualsBeneficiary": {
                  "type": "boolean",
                  "description": "\"True\" if the originator and beneficiary is the same person and you therefore do not need to collect any information. \"False\" if it is a third-party transfer."
                },
                "travelRuleBehavior": {
                  "type": "boolean",
                  "description": "This will also check if the transaction is a TRAVEL_RULE in the beneficiary VASP's jurisdiction"
                },
                "beneficiaryVASPdid": {
                  "type": "string",
                  "example": "did:ethr:0x46a7ed5813ce735387df2bfb245bd7722e0de992",
                  "description": "This is the identifier assigned to the VASP the funds are being sent to"
                },
                "beneficiaryVASPname": {
                  "type": "string",
                  "example": "HelloCrypto",
                  "description": "Beneficiary VASP name"
                },
                "beneficiaryName": {
                  "type": "string",
                  "example": "John Doe",
                  "description": "Beneficiary  name"
                },
                "beneficiaryAccountNumber": {
                  "type": "string",
                  "example": "1234-1234-1234-12234",
                  "description": "Beneficiary  name"
                },
                "beneficiaryAddress": {
                  "example": "{\"addressLine: [Wayne Manor, Gotham City, New York, USA]\"}",
                  "description": "Beneficiary  name",
                  "type": "object",
                  "properties": {
                    "street": {
                      "type": "string",
                      "example": "1234 Example St",
                      "description": "Street address"
                    },
                    "city": {
                      "type": "string",
                      "example": "New York",
                      "description": "City"
                    },
                    "state": {
                      "type": "string",
                      "example": "NY",
                      "description": "State or province"
                    },
                    "postalCode": {
                      "type": "string",
                      "example": "10001",
                      "description": "Postal or ZIP code"
                    }
                  }
                }
              },
              "required": [
                "transactionAsset",
                "destination",
                "transactionAmount",
                "originatorVASPdid",
                "originatorEqualsBeneficiary",
                "travelRuleBehavior",
                "beneficiaryVASPdid",
                "beneficiaryVASPname",
                "beneficiaryName",
                "beneficiaryAccountNumber",
                "beneficiaryAddress"
              ]
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "\"isValid\" will tell you if you have collected all the information needed for the travel rule data transfer. Once this field = \"true\", you can move on to the next step which is to transfer the front-end information to your back-end and perform Travel Rule Transaction create"
          },
          "type": {
            "type": "string",
            "description": "\"type\" will tell you if the virtual asset value converted to FIAT value of the withdrawal request is above (=TRAVELRULE) or below (=BELOW_THRESHOLD) the threshold in your jurisdiction. If it is to an unhosted wallet which does not require travel rule information to be sent and only collected, it will say NON_CUSTODIAL.",
            "example": "TRAVELRULE"
          },
          "beneficiaryAddressType": {
            "type": "string",
            "description": "\"beneficiaryAddressType\" will tell you if your blockchain analytics provider or internal address book has been able to identify the wallet address.",
            "example": "UNKNOWN"
          },
          "addressSource": {
            "type": "string",
            "description": "\"addressSource\" will tell you if the address was found in your internal address book or identified by the blockchain analytics provider.",
            "example": "UNKNOWN"
          },
          "beneficiaryVASPdid": {
            "type": "string",
            "description": "The VASP DID of the beneficiary VASP",
            "example": "did:ethr:0x46a7ed5813ce735387df2bfb245bd7722e0de992"
          },
          "beneficiaryVASPname": {
            "type": "string",
            "description": "\"beneficiaryVASPname\" will tell you the name of the VASP that has been identified as the owner of the wallet address. This name is used in a subsequent call to get its DID.",
            "example": "Fireblocks"
          },
          "warnings": {
            "description": "\"errors/warnings\" will tell you what information about the beneficiary you need to collect from the sender.",
            "example": [
              "optional-beneficiaryAccountNumber"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "isValid",
          "type",
          "beneficiaryAddressType",
          "addressSource",
          "beneficiaryVASPdid",
          "beneficiaryVASPname",
          "warnings"
        ]
      },
      "description": "Validate Travel Rule Transaction.\n\nValidate Travel Rule transactions.\n\nChecks what beneficiary VASP details are required by your jurisdiction and the beneficiary's jurisdiction.\n\n**Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren't yet generally available.\n\nTo enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com)."
    },
    {
      "method": "post",
      "path": "/screening/travel_rule/transaction/validate/full",
      "name": "screening_travel_rule_transaction_validate_full_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "transactionAsset": {
                  "type": "string",
                  "description": "The asset involved in the transaction"
                },
                "transactionAmount": {
                  "type": "string",
                  "description": "The amount of the transaction"
                },
                "originatorDid": {
                  "type": "string",
                  "description": "The DID of the transaction originator"
                },
                "beneficiaryDid": {
                  "type": "string",
                  "description": "The DID of the transaction beneficiary"
                },
                "originatorVASPdid": {
                  "type": "string",
                  "description": "The VASP ID of the transaction originator"
                },
                "beneficiaryVASPdid": {
                  "type": "string",
                  "description": "The VASP ID of the transaction beneficiary"
                },
                "beneficiaryVASPname": {
                  "type": "string",
                  "description": "The name of the VASP acting as the beneficiary"
                },
                "transactionBlockchainInfo": {
                  "description": "Information about the blockchain transaction",
                  "type": "object",
                  "properties": {
                    "txHash": {
                      "type": "string"
                    },
                    "origin": {
                      "type": "string"
                    },
                    "destination": {
                      "type": "string"
                    }
                  }
                },
                "originator": {
                  "description": "Information about the originator of the transaction",
                  "type": "object",
                  "properties": {
                    "fullName": {
                      "type": "string"
                    },
                    "dateOfBirth": {
                      "type": "string"
                    },
                    "placeOfBirth": {
                      "type": "string"
                    },
                    "address": {
                      "type": "string"
                    },
                    "identificationNumber": {
                      "type": "string"
                    },
                    "nationality": {
                      "type": "string"
                    },
                    "countryOfResidence": {
                      "type": "string"
                    },
                    "taxIdentificationNumber": {
                      "type": "string"
                    },
                    "customerNumber": {
                      "type": "string"
                    }
                  }
                },
                "beneficiary": {
                  "description": "Information about the beneficiary of the transaction",
                  "type": "object",
                  "properties": {
                    "fullName": {
                      "type": "string"
                    },
                    "dateOfBirth": {
                      "type": "string"
                    },
                    "placeOfBirth": {
                      "type": "string"
                    },
                    "address": {
                      "type": "string"
                    },
                    "identificationNumber": {
                      "type": "string"
                    },
                    "nationality": {
                      "type": "string"
                    },
                    "countryOfResidence": {
                      "type": "string"
                    },
                    "taxIdentificationNumber": {
                      "type": "string"
                    },
                    "customerNumber": {
                      "type": "string"
                    }
                  }
                },
                "encrypted": {
                  "type": "string",
                  "description": "Encrypted data related to the transaction"
                },
                "protocol": {
                  "type": "string",
                  "description": "The protocol used to perform the travel rule"
                },
                "notificationEmail": {
                  "type": "string",
                  "description": "The email address where a notification should be sent upon completion of the travel rule"
                },
                "skipBeneficiaryDataValidation": {
                  "type": "boolean",
                  "description": "Whether to skip validation of beneficiary data"
                },
                "travelRuleBehavior": {
                  "type": "boolean",
                  "description": "Whether to check if the transaction is a TRAVEL_RULE in the beneficiary VASP's jurisdiction"
                },
                "originatorProof": {
                  "description": "Ownership proof related to the originator of the transaction",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "passport",
                      "description": "Type of ownership proof"
                    },
                    "id": {
                      "type": "string",
                      "example": "123456789",
                      "description": "Identification number"
                    },
                    "name": {
                      "type": "string",
                      "example": "Alice",
                      "description": "Name of owner"
                    },
                    "country": {
                      "type": "string",
                      "example": "US",
                      "description": "Country of issuance"
                    },
                    "issueDate": {
                      "type": "string",
                      "example": "2022-01-01",
                      "description": "Date of issuance"
                    },
                    "issuer": {
                      "type": "string",
                      "example": "US Government",
                      "description": "Name of issuing entity"
                    }
                  }
                },
                "beneficiaryProof": {
                  "description": "Ownership proof related to the beneficiary of the transaction",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "passport",
                      "description": "Type of ownership proof"
                    },
                    "id": {
                      "type": "string",
                      "example": "123456789",
                      "description": "Identification number"
                    },
                    "name": {
                      "type": "string",
                      "example": "Alice",
                      "description": "Name of owner"
                    },
                    "country": {
                      "type": "string",
                      "example": "US",
                      "description": "Country of issuance"
                    },
                    "issueDate": {
                      "type": "string",
                      "example": "2022-01-01",
                      "description": "Date of issuance"
                    },
                    "issuer": {
                      "type": "string",
                      "example": "US Government",
                      "description": "Name of issuing entity"
                    }
                  }
                },
                "pii": {
                  "description": "Personal identifiable information related to the transaction",
                  "type": "object",
                  "properties": {
                    "fullName": {
                      "type": "string"
                    },
                    "dateOfBirth": {
                      "type": "string"
                    },
                    "placeOfBirth": {
                      "type": "string"
                    },
                    "address": {
                      "type": "string"
                    },
                    "identificationNumber": {
                      "type": "string"
                    },
                    "nationality": {
                      "type": "string"
                    },
                    "countryOfResidence": {
                      "type": "string"
                    },
                    "taxIdentificationNumber": {
                      "type": "string"
                    },
                    "customerNumber": {
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "transactionAsset",
                "transactionAmount",
                "originatorDid",
                "beneficiaryDid",
                "originatorVASPdid",
                "beneficiaryVASPdid",
                "beneficiaryVASPname",
                "transactionBlockchainInfo",
                "originator",
                "beneficiary",
                "encrypted",
                "protocol",
                "notificationEmail",
                "skipBeneficiaryDataValidation",
                "travelRuleBehavior",
                "originatorProof",
                "beneficiaryProof",
                "pii"
              ]
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "\"isValid\" will tell you if you have collected all the information needed for the travel rule data transfer. Once this field = \"true\", you can move on to the next step which is to transfer the front-end information to your back-end and perform Travel Rule Transaction create"
          },
          "type": {
            "type": "string",
            "description": "\"type\" will tell you if the virtual asset value converted to FIAT value of the withdrawal request is above (=TRAVELRULE) or below (=BELOW_THRESHOLD) the threshold in your jurisdiction. If it is to an unhosted wallet which does not require travel rule information to be sent and only collected, it will say NON_CUSTODIAL.",
            "example": "TRAVELRULE"
          },
          "beneficiaryAddressType": {
            "type": "string",
            "description": "\"beneficiaryAddressType\" will tell you if your blockchain analytics provider or internal address book has been able to identify the wallet address.",
            "example": "UNKNOWN"
          },
          "addressSource": {
            "type": "string",
            "description": "\"addressSource\" will tell you if the address was found in your internal address book or identified by the blockchain analytics provider.",
            "example": "UNKNOWN"
          },
          "beneficiaryVASPdid": {
            "type": "string",
            "description": "The VASP DID of the beneficiary VASP",
            "example": "did:ethr:0x46a7ed5813ce735387df2bfb245bd7722e0de992"
          },
          "beneficiaryVASPname": {
            "type": "string",
            "description": "\"beneficiaryVASPname\" will tell you the name of the VASP that has been identified as the owner of the wallet address. This name is used in a subsequent call to get its DID.",
            "example": "Fireblocks"
          },
          "warnings": {
            "description": "\"errors/warnings\" will tell you what information about the beneficiary you need to collect from the sender.",
            "example": [
              "optional-beneficiaryAccountNumber"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "isValid",
          "type",
          "beneficiaryAddressType",
          "addressSource",
          "beneficiaryVASPdid",
          "beneficiaryVASPname",
          "warnings"
        ]
      },
      "description": "Validate Full Travel Rule Transaction.\n\nValidate Full Travel Rule transactions.\n\nChecks for all required information on the originator and beneficiary VASPs.\n\n**Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren't yet generally available.\n\nTo enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com)."
    },
    {
      "method": "get",
      "path": "/screening/travel_rule/vasp/{did}",
      "name": "screening_travel_rule_vasp_getByDid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "did": {
              "type": "string"
            },
            "query": {
              "type": "object",
              "properties": {
                "order": {
                  "type": "string",
                  "description": "Field to order by"
                },
                "per_page": {
                  "type": "number",
                  "description": "Records per page"
                },
                "page": {
                  "type": "number",
                  "description": "Page number"
                },
                "fields": {
                  "type": "string",
                  "description": "CSV of fields to return (all, \"blank\" or see list of all field names below)"
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "did": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "verificationStatus": {
            "type": "string"
          },
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "emailDomains": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "legalStructure": {
            "type": "string"
          },
          "legalName": {
            "type": "string"
          },
          "yearFounded": {
            "type": "string"
          },
          "incorporationCountry": {
            "type": "string"
          },
          "isRegulated": {
            "type": "string"
          },
          "otherNames": {
            "type": "string"
          },
          "identificationType": {
            "type": "string"
          },
          "identificationCountry": {
            "type": "string"
          },
          "businessNumber": {
            "type": "string"
          },
          "regulatoryAuthorities": {
            "type": "string"
          },
          "jurisdictions": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "postCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "certificates": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "travelRule_OPENVASP": {
            "type": "string"
          },
          "travelRule_SYGNA": {
            "type": "string"
          },
          "travelRule_TRISA": {
            "type": "string"
          },
          "travelRule_TRLIGHT": {
            "type": "string"
          },
          "travelRule_EMAIL": {
            "type": "string"
          },
          "travelRule_TRP": {
            "type": "string"
          },
          "travelRule_SHYFT": {
            "type": "string"
          },
          "travelRule_USTRAVELRULEWG": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "lastSentDate": {
            "type": "string"
          },
          "lastReceivedDate": {
            "type": "string"
          },
          "documents": {
            "type": "string"
          },
          "hasAdmin": {
            "type": "boolean"
          },
          "isNotifiable": {
            "type": "boolean"
          },
          "issuers": {
            "type": "object",
            "properties": {
              "yearFounded": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "isRegulated": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "regulatoryAuthorities": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "name": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "logo": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "website": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "legalName": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "legalStructure": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "incorporationCountry": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "businessNumber": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "addressLine1": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "city": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "country": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              },
              "description": {
                "type": "object",
                "properties": {
                  "issuerDid": {
                    "type": "string"
                  }
                },
                "required": [
                  "issuerDid"
                ]
              }
            },
            "required": [
              "yearFounded",
              "isRegulated",
              "regulatoryAuthorities",
              "name",
              "logo",
              "website",
              "legalName",
              "legalStructure",
              "incorporationCountry",
              "businessNumber",
              "addressLine1",
              "city",
              "country",
              "description"
            ]
          }
        },
        "required": [
          "did",
          "name",
          "verificationStatus",
          "addressLine1",
          "addressLine2",
          "city",
          "country",
          "emailDomains",
          "website",
          "logo",
          "legalStructure",
          "legalName",
          "yearFounded",
          "incorporationCountry",
          "isRegulated",
          "otherNames",
          "identificationType",
          "identificationCountry",
          "businessNumber",
          "regulatoryAuthorities",
          "jurisdictions",
          "street",
          "number",
          "unit",
          "postCode",
          "state",
          "certificates",
          "description",
          "travelRule_OPENVASP",
          "travelRule_SYGNA",
          "travelRule_TRISA",
          "travelRule_TRLIGHT",
          "travelRule_EMAIL",
          "travelRule_TRP",
          "travelRule_SHYFT",
          "travelRule_USTRAVELRULEWG",
          "createdAt",
          "createdBy",
          "updatedAt",
          "updatedBy",
          "lastSentDate",
          "lastReceivedDate",
          "documents",
          "hasAdmin",
          "isNotifiable",
          "issuers"
        ]
      },
      "description": "Get VASP details.\n\nGet VASP Details.\n\nReturns information about a VASP that has the specified DID.\n\n**Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren't yet generally available.\n\nTo enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com)."
    },
    {
      "method": "get",
      "path": "/screening/travel_rule/vasp",
      "name": "screening_travel_rule_vasp_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "order": {
                  "type": "string",
                  "description": "Field to order by"
                },
                "per_page": {
                  "type": "number",
                  "description": "Records per page"
                },
                "page": {
                  "type": "number",
                  "description": "Page number"
                },
                "fields": {
                  "type": "string",
                  "description": "CSV of fields to return (all, \"blank\" or see list of all field names below)"
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "vasps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "did": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "verificationStatus": {
                  "type": "string"
                },
                "addressLine1": {
                  "type": "string"
                },
                "addressLine2": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "emailDomains": {
                  "type": "string"
                },
                "website": {
                  "type": "string"
                },
                "logo": {
                  "type": "string"
                },
                "legalStructure": {
                  "type": "string"
                },
                "legalName": {
                  "type": "string"
                },
                "yearFounded": {
                  "type": "string"
                },
                "incorporationCountry": {
                  "type": "string"
                },
                "isRegulated": {
                  "type": "string"
                },
                "otherNames": {
                  "type": "string"
                },
                "identificationType": {
                  "type": "string"
                },
                "identificationCountry": {
                  "type": "string"
                },
                "businessNumber": {
                  "type": "string"
                },
                "regulatoryAuthorities": {
                  "type": "string"
                },
                "jurisdictions": {
                  "type": "string"
                },
                "street": {
                  "type": "string"
                },
                "number": {
                  "type": "string"
                },
                "unit": {
                  "type": "string"
                },
                "postCode": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "certificates": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "travelRule_OPENVASP": {
                  "type": "string"
                },
                "travelRule_SYGNA": {
                  "type": "string"
                },
                "travelRule_TRISA": {
                  "type": "string"
                },
                "travelRule_TRLIGHT": {
                  "type": "string"
                },
                "travelRule_EMAIL": {
                  "type": "string"
                },
                "travelRule_TRP": {
                  "type": "string"
                },
                "travelRule_SHYFT": {
                  "type": "string"
                },
                "travelRule_USTRAVELRULEWG": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string"
                },
                "createdBy": {
                  "type": "string"
                },
                "updatedAt": {
                  "type": "string"
                },
                "updatedBy": {
                  "type": "string"
                },
                "lastSentDate": {
                  "type": "string"
                },
                "lastReceivedDate": {
                  "type": "string"
                },
                "documents": {
                  "type": "string"
                },
                "hasAdmin": {
                  "type": "boolean"
                },
                "isNotifiable": {
                  "type": "boolean"
                },
                "issuers": {
                  "type": "object",
                  "properties": {
                    "yearFounded": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "isRegulated": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "regulatoryAuthorities": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "name": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "logo": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "website": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "legalName": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "legalStructure": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "incorporationCountry": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "businessNumber": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "addressLine1": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "city": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "country": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    },
                    "description": {
                      "type": "object",
                      "properties": {
                        "issuerDid": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "issuerDid"
                      ]
                    }
                  },
                  "required": [
                    "yearFounded",
                    "isRegulated",
                    "regulatoryAuthorities",
                    "name",
                    "logo",
                    "website",
                    "legalName",
                    "legalStructure",
                    "incorporationCountry",
                    "businessNumber",
                    "addressLine1",
                    "city",
                    "country",
                    "description"
                  ]
                }
              },
              "required": [
                "did",
                "name",
                "verificationStatus",
                "addressLine1",
                "addressLine2",
                "city",
                "country",
                "emailDomains",
                "website",
                "logo",
                "legalStructure",
                "legalName",
                "yearFounded",
                "incorporationCountry",
                "isRegulated",
                "otherNames",
                "identificationType",
                "identificationCountry",
                "businessNumber",
                "regulatoryAuthorities",
                "jurisdictions",
                "street",
                "number",
                "unit",
                "postCode",
                "state",
                "certificates",
                "description",
                "travelRule_OPENVASP",
                "travelRule_SYGNA",
                "travelRule_TRISA",
                "travelRule_TRLIGHT",
                "travelRule_EMAIL",
                "travelRule_TRP",
                "travelRule_SHYFT",
                "travelRule_USTRAVELRULEWG",
                "createdAt",
                "createdBy",
                "updatedAt",
                "updatedBy",
                "lastSentDate",
                "lastReceivedDate",
                "documents",
                "hasAdmin",
                "isNotifiable",
                "issuers"
              ]
            }
          }
        },
        "required": [
          "vasps"
        ]
      },
      "description": "Get All VASPs.\n\nReturns a list of VASPs. VASPs can be searched and sorted and results are paginated.\n\n**Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren't yet generally available.\n\nTo enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com)."
    },
    {
      "method": "put",
      "path": "/screeening/travel_rule/vasp/update",
      "name": "screeening_travel_rule_vasp_update_put",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "did": {
                  "type": "string",
                  "example": "did:ethr:0x44957e75d6ce4a5bf37aae117da86422c848f7c2",
                  "description": "The decentralized identifier of the VASP"
                },
                "pii_didkey": {
                  "type": "string",
                  "example": "did:key:z6Mks5CZRaiooKYhq5TwtXQC1gWhwiZnmiKfFrMnYY62MhYf",
                  "description": "The PII DID key of the VASP"
                }
              },
              "required": [
                "did",
                "pii_didkey"
              ]
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "did": {
            "type": "string",
            "example": "did:ethr:0x44957e75d6ce4a5bf37aae117da86422c848f7c2",
            "description": "The decentralized identifier of the VASP"
          },
          "pii_didkey": {
            "type": "string",
            "example": "did:key:z6Mks5CZRaiooKYhq5TwtXQC1gWhwiZnmiKfFrMnYY62MhYf",
            "description": "The PII DID key of the VASP"
          }
        },
        "required": [
          "did",
          "pii_didkey"
        ]
      },
      "description": "Add jsonDidKey to VASP details.\n\nUpdate VASP Details.\n\nUpdates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.\n\n**Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren't yet generally available.\n\nTo enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com)."
    },
    {
      "method": "get",
      "path": "/tap/active_policy",
      "name": "tap_active_policy_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "object",
        "description": "Policy validation",
        "properties": {
          "policy": {
            "type": "object",
            "description": "Response object for policy operations",
            "properties": {
              "rules": {
                "type": "array",
                "description": "A set of policy rules",
                "items": {
                  "type": "object",
                  "description": "Policy rule which is enforced on transactions",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "(deprecated - replaced by \"operators\")  | Defines users who can initiate the type of transaction to which the rule applies. options are * \"*\" - All users are allowed * Specific User id",
                      "deprecated": true
                    },
                    "operators": {
                      "type": "object",
                      "description": "Defines users/groups who can initiate the type of transaction to which the rule applies.",
                      "properties": {
                        "wildcard": {
                          "type": "string",
                          "enum": [
                            "*"
                          ],
                          "description": "If used then this property should appear as the only child property\n* \"*\" - All users are allowed\n"
                        },
                        "users": {
                          "type": "array",
                          "description": "Set of users ids",
                          "items": {
                            "type": "string"
                          }
                        },
                        "usersGroups": {
                          "type": "array",
                          "description": "Set of group ids",
                          "items": {
                            "type": "string"
                          }
                        },
                        "services": {
                          "type": "array",
                          "description": "set of services to initiate transactions",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "transactionType": {
                      "type": "string",
                      "enum": [
                        "TRANSFER",
                        "CONTRACT_CALL",
                        "APPROVE",
                        "MINT",
                        "BURN",
                        "SUPPLY",
                        "REDEEM",
                        "STAKE",
                        "RAW",
                        "TYPED_MESSAGE"
                      ],
                      "description": "Defines the type of transaction to which the rule applies.\n  * TRANSFER - Default. Transfers funds from one account to another\n  * CONTRACT_CALL - Calls a smart contract, mainly for DeFi operations.\n  * APPROVE - Allows a smart contract to withdraw from a designated wallet.\n  * MINT - Perform a mint operation (increase supply) on a supported token\n  * BURN - Perform a burn operation (reduce supply) on a supported token\n  * SUPPLY - Use for DeFi to lend assets\n  * REDEEM - Use for DeFi to get lending back\n  * STAKE - Allows you to allocate and lock certain assets for earning staking rewards.\n  * RAW - An off-chain message with no predefined format, use it to sign any message with your private key.\n  * TYPED_MESSAGE - An off-chain message type that follows a predefined format, used to sign specific messages that are not actual transactions.\n"
                    },
                    "designatedSigner": {
                      "type": "string",
                      "description": "(deprecated - replaced by \"designatedSigners\") Id representing the user who signs transactions that match a specific rule",
                      "deprecated": true
                    },
                    "designatedSigners": {
                      "type": "object",
                      "description": "Set of ids representing the users who signs transactions that match a specific rule",
                      "properties": {
                        "users": {
                          "type": "array",
                          "description": "Set of users ids",
                          "items": {
                            "type": "string"
                          }
                        },
                        "usersGroups": {
                          "type": "array",
                          "description": "Set of group ids",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "TRANSFER"
                      ],
                      "description": "Policy rule type"
                    },
                    "action": {
                      "type": "string",
                      "enum": [
                        "ALLOW",
                        "BLOCK",
                        "2-TIER"
                      ],
                      "description": "Defines what occurs when a transaction meets the rule's criteria\n* ALLOW - The transaction goes through and can be signed without requiring additional approvals\n* BLOCK - The transaction is automatically blocked\n* 2-TIER - Only these users or user groups can approve \n           If any of them reject the transaction before the required approval threshold is met, the transaction doesn't go through\n           The list of entities are set is \"authorizationGroups\" field\n"
                    },
                    "asset": {
                      "type": "string",
                      "description": "Defines the type of asset being transacted, options are\n* \"*\" - All assets\n* Specific asset\n"
                    },
                    "srcType": {
                      "description": "(deprecated - replaced by \"src\") source account type"
                    },
                    "srcSubType": {
                      "description": "(deprecated - replaced by \"src\") source sub account type"
                    },
                    "srcId": {
                      "description": "(deprecated - replaced by \"src\") source account id"
                    },
                    "src": {
                      "type": "object",
                      "description": "Defines source accounts the rule allows transfers to originate from",
                      "properties": {
                        "ids": {
                          "type": "array",
                          "description": "A set of ids",
                          "items": {
                            "type": "array",
                            "description": "A set of ids in a tuple format",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "maxItems": 3
                          }
                        }
                      }
                    },
                    "dstType": {
                      "description": "(deprecated - replaced by \"dst\") destination account type"
                    },
                    "dstSubType": {
                      "description": "(deprecated - replaced by \"dst\") destination sub account type"
                    },
                    "dstId": {
                      "description": "(deprecated - replaced by \"dst\") destination account id"
                    },
                    "dst": {
                      "type": "object",
                      "description": "Defines the destination accounts the rule allows transfers to",
                      "properties": {
                        "ids": {
                          "type": "array",
                          "description": "A set of ids",
                          "items": {
                            "type": "array",
                            "description": "A set of ids in a tuple format",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "maxItems": 3
                          }
                        }
                      }
                    },
                    "dstAddressType": {
                      "type": "string",
                      "enum": [
                        "WHITELISTED",
                        "ONE_TIME",
                        "*"
                      ],
                      "description": "Defines whether the destination to which you are sending funds must be whitelisted, to allow one-time transfers to non-whitelisted external addresses, or both.\nBy default, you can only transfer to an external address after it’s whitelisted.\n  * WHITELISTED - Can only be sent to whitelisted addresses.\n  * ONE_TIME - Can only be sent to non-whitelisted external addresses.\n  * \"*\" - can be sent to whitelisted addresses or non-whitelisted external\n"
                    },
                    "amountCurrency": {
                      "type": "string",
                      "enum": [
                        "USD",
                        "EUR",
                        "NATIVE"
                      ],
                      "description": "* USD - Limits the amount of any asset users can transfer based on the USD equivalent of the asset.\n* EUR - Limits the amount of any asset users can transfer based on the EURO equivalent of the asset.\n* NATIVE - Limits the amount of an asset a user can transfer when using a specific asset.\n"
                    },
                    "amountScope": {
                      "type": "string",
                      "enum": [
                        "SINGLE_TX",
                        "TIMEFRAME"
                      ],
                      "description": "* SINGLE_TX - limit applies to a single transaction\n* TIMEFRAME - limit applies to all transactions within the defined time period\n"
                    },
                    "amount": {
                      "type": "number",
                      "description": "Defines the value a transaction must exceed for the rule to apply to it (according to the amountCurrency field)"
                    },
                    "periodSec": {
                      "type": "number",
                      "description": "Time period in seconds applied by the amountScope field to accumulate transferred amounts in transactions that match the rule, until the total exceeds the value you specify under Minimum.\nWhen the specified amount is reached within that period, whether by one or many transactions, further transactions in that period either fail or require more approvals.\n"
                    },
                    "authorizers": {
                      "type": "array",
                      "description": "(deprecated - replaced by \"authorizationGroups\") Allowed entities which can approves a transaction",
                      "deprecated": true,
                      "items": {
                        "type": "string"
                      }
                    },
                    "authorizersCount": {
                      "type": "number",
                      "description": "(deprecated - replaced by \"authorizationGroups\") Min amount of entities which are needed to approve a transaction",
                      "deprecated": true
                    },
                    "authorizationGroups": {
                      "type": "object",
                      "description": "Defines the transaction approval terms",
                      "properties": {
                        "logic": {
                          "type": "string",
                          "enum": [
                            "AND",
                            "OR"
                          ],
                          "description": "* AND - requires approval of all authorization groups\n* OR - requires approval of at least one of the authorization groups\n"
                        },
                        "allowOperatorAsAuthorizer": {
                          "type": "boolean",
                          "description": "Defines whether the user who initiates a transaction can approve their own transaction and count toward the approval threshold for their transaction"
                        },
                        "groups": {
                          "type": "array",
                          "description": "Groups of entities which can approve the transaction",
                          "items": {
                            "type": "object",
                            "properties": {
                              "users": {
                                "type": "array",
                                "description": "User ids",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "usersGroups": {
                                "type": "array",
                                "description": "Group ids",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "th": {
                                "type": "number",
                                "description": "Represents the min amount of entities which are required to approve the transaction, default is 1."
                              }
                            }
                          }
                        }
                      }
                    },
                    "amountAggregation": {
                      "type": "object",
                      "description": "Defines the method by which the Policy Engine calculates accumulation.\nIt uses the Initiator, Source, and Destination to calculate accumulation toward the value under Minimum, for the time under Time Period.\n",
                      "properties": {
                        "operators": {
                          "type": "string",
                          "enum": [
                            "PER_SINGLE_MATCH",
                            "ACROSS_ALL_MATCHES"
                          ],
                          "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                        },
                        "srcTransferPeers": {
                          "type": "string",
                          "enum": [
                            "PER_SINGLE_MATCH",
                            "ACROSS_ALL_MATCHES"
                          ],
                          "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                        },
                        "dstTransferPeers": {
                          "type": "string",
                          "enum": [
                            "PER_SINGLE_MATCH",
                            "ACROSS_ALL_MATCHES"
                          ],
                          "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                        }
                      }
                    },
                    "rawMessageSigning": {
                      "type": "object",
                      "description": "Raw message signing configuration",
                      "properties": {
                        "algorithm": {
                          "type": "string"
                        },
                        "derivationPath": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    },
                    "applyForApprove": {
                      "type": "boolean",
                      "description": "Applying this rule over APPROVE type transactions (can only be enabled when rule's transaction type is TRANSFER)"
                    },
                    "applyForTypedMessage": {
                      "type": "boolean",
                      "description": "Applying this rule over TYPED_MESSAGE type transactions (can only be enabled when rule's transaction type is CONTRACT_CALL)"
                    },
                    "externalDescriptor": {
                      "type": "string",
                      "description": "A unique id identifying the rule"
                    }
                  },
                  "required": [
                    "type",
                    "action",
                    "asset",
                    "amountCurrency",
                    "amountScope",
                    "amount",
                    "periodSec",
                    "externalDescriptor"
                  ]
                }
              },
              "metadata": {
                "type": "object",
                "description": "Policy related metadata",
                "properties": {
                  "editedBy": {
                    "type": "string",
                    "description": "The user id of the user who last edited the policy"
                  },
                  "editedAt": {
                    "type": "string",
                    "description": "The timestamp of the last edit of the policy"
                  },
                  "publishedBy": {
                    "type": "string",
                    "description": "The user id of the user who last published the policy"
                  },
                  "publishedAt": {
                    "type": "string",
                    "description": "The timestamp of the last publish of the policy"
                  }
                }
              }
            },
            "required": [
              "rules",
              "metadata"
            ]
          },
          "validation": {
            "type": "object",
            "description": "Policy validation object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Validation status"
              },
              "checkResult": {
                "type": "object",
                "description": "Policy rules validation result",
                "properties": {
                  "errors": {
                    "type": "number",
                    "description": "Number of errors"
                  },
                  "result": {
                    "type": "array",
                    "description": "A set of validation results",
                    "items": {
                      "type": "object",
                      "description": "The rule validation result",
                      "properties": {
                        "index": {
                          "type": "number",
                          "description": "Rule index number in the policy"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "failure"
                          ],
                          "description": "Validation status"
                        },
                        "errors": {
                          "type": "array",
                          "description": "A set of rule validation error objects",
                          "items": {
                            "type": "object",
                            "description": "Rule validation result error",
                            "properties": {
                              "errorMessage": {
                                "type": "string",
                                "description": "Error message"
                              },
                              "errorCode": {
                                "type": "number",
                                "description": "error code"
                              },
                              "errorCodeName": {
                                "type": "string",
                                "description": "error code name"
                              },
                              "errorField": {
                                "type": "string",
                                "enum": [
                                  "operator",
                                  "operators",
                                  "authorizationGroups",
                                  "designatedSigner",
                                  "designatedSigners",
                                  "contractMethods",
                                  "amountAggregation",
                                  "src",
                                  "dst"
                                ],
                                "description": "The field which the error relates to\n* operator - transaction initiator\n* operators - transaction initiators\n* authorizationGroups - transaction authorizer groups\n* designatedSigner - transaction signer\n* designatedSigners - transaction signers\n* contractMethods - contract methods\n* amountAggregation - transaction amount aggregation configuration\n* src - transaction source asset configuration\n* dst - transaction destination asset configuration\n"
                              }
                            },
                            "required": [
                              "errorMessage",
                              "errorCode",
                              "errorCodeName",
                              "errorField"
                            ]
                          }
                        }
                      },
                      "required": [
                        "index",
                        "status",
                        "errors"
                      ]
                    }
                  }
                },
                "required": [
                  "errors",
                  "result"
                ]
              }
            },
            "required": [
              "status",
              "checkResult"
            ]
          }
        },
        "required": [
          "policy",
          "validation"
        ]
      },
      "description": "Get the active policy and its validation.\n\nReturns the active policy and its validation. </br>\n**Note:** These endpoints are currently in beta and might be subject to changes.\nIf you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "get",
      "path": "/tap/draft",
      "name": "tap_draft_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "object",
        "description": "Draft validation",
        "properties": {
          "draftResponse": {
            "type": "object",
            "description": "Response object for draft operations",
            "properties": {
              "status": {
                "type": "string",
                "description": "Operation status"
              },
              "rules": {
                "type": "array",
                "description": "Draft rules",
                "items": {
                  "type": "object",
                  "description": "Policy rule which is enforced on transactions",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "(deprecated - replaced by \"operators\")  | Defines users who can initiate the type of transaction to which the rule applies. options are * \"*\" - All users are allowed * Specific User id",
                      "deprecated": true
                    },
                    "operators": {
                      "type": "object",
                      "description": "Defines users/groups who can initiate the type of transaction to which the rule applies.",
                      "properties": {
                        "wildcard": {
                          "type": "string",
                          "enum": [
                            "*"
                          ],
                          "description": "If used then this property should appear as the only child property\n* \"*\" - All users are allowed\n"
                        },
                        "users": {
                          "type": "array",
                          "description": "Set of users ids",
                          "items": {
                            "type": "string"
                          }
                        },
                        "usersGroups": {
                          "type": "array",
                          "description": "Set of group ids",
                          "items": {
                            "type": "string"
                          }
                        },
                        "services": {
                          "type": "array",
                          "description": "set of services to initiate transactions",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "transactionType": {
                      "type": "string",
                      "enum": [
                        "TRANSFER",
                        "CONTRACT_CALL",
                        "APPROVE",
                        "MINT",
                        "BURN",
                        "SUPPLY",
                        "REDEEM",
                        "STAKE",
                        "RAW",
                        "TYPED_MESSAGE"
                      ],
                      "description": "Defines the type of transaction to which the rule applies.\n  * TRANSFER - Default. Transfers funds from one account to another\n  * CONTRACT_CALL - Calls a smart contract, mainly for DeFi operations.\n  * APPROVE - Allows a smart contract to withdraw from a designated wallet.\n  * MINT - Perform a mint operation (increase supply) on a supported token\n  * BURN - Perform a burn operation (reduce supply) on a supported token\n  * SUPPLY - Use for DeFi to lend assets\n  * REDEEM - Use for DeFi to get lending back\n  * STAKE - Allows you to allocate and lock certain assets for earning staking rewards.\n  * RAW - An off-chain message with no predefined format, use it to sign any message with your private key.\n  * TYPED_MESSAGE - An off-chain message type that follows a predefined format, used to sign specific messages that are not actual transactions.\n"
                    },
                    "designatedSigner": {
                      "type": "string",
                      "description": "(deprecated - replaced by \"designatedSigners\") Id representing the user who signs transactions that match a specific rule",
                      "deprecated": true
                    },
                    "designatedSigners": {
                      "type": "object",
                      "description": "Set of ids representing the users who signs transactions that match a specific rule",
                      "properties": {
                        "users": {
                          "type": "array",
                          "description": "Set of users ids",
                          "items": {
                            "type": "string"
                          }
                        },
                        "usersGroups": {
                          "type": "array",
                          "description": "Set of group ids",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "TRANSFER"
                      ],
                      "description": "Policy rule type"
                    },
                    "action": {
                      "type": "string",
                      "enum": [
                        "ALLOW",
                        "BLOCK",
                        "2-TIER"
                      ],
                      "description": "Defines what occurs when a transaction meets the rule's criteria\n* ALLOW - The transaction goes through and can be signed without requiring additional approvals\n* BLOCK - The transaction is automatically blocked\n* 2-TIER - Only these users or user groups can approve \n           If any of them reject the transaction before the required approval threshold is met, the transaction doesn't go through\n           The list of entities are set is \"authorizationGroups\" field\n"
                    },
                    "asset": {
                      "type": "string",
                      "description": "Defines the type of asset being transacted, options are\n* \"*\" - All assets\n* Specific asset\n"
                    },
                    "srcType": {
                      "description": "(deprecated - replaced by \"src\") source account type"
                    },
                    "srcSubType": {
                      "description": "(deprecated - replaced by \"src\") source sub account type"
                    },
                    "srcId": {
                      "description": "(deprecated - replaced by \"src\") source account id"
                    },
                    "src": {
                      "type": "object",
                      "description": "Defines source accounts the rule allows transfers to originate from",
                      "properties": {
                        "ids": {
                          "type": "array",
                          "description": "A set of ids",
                          "items": {
                            "type": "array",
                            "description": "A set of ids in a tuple format",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "maxItems": 3
                          }
                        }
                      }
                    },
                    "dstType": {
                      "description": "(deprecated - replaced by \"dst\") destination account type"
                    },
                    "dstSubType": {
                      "description": "(deprecated - replaced by \"dst\") destination sub account type"
                    },
                    "dstId": {
                      "description": "(deprecated - replaced by \"dst\") destination account id"
                    },
                    "dst": {
                      "type": "object",
                      "description": "Defines the destination accounts the rule allows transfers to",
                      "properties": {
                        "ids": {
                          "type": "array",
                          "description": "A set of ids",
                          "items": {
                            "type": "array",
                            "description": "A set of ids in a tuple format",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "maxItems": 3
                          }
                        }
                      }
                    },
                    "dstAddressType": {
                      "type": "string",
                      "enum": [
                        "WHITELISTED",
                        "ONE_TIME",
                        "*"
                      ],
                      "description": "Defines whether the destination to which you are sending funds must be whitelisted, to allow one-time transfers to non-whitelisted external addresses, or both.\nBy default, you can only transfer to an external address after it’s whitelisted.\n  * WHITELISTED - Can only be sent to whitelisted addresses.\n  * ONE_TIME - Can only be sent to non-whitelisted external addresses.\n  * \"*\" - can be sent to whitelisted addresses or non-whitelisted external\n"
                    },
                    "amountCurrency": {
                      "type": "string",
                      "enum": [
                        "USD",
                        "EUR",
                        "NATIVE"
                      ],
                      "description": "* USD - Limits the amount of any asset users can transfer based on the USD equivalent of the asset.\n* EUR - Limits the amount of any asset users can transfer based on the EURO equivalent of the asset.\n* NATIVE - Limits the amount of an asset a user can transfer when using a specific asset.\n"
                    },
                    "amountScope": {
                      "type": "string",
                      "enum": [
                        "SINGLE_TX",
                        "TIMEFRAME"
                      ],
                      "description": "* SINGLE_TX - limit applies to a single transaction\n* TIMEFRAME - limit applies to all transactions within the defined time period\n"
                    },
                    "amount": {
                      "type": "number",
                      "description": "Defines the value a transaction must exceed for the rule to apply to it (according to the amountCurrency field)"
                    },
                    "periodSec": {
                      "type": "number",
                      "description": "Time period in seconds applied by the amountScope field to accumulate transferred amounts in transactions that match the rule, until the total exceeds the value you specify under Minimum.\nWhen the specified amount is reached within that period, whether by one or many transactions, further transactions in that period either fail or require more approvals.\n"
                    },
                    "authorizers": {
                      "type": "array",
                      "description": "(deprecated - replaced by \"authorizationGroups\") Allowed entities which can approves a transaction",
                      "deprecated": true,
                      "items": {
                        "type": "string"
                      }
                    },
                    "authorizersCount": {
                      "type": "number",
                      "description": "(deprecated - replaced by \"authorizationGroups\") Min amount of entities which are needed to approve a transaction",
                      "deprecated": true
                    },
                    "authorizationGroups": {
                      "type": "object",
                      "description": "Defines the transaction approval terms",
                      "properties": {
                        "logic": {
                          "type": "string",
                          "enum": [
                            "AND",
                            "OR"
                          ],
                          "description": "* AND - requires approval of all authorization groups\n* OR - requires approval of at least one of the authorization groups\n"
                        },
                        "allowOperatorAsAuthorizer": {
                          "type": "boolean",
                          "description": "Defines whether the user who initiates a transaction can approve their own transaction and count toward the approval threshold for their transaction"
                        },
                        "groups": {
                          "type": "array",
                          "description": "Groups of entities which can approve the transaction",
                          "items": {
                            "type": "object",
                            "properties": {
                              "users": {
                                "type": "array",
                                "description": "User ids",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "usersGroups": {
                                "type": "array",
                                "description": "Group ids",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "th": {
                                "type": "number",
                                "description": "Represents the min amount of entities which are required to approve the transaction, default is 1."
                              }
                            }
                          }
                        }
                      }
                    },
                    "amountAggregation": {
                      "type": "object",
                      "description": "Defines the method by which the Policy Engine calculates accumulation.\nIt uses the Initiator, Source, and Destination to calculate accumulation toward the value under Minimum, for the time under Time Period.\n",
                      "properties": {
                        "operators": {
                          "type": "string",
                          "enum": [
                            "PER_SINGLE_MATCH",
                            "ACROSS_ALL_MATCHES"
                          ],
                          "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                        },
                        "srcTransferPeers": {
                          "type": "string",
                          "enum": [
                            "PER_SINGLE_MATCH",
                            "ACROSS_ALL_MATCHES"
                          ],
                          "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                        },
                        "dstTransferPeers": {
                          "type": "string",
                          "enum": [
                            "PER_SINGLE_MATCH",
                            "ACROSS_ALL_MATCHES"
                          ],
                          "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                        }
                      }
                    },
                    "rawMessageSigning": {
                      "type": "object",
                      "description": "Raw message signing configuration",
                      "properties": {
                        "algorithm": {
                          "type": "string"
                        },
                        "derivationPath": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    },
                    "applyForApprove": {
                      "type": "boolean",
                      "description": "Applying this rule over APPROVE type transactions (can only be enabled when rule's transaction type is TRANSFER)"
                    },
                    "applyForTypedMessage": {
                      "type": "boolean",
                      "description": "Applying this rule over TYPED_MESSAGE type transactions (can only be enabled when rule's transaction type is CONTRACT_CALL)"
                    },
                    "externalDescriptor": {
                      "type": "string",
                      "description": "A unique id identifying the rule"
                    }
                  },
                  "required": [
                    "type",
                    "action",
                    "asset",
                    "amountCurrency",
                    "amountScope",
                    "amount",
                    "periodSec",
                    "externalDescriptor"
                  ]
                }
              },
              "draftId": {
                "type": "string",
                "description": "Draft unique id"
              },
              "metadata": {
                "type": "object",
                "description": "Policy related metadata",
                "properties": {
                  "editedBy": {
                    "type": "string",
                    "description": "The user id of the user who last edited the policy"
                  },
                  "editedAt": {
                    "type": "string",
                    "description": "The timestamp of the last edit of the policy"
                  },
                  "publishedBy": {
                    "type": "string",
                    "description": "The user id of the user who last published the policy"
                  },
                  "publishedAt": {
                    "type": "string",
                    "description": "The timestamp of the last publish of the policy"
                  }
                }
              }
            },
            "required": [
              "draftId",
              "status",
              "rules",
              "metadata"
            ]
          },
          "validation": {
            "type": "object",
            "description": "Policy validation object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Validation status"
              },
              "checkResult": {
                "type": "object",
                "description": "Policy rules validation result",
                "properties": {
                  "errors": {
                    "type": "number",
                    "description": "Number of errors"
                  },
                  "result": {
                    "type": "array",
                    "description": "A set of validation results",
                    "items": {
                      "type": "object",
                      "description": "The rule validation result",
                      "properties": {
                        "index": {
                          "type": "number",
                          "description": "Rule index number in the policy"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "failure"
                          ],
                          "description": "Validation status"
                        },
                        "errors": {
                          "type": "array",
                          "description": "A set of rule validation error objects",
                          "items": {
                            "type": "object",
                            "description": "Rule validation result error",
                            "properties": {
                              "errorMessage": {
                                "type": "string",
                                "description": "Error message"
                              },
                              "errorCode": {
                                "type": "number",
                                "description": "error code"
                              },
                              "errorCodeName": {
                                "type": "string",
                                "description": "error code name"
                              },
                              "errorField": {
                                "type": "string",
                                "enum": [
                                  "operator",
                                  "operators",
                                  "authorizationGroups",
                                  "designatedSigner",
                                  "designatedSigners",
                                  "contractMethods",
                                  "amountAggregation",
                                  "src",
                                  "dst"
                                ],
                                "description": "The field which the error relates to\n* operator - transaction initiator\n* operators - transaction initiators\n* authorizationGroups - transaction authorizer groups\n* designatedSigner - transaction signer\n* designatedSigners - transaction signers\n* contractMethods - contract methods\n* amountAggregation - transaction amount aggregation configuration\n* src - transaction source asset configuration\n* dst - transaction destination asset configuration\n"
                              }
                            },
                            "required": [
                              "errorMessage",
                              "errorCode",
                              "errorCodeName",
                              "errorField"
                            ]
                          }
                        }
                      },
                      "required": [
                        "index",
                        "status",
                        "errors"
                      ]
                    }
                  }
                },
                "required": [
                  "errors",
                  "result"
                ]
              }
            },
            "required": [
              "status",
              "checkResult"
            ]
          }
        },
        "required": [
          "draftResponse",
          "validation"
        ]
      },
      "description": "Get the active draft.\n\nReturns the active draft and its validation. </br>\n**Note:** These endpoints are currently in beta and might be subject to changes.\nIf you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "post",
      "path": "/tap/draft",
      "name": "tap_draft_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "description": "Response object of the publish policy operation",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "UNVALIDATED",
              "INVALID_CONFIGURATION",
              "PENDING",
              "PENDING_CONSOLE_APPROVAL",
              "AWAITING_QUORUM",
              "UNHANDLED_ERROR"
            ],
            "description": "* SUCCESS - success\n* UNVALIDATED - not validated yet\n* INVALID_CONFIGURATION - at least one rule is invalid\n* PENDING - pending approval\n* PENDING_CONSOLE_APPROVAL - pending approval from the console app\n* AWAITING_QUORUM - pending quorum approval\n* UNHANDLED_ERROR - unhandled error\n"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Policy rule which is enforced on transactions",
              "properties": {
                "operator": {
                  "type": "string",
                  "description": "(deprecated - replaced by \"operators\")  | Defines users who can initiate the type of transaction to which the rule applies. options are * \"*\" - All users are allowed * Specific User id",
                  "deprecated": true
                },
                "operators": {
                  "type": "object",
                  "description": "Defines users/groups who can initiate the type of transaction to which the rule applies.",
                  "properties": {
                    "wildcard": {
                      "type": "string",
                      "enum": [
                        "*"
                      ],
                      "description": "If used then this property should appear as the only child property\n* \"*\" - All users are allowed\n"
                    },
                    "users": {
                      "type": "array",
                      "description": "Set of users ids",
                      "items": {
                        "type": "string"
                      }
                    },
                    "usersGroups": {
                      "type": "array",
                      "description": "Set of group ids",
                      "items": {
                        "type": "string"
                      }
                    },
                    "services": {
                      "type": "array",
                      "description": "set of services to initiate transactions",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "transactionType": {
                  "type": "string",
                  "enum": [
                    "TRANSFER",
                    "CONTRACT_CALL",
                    "APPROVE",
                    "MINT",
                    "BURN",
                    "SUPPLY",
                    "REDEEM",
                    "STAKE",
                    "RAW",
                    "TYPED_MESSAGE"
                  ],
                  "description": "Defines the type of transaction to which the rule applies.\n  * TRANSFER - Default. Transfers funds from one account to another\n  * CONTRACT_CALL - Calls a smart contract, mainly for DeFi operations.\n  * APPROVE - Allows a smart contract to withdraw from a designated wallet.\n  * MINT - Perform a mint operation (increase supply) on a supported token\n  * BURN - Perform a burn operation (reduce supply) on a supported token\n  * SUPPLY - Use for DeFi to lend assets\n  * REDEEM - Use for DeFi to get lending back\n  * STAKE - Allows you to allocate and lock certain assets for earning staking rewards.\n  * RAW - An off-chain message with no predefined format, use it to sign any message with your private key.\n  * TYPED_MESSAGE - An off-chain message type that follows a predefined format, used to sign specific messages that are not actual transactions.\n"
                },
                "designatedSigner": {
                  "type": "string",
                  "description": "(deprecated - replaced by \"designatedSigners\") Id representing the user who signs transactions that match a specific rule",
                  "deprecated": true
                },
                "designatedSigners": {
                  "type": "object",
                  "description": "Set of ids representing the users who signs transactions that match a specific rule",
                  "properties": {
                    "users": {
                      "type": "array",
                      "description": "Set of users ids",
                      "items": {
                        "type": "string"
                      }
                    },
                    "usersGroups": {
                      "type": "array",
                      "description": "Set of group ids",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "TRANSFER"
                  ],
                  "description": "Policy rule type"
                },
                "action": {
                  "type": "string",
                  "enum": [
                    "ALLOW",
                    "BLOCK",
                    "2-TIER"
                  ],
                  "description": "Defines what occurs when a transaction meets the rule's criteria\n* ALLOW - The transaction goes through and can be signed without requiring additional approvals\n* BLOCK - The transaction is automatically blocked\n* 2-TIER - Only these users or user groups can approve \n           If any of them reject the transaction before the required approval threshold is met, the transaction doesn't go through\n           The list of entities are set is \"authorizationGroups\" field\n"
                },
                "asset": {
                  "type": "string",
                  "description": "Defines the type of asset being transacted, options are\n* \"*\" - All assets\n* Specific asset\n"
                },
                "srcType": {
                  "description": "(deprecated - replaced by \"src\") source account type"
                },
                "srcSubType": {
                  "description": "(deprecated - replaced by \"src\") source sub account type"
                },
                "srcId": {
                  "description": "(deprecated - replaced by \"src\") source account id"
                },
                "src": {
                  "type": "object",
                  "description": "Defines source accounts the rule allows transfers to originate from",
                  "properties": {
                    "ids": {
                      "type": "array",
                      "description": "A set of ids",
                      "items": {
                        "type": "array",
                        "description": "A set of ids in a tuple format",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "maxItems": 3
                      }
                    }
                  }
                },
                "dstType": {
                  "description": "(deprecated - replaced by \"dst\") destination account type"
                },
                "dstSubType": {
                  "description": "(deprecated - replaced by \"dst\") destination sub account type"
                },
                "dstId": {
                  "description": "(deprecated - replaced by \"dst\") destination account id"
                },
                "dst": {
                  "type": "object",
                  "description": "Defines the destination accounts the rule allows transfers to",
                  "properties": {
                    "ids": {
                      "type": "array",
                      "description": "A set of ids",
                      "items": {
                        "type": "array",
                        "description": "A set of ids in a tuple format",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "maxItems": 3
                      }
                    }
                  }
                },
                "dstAddressType": {
                  "type": "string",
                  "enum": [
                    "WHITELISTED",
                    "ONE_TIME",
                    "*"
                  ],
                  "description": "Defines whether the destination to which you are sending funds must be whitelisted, to allow one-time transfers to non-whitelisted external addresses, or both.\nBy default, you can only transfer to an external address after it’s whitelisted.\n  * WHITELISTED - Can only be sent to whitelisted addresses.\n  * ONE_TIME - Can only be sent to non-whitelisted external addresses.\n  * \"*\" - can be sent to whitelisted addresses or non-whitelisted external\n"
                },
                "amountCurrency": {
                  "type": "string",
                  "enum": [
                    "USD",
                    "EUR",
                    "NATIVE"
                  ],
                  "description": "* USD - Limits the amount of any asset users can transfer based on the USD equivalent of the asset.\n* EUR - Limits the amount of any asset users can transfer based on the EURO equivalent of the asset.\n* NATIVE - Limits the amount of an asset a user can transfer when using a specific asset.\n"
                },
                "amountScope": {
                  "type": "string",
                  "enum": [
                    "SINGLE_TX",
                    "TIMEFRAME"
                  ],
                  "description": "* SINGLE_TX - limit applies to a single transaction\n* TIMEFRAME - limit applies to all transactions within the defined time period\n"
                },
                "amount": {
                  "type": "number",
                  "description": "Defines the value a transaction must exceed for the rule to apply to it (according to the amountCurrency field)"
                },
                "periodSec": {
                  "type": "number",
                  "description": "Time period in seconds applied by the amountScope field to accumulate transferred amounts in transactions that match the rule, until the total exceeds the value you specify under Minimum.\nWhen the specified amount is reached within that period, whether by one or many transactions, further transactions in that period either fail or require more approvals.\n"
                },
                "authorizers": {
                  "type": "array",
                  "description": "(deprecated - replaced by \"authorizationGroups\") Allowed entities which can approves a transaction",
                  "deprecated": true,
                  "items": {
                    "type": "string"
                  }
                },
                "authorizersCount": {
                  "type": "number",
                  "description": "(deprecated - replaced by \"authorizationGroups\") Min amount of entities which are needed to approve a transaction",
                  "deprecated": true
                },
                "authorizationGroups": {
                  "type": "object",
                  "description": "Defines the transaction approval terms",
                  "properties": {
                    "logic": {
                      "type": "string",
                      "enum": [
                        "AND",
                        "OR"
                      ],
                      "description": "* AND - requires approval of all authorization groups\n* OR - requires approval of at least one of the authorization groups\n"
                    },
                    "allowOperatorAsAuthorizer": {
                      "type": "boolean",
                      "description": "Defines whether the user who initiates a transaction can approve their own transaction and count toward the approval threshold for their transaction"
                    },
                    "groups": {
                      "type": "array",
                      "description": "Groups of entities which can approve the transaction",
                      "items": {
                        "type": "object",
                        "properties": {
                          "users": {
                            "type": "array",
                            "description": "User ids",
                            "items": {
                              "type": "string"
                            }
                          },
                          "usersGroups": {
                            "type": "array",
                            "description": "Group ids",
                            "items": {
                              "type": "string"
                            }
                          },
                          "th": {
                            "type": "number",
                            "description": "Represents the min amount of entities which are required to approve the transaction, default is 1."
                          }
                        }
                      }
                    }
                  }
                },
                "amountAggregation": {
                  "type": "object",
                  "description": "Defines the method by which the Policy Engine calculates accumulation.\nIt uses the Initiator, Source, and Destination to calculate accumulation toward the value under Minimum, for the time under Time Period.\n",
                  "properties": {
                    "operators": {
                      "type": "string",
                      "enum": [
                        "PER_SINGLE_MATCH",
                        "ACROSS_ALL_MATCHES"
                      ],
                      "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                    },
                    "srcTransferPeers": {
                      "type": "string",
                      "enum": [
                        "PER_SINGLE_MATCH",
                        "ACROSS_ALL_MATCHES"
                      ],
                      "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                    },
                    "dstTransferPeers": {
                      "type": "string",
                      "enum": [
                        "PER_SINGLE_MATCH",
                        "ACROSS_ALL_MATCHES"
                      ],
                      "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                    }
                  }
                },
                "rawMessageSigning": {
                  "type": "object",
                  "description": "Raw message signing configuration",
                  "properties": {
                    "algorithm": {
                      "type": "string"
                    },
                    "derivationPath": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "applyForApprove": {
                  "type": "boolean",
                  "description": "Applying this rule over APPROVE type transactions (can only be enabled when rule's transaction type is TRANSFER)"
                },
                "applyForTypedMessage": {
                  "type": "boolean",
                  "description": "Applying this rule over TYPED_MESSAGE type transactions (can only be enabled when rule's transaction type is CONTRACT_CALL)"
                },
                "externalDescriptor": {
                  "type": "string",
                  "description": "A unique id identifying the rule"
                }
              },
              "required": [
                "type",
                "action",
                "asset",
                "amountCurrency",
                "amountScope",
                "amount",
                "periodSec",
                "externalDescriptor"
              ]
            }
          },
          "checkResult": {
            "type": "object",
            "description": "Policy rules validation result",
            "properties": {
              "errors": {
                "type": "number",
                "description": "Number of errors"
              },
              "result": {
                "type": "array",
                "description": "A set of validation results",
                "items": {
                  "type": "object",
                  "description": "The rule validation result",
                  "properties": {
                    "index": {
                      "type": "number",
                      "description": "Rule index number in the policy"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok",
                        "failure"
                      ],
                      "description": "Validation status"
                    },
                    "errors": {
                      "type": "array",
                      "description": "A set of rule validation error objects",
                      "items": {
                        "type": "object",
                        "description": "Rule validation result error",
                        "properties": {
                          "errorMessage": {
                            "type": "string",
                            "description": "Error message"
                          },
                          "errorCode": {
                            "type": "number",
                            "description": "error code"
                          },
                          "errorCodeName": {
                            "type": "string",
                            "description": "error code name"
                          },
                          "errorField": {
                            "type": "string",
                            "enum": [
                              "operator",
                              "operators",
                              "authorizationGroups",
                              "designatedSigner",
                              "designatedSigners",
                              "contractMethods",
                              "amountAggregation",
                              "src",
                              "dst"
                            ],
                            "description": "The field which the error relates to\n* operator - transaction initiator\n* operators - transaction initiators\n* authorizationGroups - transaction authorizer groups\n* designatedSigner - transaction signer\n* designatedSigners - transaction signers\n* contractMethods - contract methods\n* amountAggregation - transaction amount aggregation configuration\n* src - transaction source asset configuration\n* dst - transaction destination asset configuration\n"
                          }
                        },
                        "required": [
                          "errorMessage",
                          "errorCode",
                          "errorCodeName",
                          "errorField"
                        ]
                      }
                    }
                  },
                  "required": [
                    "index",
                    "status",
                    "errors"
                  ]
                }
              }
            },
            "required": [
              "errors",
              "result"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Policy related metadata",
            "properties": {
              "editedBy": {
                "type": "string",
                "description": "The user id of the user who last edited the policy"
              },
              "editedAt": {
                "type": "string",
                "description": "The timestamp of the last edit of the policy"
              },
              "publishedBy": {
                "type": "string",
                "description": "The user id of the user who last published the policy"
              },
              "publishedAt": {
                "type": "string",
                "description": "The timestamp of the last publish of the policy"
              }
            }
          }
        },
        "required": [
          "status",
          "rules",
          "checkResult",
          "metadata"
        ]
      },
      "description": "Send publish request for a certain draft id.\n\nSend publish request of certain draft id and returns the response. </br>\n**Note:** These endpoints are currently in beta and might be subject to changes.\nIf you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "put",
      "path": "/tap/draft",
      "name": "tap_draft_put",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "description": "Draft validation",
        "properties": {
          "draftResponse": {
            "type": "object",
            "description": "Response object for draft operations",
            "properties": {
              "status": {
                "type": "string",
                "description": "Operation status"
              },
              "rules": {
                "type": "array",
                "description": "Draft rules",
                "items": {
                  "type": "object",
                  "description": "Policy rule which is enforced on transactions",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "(deprecated - replaced by \"operators\")  | Defines users who can initiate the type of transaction to which the rule applies. options are * \"*\" - All users are allowed * Specific User id",
                      "deprecated": true
                    },
                    "operators": {
                      "type": "object",
                      "description": "Defines users/groups who can initiate the type of transaction to which the rule applies.",
                      "properties": {
                        "wildcard": {
                          "type": "string",
                          "enum": [
                            "*"
                          ],
                          "description": "If used then this property should appear as the only child property\n* \"*\" - All users are allowed\n"
                        },
                        "users": {
                          "type": "array",
                          "description": "Set of users ids",
                          "items": {
                            "type": "string"
                          }
                        },
                        "usersGroups": {
                          "type": "array",
                          "description": "Set of group ids",
                          "items": {
                            "type": "string"
                          }
                        },
                        "services": {
                          "type": "array",
                          "description": "set of services to initiate transactions",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "transactionType": {
                      "type": "string",
                      "enum": [
                        "TRANSFER",
                        "CONTRACT_CALL",
                        "APPROVE",
                        "MINT",
                        "BURN",
                        "SUPPLY",
                        "REDEEM",
                        "STAKE",
                        "RAW",
                        "TYPED_MESSAGE"
                      ],
                      "description": "Defines the type of transaction to which the rule applies.\n  * TRANSFER - Default. Transfers funds from one account to another\n  * CONTRACT_CALL - Calls a smart contract, mainly for DeFi operations.\n  * APPROVE - Allows a smart contract to withdraw from a designated wallet.\n  * MINT - Perform a mint operation (increase supply) on a supported token\n  * BURN - Perform a burn operation (reduce supply) on a supported token\n  * SUPPLY - Use for DeFi to lend assets\n  * REDEEM - Use for DeFi to get lending back\n  * STAKE - Allows you to allocate and lock certain assets for earning staking rewards.\n  * RAW - An off-chain message with no predefined format, use it to sign any message with your private key.\n  * TYPED_MESSAGE - An off-chain message type that follows a predefined format, used to sign specific messages that are not actual transactions.\n"
                    },
                    "designatedSigner": {
                      "type": "string",
                      "description": "(deprecated - replaced by \"designatedSigners\") Id representing the user who signs transactions that match a specific rule",
                      "deprecated": true
                    },
                    "designatedSigners": {
                      "type": "object",
                      "description": "Set of ids representing the users who signs transactions that match a specific rule",
                      "properties": {
                        "users": {
                          "type": "array",
                          "description": "Set of users ids",
                          "items": {
                            "type": "string"
                          }
                        },
                        "usersGroups": {
                          "type": "array",
                          "description": "Set of group ids",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "TRANSFER"
                      ],
                      "description": "Policy rule type"
                    },
                    "action": {
                      "type": "string",
                      "enum": [
                        "ALLOW",
                        "BLOCK",
                        "2-TIER"
                      ],
                      "description": "Defines what occurs when a transaction meets the rule's criteria\n* ALLOW - The transaction goes through and can be signed without requiring additional approvals\n* BLOCK - The transaction is automatically blocked\n* 2-TIER - Only these users or user groups can approve \n           If any of them reject the transaction before the required approval threshold is met, the transaction doesn't go through\n           The list of entities are set is \"authorizationGroups\" field\n"
                    },
                    "asset": {
                      "type": "string",
                      "description": "Defines the type of asset being transacted, options are\n* \"*\" - All assets\n* Specific asset\n"
                    },
                    "srcType": {
                      "description": "(deprecated - replaced by \"src\") source account type"
                    },
                    "srcSubType": {
                      "description": "(deprecated - replaced by \"src\") source sub account type"
                    },
                    "srcId": {
                      "description": "(deprecated - replaced by \"src\") source account id"
                    },
                    "src": {
                      "type": "object",
                      "description": "Defines source accounts the rule allows transfers to originate from",
                      "properties": {
                        "ids": {
                          "type": "array",
                          "description": "A set of ids",
                          "items": {
                            "type": "array",
                            "description": "A set of ids in a tuple format",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "maxItems": 3
                          }
                        }
                      }
                    },
                    "dstType": {
                      "description": "(deprecated - replaced by \"dst\") destination account type"
                    },
                    "dstSubType": {
                      "description": "(deprecated - replaced by \"dst\") destination sub account type"
                    },
                    "dstId": {
                      "description": "(deprecated - replaced by \"dst\") destination account id"
                    },
                    "dst": {
                      "type": "object",
                      "description": "Defines the destination accounts the rule allows transfers to",
                      "properties": {
                        "ids": {
                          "type": "array",
                          "description": "A set of ids",
                          "items": {
                            "type": "array",
                            "description": "A set of ids in a tuple format",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "maxItems": 3
                          }
                        }
                      }
                    },
                    "dstAddressType": {
                      "type": "string",
                      "enum": [
                        "WHITELISTED",
                        "ONE_TIME",
                        "*"
                      ],
                      "description": "Defines whether the destination to which you are sending funds must be whitelisted, to allow one-time transfers to non-whitelisted external addresses, or both.\nBy default, you can only transfer to an external address after it’s whitelisted.\n  * WHITELISTED - Can only be sent to whitelisted addresses.\n  * ONE_TIME - Can only be sent to non-whitelisted external addresses.\n  * \"*\" - can be sent to whitelisted addresses or non-whitelisted external\n"
                    },
                    "amountCurrency": {
                      "type": "string",
                      "enum": [
                        "USD",
                        "EUR",
                        "NATIVE"
                      ],
                      "description": "* USD - Limits the amount of any asset users can transfer based on the USD equivalent of the asset.\n* EUR - Limits the amount of any asset users can transfer based on the EURO equivalent of the asset.\n* NATIVE - Limits the amount of an asset a user can transfer when using a specific asset.\n"
                    },
                    "amountScope": {
                      "type": "string",
                      "enum": [
                        "SINGLE_TX",
                        "TIMEFRAME"
                      ],
                      "description": "* SINGLE_TX - limit applies to a single transaction\n* TIMEFRAME - limit applies to all transactions within the defined time period\n"
                    },
                    "amount": {
                      "type": "number",
                      "description": "Defines the value a transaction must exceed for the rule to apply to it (according to the amountCurrency field)"
                    },
                    "periodSec": {
                      "type": "number",
                      "description": "Time period in seconds applied by the amountScope field to accumulate transferred amounts in transactions that match the rule, until the total exceeds the value you specify under Minimum.\nWhen the specified amount is reached within that period, whether by one or many transactions, further transactions in that period either fail or require more approvals.\n"
                    },
                    "authorizers": {
                      "type": "array",
                      "description": "(deprecated - replaced by \"authorizationGroups\") Allowed entities which can approves a transaction",
                      "deprecated": true,
                      "items": {
                        "type": "string"
                      }
                    },
                    "authorizersCount": {
                      "type": "number",
                      "description": "(deprecated - replaced by \"authorizationGroups\") Min amount of entities which are needed to approve a transaction",
                      "deprecated": true
                    },
                    "authorizationGroups": {
                      "type": "object",
                      "description": "Defines the transaction approval terms",
                      "properties": {
                        "logic": {
                          "type": "string",
                          "enum": [
                            "AND",
                            "OR"
                          ],
                          "description": "* AND - requires approval of all authorization groups\n* OR - requires approval of at least one of the authorization groups\n"
                        },
                        "allowOperatorAsAuthorizer": {
                          "type": "boolean",
                          "description": "Defines whether the user who initiates a transaction can approve their own transaction and count toward the approval threshold for their transaction"
                        },
                        "groups": {
                          "type": "array",
                          "description": "Groups of entities which can approve the transaction",
                          "items": {
                            "type": "object",
                            "properties": {
                              "users": {
                                "type": "array",
                                "description": "User ids",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "usersGroups": {
                                "type": "array",
                                "description": "Group ids",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "th": {
                                "type": "number",
                                "description": "Represents the min amount of entities which are required to approve the transaction, default is 1."
                              }
                            }
                          }
                        }
                      }
                    },
                    "amountAggregation": {
                      "type": "object",
                      "description": "Defines the method by which the Policy Engine calculates accumulation.\nIt uses the Initiator, Source, and Destination to calculate accumulation toward the value under Minimum, for the time under Time Period.\n",
                      "properties": {
                        "operators": {
                          "type": "string",
                          "enum": [
                            "PER_SINGLE_MATCH",
                            "ACROSS_ALL_MATCHES"
                          ],
                          "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                        },
                        "srcTransferPeers": {
                          "type": "string",
                          "enum": [
                            "PER_SINGLE_MATCH",
                            "ACROSS_ALL_MATCHES"
                          ],
                          "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                        },
                        "dstTransferPeers": {
                          "type": "string",
                          "enum": [
                            "PER_SINGLE_MATCH",
                            "ACROSS_ALL_MATCHES"
                          ],
                          "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                        }
                      }
                    },
                    "rawMessageSigning": {
                      "type": "object",
                      "description": "Raw message signing configuration",
                      "properties": {
                        "algorithm": {
                          "type": "string"
                        },
                        "derivationPath": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    },
                    "applyForApprove": {
                      "type": "boolean",
                      "description": "Applying this rule over APPROVE type transactions (can only be enabled when rule's transaction type is TRANSFER)"
                    },
                    "applyForTypedMessage": {
                      "type": "boolean",
                      "description": "Applying this rule over TYPED_MESSAGE type transactions (can only be enabled when rule's transaction type is CONTRACT_CALL)"
                    },
                    "externalDescriptor": {
                      "type": "string",
                      "description": "A unique id identifying the rule"
                    }
                  },
                  "required": [
                    "type",
                    "action",
                    "asset",
                    "amountCurrency",
                    "amountScope",
                    "amount",
                    "periodSec",
                    "externalDescriptor"
                  ]
                }
              },
              "draftId": {
                "type": "string",
                "description": "Draft unique id"
              },
              "metadata": {
                "type": "object",
                "description": "Policy related metadata",
                "properties": {
                  "editedBy": {
                    "type": "string",
                    "description": "The user id of the user who last edited the policy"
                  },
                  "editedAt": {
                    "type": "string",
                    "description": "The timestamp of the last edit of the policy"
                  },
                  "publishedBy": {
                    "type": "string",
                    "description": "The user id of the user who last published the policy"
                  },
                  "publishedAt": {
                    "type": "string",
                    "description": "The timestamp of the last publish of the policy"
                  }
                }
              }
            },
            "required": [
              "draftId",
              "status",
              "rules",
              "metadata"
            ]
          },
          "validation": {
            "type": "object",
            "description": "Policy validation object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Validation status"
              },
              "checkResult": {
                "type": "object",
                "description": "Policy rules validation result",
                "properties": {
                  "errors": {
                    "type": "number",
                    "description": "Number of errors"
                  },
                  "result": {
                    "type": "array",
                    "description": "A set of validation results",
                    "items": {
                      "type": "object",
                      "description": "The rule validation result",
                      "properties": {
                        "index": {
                          "type": "number",
                          "description": "Rule index number in the policy"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "failure"
                          ],
                          "description": "Validation status"
                        },
                        "errors": {
                          "type": "array",
                          "description": "A set of rule validation error objects",
                          "items": {
                            "type": "object",
                            "description": "Rule validation result error",
                            "properties": {
                              "errorMessage": {
                                "type": "string",
                                "description": "Error message"
                              },
                              "errorCode": {
                                "type": "number",
                                "description": "error code"
                              },
                              "errorCodeName": {
                                "type": "string",
                                "description": "error code name"
                              },
                              "errorField": {
                                "type": "string",
                                "enum": [
                                  "operator",
                                  "operators",
                                  "authorizationGroups",
                                  "designatedSigner",
                                  "designatedSigners",
                                  "contractMethods",
                                  "amountAggregation",
                                  "src",
                                  "dst"
                                ],
                                "description": "The field which the error relates to\n* operator - transaction initiator\n* operators - transaction initiators\n* authorizationGroups - transaction authorizer groups\n* designatedSigner - transaction signer\n* designatedSigners - transaction signers\n* contractMethods - contract methods\n* amountAggregation - transaction amount aggregation configuration\n* src - transaction source asset configuration\n* dst - transaction destination asset configuration\n"
                              }
                            },
                            "required": [
                              "errorMessage",
                              "errorCode",
                              "errorCodeName",
                              "errorField"
                            ]
                          }
                        }
                      },
                      "required": [
                        "index",
                        "status",
                        "errors"
                      ]
                    }
                  }
                },
                "required": [
                  "errors",
                  "result"
                ]
              }
            },
            "required": [
              "status",
              "checkResult"
            ]
          }
        },
        "required": [
          "draftResponse",
          "validation"
        ]
      },
      "description": "Update the draft with a new set of rules.\n\nUpdate the draft and return its validation. </br>\n**Note:** These endpoints are currently in beta and might be subject to changes.\nIf you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    },
    {
      "method": "post",
      "path": "/tap/publish",
      "name": "tap_publish_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {}
          }
        }
      ],
      "output": {
        "type": "object",
        "description": "Response object of the publish policy operation",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "UNVALIDATED",
              "INVALID_CONFIGURATION",
              "PENDING",
              "PENDING_CONSOLE_APPROVAL",
              "AWAITING_QUORUM",
              "UNHANDLED_ERROR"
            ],
            "description": "* SUCCESS - success\n* UNVALIDATED - not validated yet\n* INVALID_CONFIGURATION - at least one rule is invalid\n* PENDING - pending approval\n* PENDING_CONSOLE_APPROVAL - pending approval from the console app\n* AWAITING_QUORUM - pending quorum approval\n* UNHANDLED_ERROR - unhandled error\n"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Policy rule which is enforced on transactions",
              "properties": {
                "operator": {
                  "type": "string",
                  "description": "(deprecated - replaced by \"operators\")  | Defines users who can initiate the type of transaction to which the rule applies. options are * \"*\" - All users are allowed * Specific User id",
                  "deprecated": true
                },
                "operators": {
                  "type": "object",
                  "description": "Defines users/groups who can initiate the type of transaction to which the rule applies.",
                  "properties": {
                    "wildcard": {
                      "type": "string",
                      "enum": [
                        "*"
                      ],
                      "description": "If used then this property should appear as the only child property\n* \"*\" - All users are allowed\n"
                    },
                    "users": {
                      "type": "array",
                      "description": "Set of users ids",
                      "items": {
                        "type": "string"
                      }
                    },
                    "usersGroups": {
                      "type": "array",
                      "description": "Set of group ids",
                      "items": {
                        "type": "string"
                      }
                    },
                    "services": {
                      "type": "array",
                      "description": "set of services to initiate transactions",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "transactionType": {
                  "type": "string",
                  "enum": [
                    "TRANSFER",
                    "CONTRACT_CALL",
                    "APPROVE",
                    "MINT",
                    "BURN",
                    "SUPPLY",
                    "REDEEM",
                    "STAKE",
                    "RAW",
                    "TYPED_MESSAGE"
                  ],
                  "description": "Defines the type of transaction to which the rule applies.\n  * TRANSFER - Default. Transfers funds from one account to another\n  * CONTRACT_CALL - Calls a smart contract, mainly for DeFi operations.\n  * APPROVE - Allows a smart contract to withdraw from a designated wallet.\n  * MINT - Perform a mint operation (increase supply) on a supported token\n  * BURN - Perform a burn operation (reduce supply) on a supported token\n  * SUPPLY - Use for DeFi to lend assets\n  * REDEEM - Use for DeFi to get lending back\n  * STAKE - Allows you to allocate and lock certain assets for earning staking rewards.\n  * RAW - An off-chain message with no predefined format, use it to sign any message with your private key.\n  * TYPED_MESSAGE - An off-chain message type that follows a predefined format, used to sign specific messages that are not actual transactions.\n"
                },
                "designatedSigner": {
                  "type": "string",
                  "description": "(deprecated - replaced by \"designatedSigners\") Id representing the user who signs transactions that match a specific rule",
                  "deprecated": true
                },
                "designatedSigners": {
                  "type": "object",
                  "description": "Set of ids representing the users who signs transactions that match a specific rule",
                  "properties": {
                    "users": {
                      "type": "array",
                      "description": "Set of users ids",
                      "items": {
                        "type": "string"
                      }
                    },
                    "usersGroups": {
                      "type": "array",
                      "description": "Set of group ids",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "TRANSFER"
                  ],
                  "description": "Policy rule type"
                },
                "action": {
                  "type": "string",
                  "enum": [
                    "ALLOW",
                    "BLOCK",
                    "2-TIER"
                  ],
                  "description": "Defines what occurs when a transaction meets the rule's criteria\n* ALLOW - The transaction goes through and can be signed without requiring additional approvals\n* BLOCK - The transaction is automatically blocked\n* 2-TIER - Only these users or user groups can approve \n           If any of them reject the transaction before the required approval threshold is met, the transaction doesn't go through\n           The list of entities are set is \"authorizationGroups\" field\n"
                },
                "asset": {
                  "type": "string",
                  "description": "Defines the type of asset being transacted, options are\n* \"*\" - All assets\n* Specific asset\n"
                },
                "srcType": {
                  "description": "(deprecated - replaced by \"src\") source account type"
                },
                "srcSubType": {
                  "description": "(deprecated - replaced by \"src\") source sub account type"
                },
                "srcId": {
                  "description": "(deprecated - replaced by \"src\") source account id"
                },
                "src": {
                  "type": "object",
                  "description": "Defines source accounts the rule allows transfers to originate from",
                  "properties": {
                    "ids": {
                      "type": "array",
                      "description": "A set of ids",
                      "items": {
                        "type": "array",
                        "description": "A set of ids in a tuple format",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "maxItems": 3
                      }
                    }
                  }
                },
                "dstType": {
                  "description": "(deprecated - replaced by \"dst\") destination account type"
                },
                "dstSubType": {
                  "description": "(deprecated - replaced by \"dst\") destination sub account type"
                },
                "dstId": {
                  "description": "(deprecated - replaced by \"dst\") destination account id"
                },
                "dst": {
                  "type": "object",
                  "description": "Defines the destination accounts the rule allows transfers to",
                  "properties": {
                    "ids": {
                      "type": "array",
                      "description": "A set of ids",
                      "items": {
                        "type": "array",
                        "description": "A set of ids in a tuple format",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "maxItems": 3
                      }
                    }
                  }
                },
                "dstAddressType": {
                  "type": "string",
                  "enum": [
                    "WHITELISTED",
                    "ONE_TIME",
                    "*"
                  ],
                  "description": "Defines whether the destination to which you are sending funds must be whitelisted, to allow one-time transfers to non-whitelisted external addresses, or both.\nBy default, you can only transfer to an external address after it’s whitelisted.\n  * WHITELISTED - Can only be sent to whitelisted addresses.\n  * ONE_TIME - Can only be sent to non-whitelisted external addresses.\n  * \"*\" - can be sent to whitelisted addresses or non-whitelisted external\n"
                },
                "amountCurrency": {
                  "type": "string",
                  "enum": [
                    "USD",
                    "EUR",
                    "NATIVE"
                  ],
                  "description": "* USD - Limits the amount of any asset users can transfer based on the USD equivalent of the asset.\n* EUR - Limits the amount of any asset users can transfer based on the EURO equivalent of the asset.\n* NATIVE - Limits the amount of an asset a user can transfer when using a specific asset.\n"
                },
                "amountScope": {
                  "type": "string",
                  "enum": [
                    "SINGLE_TX",
                    "TIMEFRAME"
                  ],
                  "description": "* SINGLE_TX - limit applies to a single transaction\n* TIMEFRAME - limit applies to all transactions within the defined time period\n"
                },
                "amount": {
                  "type": "number",
                  "description": "Defines the value a transaction must exceed for the rule to apply to it (according to the amountCurrency field)"
                },
                "periodSec": {
                  "type": "number",
                  "description": "Time period in seconds applied by the amountScope field to accumulate transferred amounts in transactions that match the rule, until the total exceeds the value you specify under Minimum.\nWhen the specified amount is reached within that period, whether by one or many transactions, further transactions in that period either fail or require more approvals.\n"
                },
                "authorizers": {
                  "type": "array",
                  "description": "(deprecated - replaced by \"authorizationGroups\") Allowed entities which can approves a transaction",
                  "deprecated": true,
                  "items": {
                    "type": "string"
                  }
                },
                "authorizersCount": {
                  "type": "number",
                  "description": "(deprecated - replaced by \"authorizationGroups\") Min amount of entities which are needed to approve a transaction",
                  "deprecated": true
                },
                "authorizationGroups": {
                  "type": "object",
                  "description": "Defines the transaction approval terms",
                  "properties": {
                    "logic": {
                      "type": "string",
                      "enum": [
                        "AND",
                        "OR"
                      ],
                      "description": "* AND - requires approval of all authorization groups\n* OR - requires approval of at least one of the authorization groups\n"
                    },
                    "allowOperatorAsAuthorizer": {
                      "type": "boolean",
                      "description": "Defines whether the user who initiates a transaction can approve their own transaction and count toward the approval threshold for their transaction"
                    },
                    "groups": {
                      "type": "array",
                      "description": "Groups of entities which can approve the transaction",
                      "items": {
                        "type": "object",
                        "properties": {
                          "users": {
                            "type": "array",
                            "description": "User ids",
                            "items": {
                              "type": "string"
                            }
                          },
                          "usersGroups": {
                            "type": "array",
                            "description": "Group ids",
                            "items": {
                              "type": "string"
                            }
                          },
                          "th": {
                            "type": "number",
                            "description": "Represents the min amount of entities which are required to approve the transaction, default is 1."
                          }
                        }
                      }
                    }
                  }
                },
                "amountAggregation": {
                  "type": "object",
                  "description": "Defines the method by which the Policy Engine calculates accumulation.\nIt uses the Initiator, Source, and Destination to calculate accumulation toward the value under Minimum, for the time under Time Period.\n",
                  "properties": {
                    "operators": {
                      "type": "string",
                      "enum": [
                        "PER_SINGLE_MATCH",
                        "ACROSS_ALL_MATCHES"
                      ],
                      "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                    },
                    "srcTransferPeers": {
                      "type": "string",
                      "enum": [
                        "PER_SINGLE_MATCH",
                        "ACROSS_ALL_MATCHES"
                      ],
                      "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                    },
                    "dstTransferPeers": {
                      "type": "string",
                      "enum": [
                        "PER_SINGLE_MATCH",
                        "ACROSS_ALL_MATCHES"
                      ],
                      "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
                    }
                  }
                },
                "rawMessageSigning": {
                  "type": "object",
                  "description": "Raw message signing configuration",
                  "properties": {
                    "algorithm": {
                      "type": "string"
                    },
                    "derivationPath": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "applyForApprove": {
                  "type": "boolean",
                  "description": "Applying this rule over APPROVE type transactions (can only be enabled when rule's transaction type is TRANSFER)"
                },
                "applyForTypedMessage": {
                  "type": "boolean",
                  "description": "Applying this rule over TYPED_MESSAGE type transactions (can only be enabled when rule's transaction type is CONTRACT_CALL)"
                },
                "externalDescriptor": {
                  "type": "string",
                  "description": "A unique id identifying the rule"
                }
              },
              "required": [
                "type",
                "action",
                "asset",
                "amountCurrency",
                "amountScope",
                "amount",
                "periodSec",
                "externalDescriptor"
              ]
            }
          },
          "checkResult": {
            "type": "object",
            "description": "Policy rules validation result",
            "properties": {
              "errors": {
                "type": "number",
                "description": "Number of errors"
              },
              "result": {
                "type": "array",
                "description": "A set of validation results",
                "items": {
                  "type": "object",
                  "description": "The rule validation result",
                  "properties": {
                    "index": {
                      "type": "number",
                      "description": "Rule index number in the policy"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok",
                        "failure"
                      ],
                      "description": "Validation status"
                    },
                    "errors": {
                      "type": "array",
                      "description": "A set of rule validation error objects",
                      "items": {
                        "type": "object",
                        "description": "Rule validation result error",
                        "properties": {
                          "errorMessage": {
                            "type": "string",
                            "description": "Error message"
                          },
                          "errorCode": {
                            "type": "number",
                            "description": "error code"
                          },
                          "errorCodeName": {
                            "type": "string",
                            "description": "error code name"
                          },
                          "errorField": {
                            "type": "string",
                            "enum": [
                              "operator",
                              "operators",
                              "authorizationGroups",
                              "designatedSigner",
                              "designatedSigners",
                              "contractMethods",
                              "amountAggregation",
                              "src",
                              "dst"
                            ],
                            "description": "The field which the error relates to\n* operator - transaction initiator\n* operators - transaction initiators\n* authorizationGroups - transaction authorizer groups\n* designatedSigner - transaction signer\n* designatedSigners - transaction signers\n* contractMethods - contract methods\n* amountAggregation - transaction amount aggregation configuration\n* src - transaction source asset configuration\n* dst - transaction destination asset configuration\n"
                          }
                        },
                        "required": [
                          "errorMessage",
                          "errorCode",
                          "errorCodeName",
                          "errorField"
                        ]
                      }
                    }
                  },
                  "required": [
                    "index",
                    "status",
                    "errors"
                  ]
                }
              }
            },
            "required": [
              "errors",
              "result"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Policy related metadata",
            "properties": {
              "editedBy": {
                "type": "string",
                "description": "The user id of the user who last edited the policy"
              },
              "editedAt": {
                "type": "string",
                "description": "The timestamp of the last edit of the policy"
              },
              "publishedBy": {
                "type": "string",
                "description": "The user id of the user who last published the policy"
              },
              "publishedAt": {
                "type": "string",
                "description": "The timestamp of the last publish of the policy"
              }
            }
          }
        },
        "required": [
          "status",
          "rules",
          "checkResult",
          "metadata"
        ]
      },
      "description": "Send publish request for a set of policy rules.\n\nSend publish request of set of policy rules and returns the response. </br>\n**Note:** These endpoints are currently in beta and might be subject to changes.\nIf you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.\n"
    }
  ],
  "errors": [
    {
      "method": "post",
      "path": "/off_exchange/settlements/trader",
      "messages": [
        "Failed to escape $ref"
      ]
    },
    {
      "method": "get",
      "path": "/off_exchange/settlements/transactions",
      "messages": [
        "Failed to escape $ref"
      ]
    }
  ],
  "options": {
    "keyword": true,
    "separate": null
  }
}