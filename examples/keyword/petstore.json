{
  "openapi": "3.0.3",
  "functions": [
    {
      "method": "post",
      "path": "/pet",
      "name": "pet_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "required": [
                "name",
                "photoUrls"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "name": {
                  "type": "string",
                  "example": "doggie"
                },
                "category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Dogs"
                    }
                  },
                  "xml": {
                    "name": "category"
                  }
                },
                "photoUrls": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "string",
                    "xml": {
                      "name": "photoUrl"
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "tag"
                    }
                  }
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ],
                  "description": "pet status in the store"
                }
              },
              "xml": {
                "name": "pet"
              }
            }
          }
        }
      ],
      "output": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Dogs"
              }
            },
            "xml": {
              "name": "category"
            }
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "tag"
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "pending",
              "sold"
            ],
            "description": "pet status in the store"
          }
        },
        "xml": {
          "name": "pet"
        }
      },
      "description": "Add a new pet to the store"
    },
    {
      "method": "put",
      "path": "/pet",
      "name": "pet_put",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "required": [
                "name",
                "photoUrls"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "name": {
                  "type": "string",
                  "example": "doggie"
                },
                "category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Dogs"
                    }
                  },
                  "xml": {
                    "name": "category"
                  }
                },
                "photoUrls": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "string",
                    "xml": {
                      "name": "photoUrl"
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "tag"
                    }
                  }
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ],
                  "description": "pet status in the store"
                }
              },
              "xml": {
                "name": "pet"
              }
            }
          }
        }
      ],
      "output": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Dogs"
              }
            },
            "xml": {
              "name": "category"
            }
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "tag"
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "pending",
              "sold"
            ],
            "description": "pet status in the store"
          }
        },
        "xml": {
          "name": "pet"
        }
      },
      "description": "Update an existing pet by Id"
    },
    {
      "method": "get",
      "path": "/pet/findByStatus",
      "name": "pet_findByStatus_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {},
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "required": [
            "name",
            "photoUrls"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64",
              "example": 10
            },
            "name": {
              "type": "string",
              "example": "doggie"
            },
            "category": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Dogs"
                }
              },
              "xml": {
                "name": "category"
              }
            },
            "photoUrls": {
              "type": "array",
              "xml": {
                "wrapped": true
              },
              "items": {
                "type": "string",
                "xml": {
                  "name": "photoUrl"
                }
              }
            },
            "tags": {
              "type": "array",
              "xml": {
                "wrapped": true
              },
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "xml": {
                  "name": "tag"
                }
              }
            },
            "status": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "description": "pet status in the store"
            }
          },
          "xml": {
            "name": "pet"
          }
        }
      },
      "description": "Finds Pets by status.\n\nMultiple status values can be provided with comma separated strings"
    },
    {
      "method": "get",
      "path": "/pet/findByTags",
      "name": "pet_findByTags_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Tags to filter by"
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "array",
        "items": {
          "required": [
            "name",
            "photoUrls"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64",
              "example": 10
            },
            "name": {
              "type": "string",
              "example": "doggie"
            },
            "category": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Dogs"
                }
              },
              "xml": {
                "name": "category"
              }
            },
            "photoUrls": {
              "type": "array",
              "xml": {
                "wrapped": true
              },
              "items": {
                "type": "string",
                "xml": {
                  "name": "photoUrl"
                }
              }
            },
            "tags": {
              "type": "array",
              "xml": {
                "wrapped": true
              },
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "xml": {
                  "name": "tag"
                }
              }
            },
            "status": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "description": "pet status in the store"
            }
          },
          "xml": {
            "name": "pet"
          }
        }
      },
      "description": "Finds Pets by tags.\n\nMultiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
    },
    {
      "method": "get",
      "path": "/pet/{petId}",
      "name": "pet_getByPetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "petId": {
              "type": "integer",
              "format": "int64",
              "description": "ID of pet to return"
            }
          }
        }
      ],
      "output": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Dogs"
              }
            },
            "xml": {
              "name": "category"
            }
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "tag"
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "pending",
              "sold"
            ],
            "description": "pet status in the store"
          }
        },
        "xml": {
          "name": "pet"
        }
      },
      "description": "Find pet by ID.\n\nReturns a single pet"
    },
    {
      "method": "post",
      "path": "/pet/{petId}",
      "name": "pet_postByPetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "petId": {
              "type": "integer",
              "format": "int64",
              "description": "ID of pet that needs to be updated"
            },
            "query": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of pet that needs to be updated"
                },
                "status": {
                  "type": "string",
                  "description": "Status of pet that needs to be updated"
                }
              },
              "required": []
            }
          }
        }
      ],
      "description": ""
    },
    {
      "method": "delete",
      "path": "/pet/{petId}",
      "name": "pet_eraseByPetid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "petId": {
              "type": "integer",
              "format": "int64",
              "description": "Pet id to delete"
            }
          }
        }
      ],
      "description": ""
    },
    {
      "method": "get",
      "path": "/store/inventory",
      "name": "store_inventory_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "output": {
        "type": "object",
        "additionalProperties": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Returns pet inventories by status.\n\nReturns a map of status codes to quantities"
    },
    {
      "method": "post",
      "path": "/store/order",
      "name": "store_order_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "petId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 198772
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32",
                  "example": 7
                },
                "shipDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "placed",
                    "approved",
                    "delivered"
                  ],
                  "description": "Order Status"
                },
                "complete": {
                  "type": "boolean"
                }
              },
              "xml": {
                "name": "order"
              }
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ],
            "description": "Order Status"
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "description": "Place an order for a pet.\n\nPlace a new order in the store"
    },
    {
      "method": "get",
      "path": "/store/order/{orderId}",
      "name": "store_order_getByOrderid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "orderId": {
              "type": "integer",
              "format": "int64",
              "description": "ID of order that needs to be fetched"
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ],
            "description": "Order Status"
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "description": "Find purchase order by ID.\n\nFor valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions."
    },
    {
      "method": "delete",
      "path": "/store/order/{orderId}",
      "name": "store_order_eraseByOrderid",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "orderId": {
              "type": "integer",
              "format": "int64",
              "description": "ID of the order that needs to be deleted"
            }
          }
        }
      ],
      "description": "Delete purchase order by ID.\n\nFor valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors"
    },
    {
      "method": "post",
      "path": "/user",
      "name": "user_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "username": {
                  "type": "string",
                  "example": "theUser"
                },
                "firstName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "James"
                },
                "email": {
                  "type": "string",
                  "example": "john@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                },
                "phone": {
                  "type": "string",
                  "example": "12345"
                },
                "userStatus": {
                  "type": "integer",
                  "description": "User Status",
                  "format": "int32",
                  "example": 1
                }
              },
              "xml": {
                "name": "user"
              }
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "description": "Create user.\n\nThis can only be done by the logged in user."
    },
    {
      "method": "post",
      "path": "/user/createWithList",
      "name": "user_createWithList_post",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "body": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10
                  },
                  "username": {
                    "type": "string",
                    "example": "theUser"
                  },
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "James"
                  },
                  "email": {
                    "type": "string",
                    "example": "john@email.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "12345"
                  },
                  "phone": {
                    "type": "string",
                    "example": "12345"
                  },
                  "userStatus": {
                    "type": "integer",
                    "description": "User Status",
                    "format": "int32",
                    "example": 1
                  }
                },
                "xml": {
                  "name": "user"
                }
              }
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "description": "Creates list of users with given input array"
    },
    {
      "method": "get",
      "path": "/user/login",
      "name": "user_login_get",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "query": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "The user name for login"
                },
                "password": {
                  "type": "string",
                  "description": "The password for login in clear text"
                }
              },
              "required": []
            }
          }
        }
      ],
      "output": {
        "type": "string"
      },
      "description": ""
    },
    {
      "method": "get",
      "path": "/user/logout",
      "name": "user_logout_get",
      "parameters": [
        {
          "type": "object",
          "properties": {}
        }
      ],
      "description": ""
    },
    {
      "method": "get",
      "path": "/user/{username}",
      "name": "user_getByUsername",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "The name that needs to be fetched. Use user1 for testing. "
            }
          }
        }
      ],
      "output": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "description": ""
    },
    {
      "method": "put",
      "path": "/user/{username}",
      "name": "user_putByUsername",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "name that need to be deleted"
            },
            "body": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "username": {
                  "type": "string",
                  "example": "theUser"
                },
                "firstName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "James"
                },
                "email": {
                  "type": "string",
                  "example": "john@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                },
                "phone": {
                  "type": "string",
                  "example": "12345"
                },
                "userStatus": {
                  "type": "integer",
                  "description": "User Status",
                  "format": "int32",
                  "example": 1
                }
              },
              "xml": {
                "name": "user"
              }
            }
          }
        }
      ],
      "description": "Update user.\n\nThis can only be done by the logged in user."
    },
    {
      "method": "delete",
      "path": "/user/{username}",
      "name": "user_eraseByUsername",
      "parameters": [
        {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "The name that needs to be deleted"
            }
          }
        }
      ],
      "description": "Delete user.\n\nThis can only be done by the logged in user."
    }
  ],
  "errors": [
    {
      "method": "post",
      "path": "/pet/{petId}/uploadImage",
      "messages": [
        "supports only \"application/json\", \"application/x-www-form-urlencoded\", \"multipart/form-data\" and \"text/plain\" content type in the request body."
      ]
    }
  ],
  "options": {
    "keyword": true,
    "separate": null
  }
}